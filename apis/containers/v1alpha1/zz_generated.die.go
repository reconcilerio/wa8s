//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2025 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1alpha1

import (
	fmtx "fmt"
	osx "os"
	reflectx "reflect"

	cmp "github.com/google/go-cmp/cmp"
	v1 "k8s.io/api/core/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	json "k8s.io/apimachinery/pkg/util/json"
	jsonpath "k8s.io/client-go/util/jsonpath"
	metav1 "reconciler.io/dies/apis/meta/v1"
	patch "reconciler.io/dies/patch"
	"reconciler.io/runtime/apis"
	yaml "sigs.k8s.io/yaml"

	componentsv1alpha1 "reconciler.io/wa8s/apis/components/v1alpha1"
	registriesv1alpha1 "reconciler.io/wa8s/apis/registries/v1alpha1"
)

var CronTriggerSpecBlank = (&CronTriggerSpecDie{}).DieFeed(CronTriggerSpec{})

type CronTriggerSpecDie struct {
	mutable bool
	r       CronTriggerSpec
	seal    CronTriggerSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CronTriggerSpecDie) DieImmutable(immutable bool) *CronTriggerSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CronTriggerSpecDie) DieFeed(r CronTriggerSpec) *CronTriggerSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CronTriggerSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CronTriggerSpecDie) DieFeedPtr(r *CronTriggerSpec) *CronTriggerSpecDie {
	if r == nil {
		r = &CronTriggerSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CronTriggerSpecDie) DieFeedJSON(j []byte) *CronTriggerSpecDie {
	r := CronTriggerSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CronTriggerSpecDie) DieFeedYAML(y []byte) *CronTriggerSpecDie {
	r := CronTriggerSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CronTriggerSpecDie) DieFeedYAMLFile(name string) *CronTriggerSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CronTriggerSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *CronTriggerSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CronTriggerSpecDie) DieRelease() CronTriggerSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CronTriggerSpecDie) DieReleasePtr() *CronTriggerSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CronTriggerSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CronTriggerSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CronTriggerSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CronTriggerSpecDie) DieStamp(fn func(r *CronTriggerSpec)) *CronTriggerSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CronTriggerSpecDie) DieStampAt(jp string, fn interface{}) *CronTriggerSpecDie {
	return d.DieStamp(func(r *CronTriggerSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CronTriggerSpecDie) DieWith(fns ...func(d *CronTriggerSpecDie)) *CronTriggerSpecDie {
	nd := CronTriggerSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CronTriggerSpecDie) DeepCopy() *CronTriggerSpecDie {
	r := *d.r.DeepCopy()
	return &CronTriggerSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *CronTriggerSpecDie) DieSeal() *CronTriggerSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *CronTriggerSpecDie) DieSealFeed(r CronTriggerSpec) *CronTriggerSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *CronTriggerSpecDie) DieSealFeedPtr(r *CronTriggerSpec) *CronTriggerSpecDie {
	if r == nil {
		r = &CronTriggerSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *CronTriggerSpecDie) DieSealRelease() CronTriggerSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *CronTriggerSpecDie) DieSealReleasePtr() *CronTriggerSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *CronTriggerSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *CronTriggerSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericContainerSpecDie mutates GenericContainerSpec as a die.
func (d *CronTriggerSpecDie) GenericContainerSpecDie(fn func(d *GenericContainerSpecDie)) *CronTriggerSpecDie {
	return d.DieStamp(func(r *CronTriggerSpec) {
		d := GenericContainerSpecBlank.DieImmutable(false).DieFeed(r.GenericContainerSpec)
		fn(d)
		r.GenericContainerSpec = d.DieRelease()
	})
}

func (d *CronTriggerSpecDie) GenericContainerSpec(v GenericContainerSpec) *CronTriggerSpecDie {
	return d.DieStamp(func(r *CronTriggerSpec) {
		r.GenericContainerSpec = v
	})
}

// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
func (d *CronTriggerSpecDie) Schedule(v string) *CronTriggerSpecDie {
	return d.DieStamp(func(r *CronTriggerSpec) {
		r.Schedule = v
	})
}

// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
//
// If not specified, this will default to the time zone of the kube-controller-manager process.
//
// # The set of valid time zone names and the time zone offset is loaded from the system-wide time zone
//
// database by the API server during CronJob validation and the controller manager during execution.
//
// If no system-wide time zone database can be found a bundled version of the database is used instead.
//
// # If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host
//
// configuration, the controller will stop creating new new Jobs and will create a system event with the
//
// reason UnknownTimeZone.
//
// More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
func (d *CronTriggerSpecDie) TimeZone(v *string) *CronTriggerSpecDie {
	return d.DieStamp(func(r *CronTriggerSpec) {
		r.TimeZone = v
	})
}

// Restart policy for all containers within the pod.
//
// One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
//
// Default to Always.
//
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
func (d *CronTriggerSpecDie) RestartPolicy(v v1.RestartPolicy) *CronTriggerSpecDie {
	return d.DieStamp(func(r *CronTriggerSpec) {
		r.RestartPolicy = v
	})
}

var CronTriggerStatusBlank = (&CronTriggerStatusDie{}).DieFeed(CronTriggerStatus{})

type CronTriggerStatusDie struct {
	mutable bool
	r       CronTriggerStatus
	seal    CronTriggerStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CronTriggerStatusDie) DieImmutable(immutable bool) *CronTriggerStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CronTriggerStatusDie) DieFeed(r CronTriggerStatus) *CronTriggerStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CronTriggerStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CronTriggerStatusDie) DieFeedPtr(r *CronTriggerStatus) *CronTriggerStatusDie {
	if r == nil {
		r = &CronTriggerStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CronTriggerStatusDie) DieFeedJSON(j []byte) *CronTriggerStatusDie {
	r := CronTriggerStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CronTriggerStatusDie) DieFeedYAML(y []byte) *CronTriggerStatusDie {
	r := CronTriggerStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CronTriggerStatusDie) DieFeedYAMLFile(name string) *CronTriggerStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CronTriggerStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *CronTriggerStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CronTriggerStatusDie) DieRelease() CronTriggerStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CronTriggerStatusDie) DieReleasePtr() *CronTriggerStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CronTriggerStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CronTriggerStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CronTriggerStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CronTriggerStatusDie) DieStamp(fn func(r *CronTriggerStatus)) *CronTriggerStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CronTriggerStatusDie) DieStampAt(jp string, fn interface{}) *CronTriggerStatusDie {
	return d.DieStamp(func(r *CronTriggerStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CronTriggerStatusDie) DieWith(fns ...func(d *CronTriggerStatusDie)) *CronTriggerStatusDie {
	nd := CronTriggerStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CronTriggerStatusDie) DeepCopy() *CronTriggerStatusDie {
	r := *d.r.DeepCopy()
	return &CronTriggerStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *CronTriggerStatusDie) DieSeal() *CronTriggerStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *CronTriggerStatusDie) DieSealFeed(r CronTriggerStatus) *CronTriggerStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *CronTriggerStatusDie) DieSealFeedPtr(r *CronTriggerStatus) *CronTriggerStatusDie {
	if r == nil {
		r = &CronTriggerStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *CronTriggerStatusDie) DieSealRelease() CronTriggerStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *CronTriggerStatusDie) DieSealReleasePtr() *CronTriggerStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *CronTriggerStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *CronTriggerStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericContainerStatusDie mutates GenericContainerStatus as a die.
func (d *CronTriggerStatusDie) GenericContainerStatusDie(fn func(d *GenericContainerStatusDie)) *CronTriggerStatusDie {
	return d.DieStamp(func(r *CronTriggerStatus) {
		d := GenericContainerStatusBlank.DieImmutable(false).DieFeed(r.GenericContainerStatus)
		fn(d)
		r.GenericContainerStatus = d.DieRelease()
	})
}

func (d *CronTriggerStatusDie) Status(v apis.Status) *CronTriggerStatusDie {
	return d.DieStamp(func(r *CronTriggerStatus) {
		r.Status = v
	})
}

func (d *CronTriggerStatusDie) GenericContainerStatus(v GenericContainerStatus) *CronTriggerStatusDie {
	return d.DieStamp(func(r *CronTriggerStatus) {
		r.GenericContainerStatus = v
	})
}

var CronTriggerBlank = (&CronTriggerDie{}).DieFeed(CronTrigger{})

type CronTriggerDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       CronTrigger
	seal    CronTrigger
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CronTriggerDie) DieImmutable(immutable bool) *CronTriggerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CronTriggerDie) DieFeed(r CronTrigger) *CronTriggerDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &CronTriggerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CronTriggerDie) DieFeedPtr(r *CronTrigger) *CronTriggerDie {
	if r == nil {
		r = &CronTrigger{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CronTriggerDie) DieFeedJSON(j []byte) *CronTriggerDie {
	r := CronTrigger{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CronTriggerDie) DieFeedYAML(y []byte) *CronTriggerDie {
	r := CronTrigger{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CronTriggerDie) DieFeedYAMLFile(name string) *CronTriggerDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CronTriggerDie) DieFeedRawExtension(raw runtime.RawExtension) *CronTriggerDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CronTriggerDie) DieRelease() CronTrigger {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CronTriggerDie) DieReleasePtr() *CronTrigger {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *CronTriggerDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CronTriggerDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CronTriggerDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CronTriggerDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CronTriggerDie) DieStamp(fn func(r *CronTrigger)) *CronTriggerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CronTriggerDie) DieStampAt(jp string, fn interface{}) *CronTriggerDie {
	return d.DieStamp(func(r *CronTrigger) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CronTriggerDie) DieWith(fns ...func(d *CronTriggerDie)) *CronTriggerDie {
	nd := CronTriggerBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CronTriggerDie) DeepCopy() *CronTriggerDie {
	r := *d.r.DeepCopy()
	return &CronTriggerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *CronTriggerDie) DieSeal() *CronTriggerDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *CronTriggerDie) DieSealFeed(r CronTrigger) *CronTriggerDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *CronTriggerDie) DieSealFeedPtr(r *CronTrigger) *CronTriggerDie {
	if r == nil {
		r = &CronTrigger{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *CronTriggerDie) DieSealRelease() CronTrigger {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *CronTriggerDie) DieSealReleasePtr() *CronTrigger {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *CronTriggerDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *CronTriggerDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*CronTriggerDie)(nil)

func (d *CronTriggerDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *CronTriggerDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *CronTriggerDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *CronTriggerDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &CronTrigger{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *CronTriggerDie) APIVersion(v string) *CronTriggerDie {
	return d.DieStamp(func(r *CronTrigger) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *CronTriggerDie) Kind(v string) *CronTriggerDie {
	return d.DieStamp(func(r *CronTrigger) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *CronTriggerDie) TypeMetadata(v apismetav1.TypeMeta) *CronTriggerDie {
	return d.DieStamp(func(r *CronTrigger) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *CronTriggerDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *CronTriggerDie {
	return d.DieStamp(func(r *CronTrigger) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *CronTriggerDie) Metadata(v apismetav1.ObjectMeta) *CronTriggerDie {
	return d.DieStamp(func(r *CronTrigger) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *CronTriggerDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *CronTriggerDie {
	return d.DieStamp(func(r *CronTrigger) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *CronTriggerDie) SpecDie(fn func(d *CronTriggerSpecDie)) *CronTriggerDie {
	return d.DieStamp(func(r *CronTrigger) {
		d := CronTriggerSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *CronTriggerDie) StatusDie(fn func(d *CronTriggerStatusDie)) *CronTriggerDie {
	return d.DieStamp(func(r *CronTrigger) {
		d := CronTriggerStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *CronTriggerDie) Spec(v CronTriggerSpec) *CronTriggerDie {
	return d.DieStamp(func(r *CronTrigger) {
		r.Spec = v
	})
}

func (d *CronTriggerDie) Status(v CronTriggerStatus) *CronTriggerDie {
	return d.DieStamp(func(r *CronTrigger) {
		r.Status = v
	})
}

var GenericContainerSpecBlank = (&GenericContainerSpecDie{}).DieFeed(GenericContainerSpec{})

type GenericContainerSpecDie struct {
	mutable bool
	r       GenericContainerSpec
	seal    GenericContainerSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GenericContainerSpecDie) DieImmutable(immutable bool) *GenericContainerSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GenericContainerSpecDie) DieFeed(r GenericContainerSpec) *GenericContainerSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GenericContainerSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GenericContainerSpecDie) DieFeedPtr(r *GenericContainerSpec) *GenericContainerSpecDie {
	if r == nil {
		r = &GenericContainerSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *GenericContainerSpecDie) DieFeedJSON(j []byte) *GenericContainerSpecDie {
	r := GenericContainerSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *GenericContainerSpecDie) DieFeedYAML(y []byte) *GenericContainerSpecDie {
	r := GenericContainerSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *GenericContainerSpecDie) DieFeedYAMLFile(name string) *GenericContainerSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericContainerSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *GenericContainerSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *GenericContainerSpecDie) DieRelease() GenericContainerSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GenericContainerSpecDie) DieReleasePtr() *GenericContainerSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *GenericContainerSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *GenericContainerSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericContainerSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GenericContainerSpecDie) DieStamp(fn func(r *GenericContainerSpec)) *GenericContainerSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *GenericContainerSpecDie) DieStampAt(jp string, fn interface{}) *GenericContainerSpecDie {
	return d.DieStamp(func(r *GenericContainerSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *GenericContainerSpecDie) DieWith(fns ...func(d *GenericContainerSpecDie)) *GenericContainerSpecDie {
	nd := GenericContainerSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GenericContainerSpecDie) DeepCopy() *GenericContainerSpecDie {
	r := *d.r.DeepCopy()
	return &GenericContainerSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *GenericContainerSpecDie) DieSeal() *GenericContainerSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *GenericContainerSpecDie) DieSealFeed(r GenericContainerSpec) *GenericContainerSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *GenericContainerSpecDie) DieSealFeedPtr(r *GenericContainerSpec) *GenericContainerSpecDie {
	if r == nil {
		r = &GenericContainerSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *GenericContainerSpecDie) DieSealRelease() GenericContainerSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *GenericContainerSpecDie) DieSealReleasePtr() *GenericContainerSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *GenericContainerSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *GenericContainerSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentSpecDie mutates GenericComponentSpec as a die.
func (d *GenericContainerSpecDie) GenericComponentSpecDie(fn func(d *componentsv1alpha1.GenericComponentSpecDie)) *GenericContainerSpecDie {
	return d.DieStamp(func(r *GenericContainerSpec) {
		d := componentsv1alpha1.GenericComponentSpecBlank.DieImmutable(false).DieFeed(r.GenericComponentSpec)
		fn(d)
		r.GenericComponentSpec = d.DieRelease()
	})
}

// RefDie mutates Ref as a die.
//
// Ref references the component to convert to an image
func (d *GenericContainerSpecDie) RefDie(fn func(d *componentsv1alpha1.ComponentReferenceDie)) *GenericContainerSpecDie {
	return d.DieStamp(func(r *GenericContainerSpec) {
		d := componentsv1alpha1.ComponentReferenceBlank.DieImmutable(false).DieFeed(r.Ref)
		fn(d)
		r.Ref = d.DieRelease()
	})
}

// ServiceAccountRefDie mutates ServiceAccountRef as a die.
//
// ServiceAccountRef references the service account holding image pull secrets for the image
func (d *GenericContainerSpecDie) ServiceAccountRefDie(fn func(d *registriesv1alpha1.ServiceAccountReferenceDie)) *GenericContainerSpecDie {
	return d.DieStamp(func(r *GenericContainerSpec) {
		d := registriesv1alpha1.ServiceAccountReferenceBlank.DieImmutable(false).DieFeed(r.ServiceAccountRef)
		fn(d)
		r.ServiceAccountRef = d.DieRelease()
	})
}

// HostCapabilitiesDie mutates HostCapabilities as a die.
func (d *GenericContainerSpecDie) HostCapabilitiesDie(fn func(d *HostCapabilitiesDie)) *GenericContainerSpecDie {
	return d.DieStamp(func(r *GenericContainerSpec) {
		d := HostCapabilitiesBlank.DieImmutable(false).DieFeed(r.HostCapabilities)
		fn(d)
		r.HostCapabilities = d.DieRelease()
	})
}

func (d *GenericContainerSpecDie) GenericComponentSpec(v componentsv1alpha1.GenericComponentSpec) *GenericContainerSpecDie {
	return d.DieStamp(func(r *GenericContainerSpec) {
		r.GenericComponentSpec = v
	})
}

// Ref references the component to convert to an image
func (d *GenericContainerSpecDie) Ref(v componentsv1alpha1.ComponentReference) *GenericContainerSpecDie {
	return d.DieStamp(func(r *GenericContainerSpec) {
		r.Ref = v
	})
}

// ServiceAccountRef references the service account holding image pull secrets for the image
func (d *GenericContainerSpecDie) ServiceAccountRef(v registriesv1alpha1.ServiceAccountReference) *GenericContainerSpecDie {
	return d.DieStamp(func(r *GenericContainerSpec) {
		r.ServiceAccountRef = v
	})
}

func (d *GenericContainerSpecDie) HostCapabilities(v HostCapabilities) *GenericContainerSpecDie {
	return d.DieStamp(func(r *GenericContainerSpec) {
		r.HostCapabilities = v
	})
}

var HostCapabilitiesBlank = (&HostCapabilitiesDie{}).DieFeed(HostCapabilities{})

type HostCapabilitiesDie struct {
	mutable bool
	r       HostCapabilities
	seal    HostCapabilities
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HostCapabilitiesDie) DieImmutable(immutable bool) *HostCapabilitiesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HostCapabilitiesDie) DieFeed(r HostCapabilities) *HostCapabilitiesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HostCapabilitiesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HostCapabilitiesDie) DieFeedPtr(r *HostCapabilities) *HostCapabilitiesDie {
	if r == nil {
		r = &HostCapabilities{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HostCapabilitiesDie) DieFeedJSON(j []byte) *HostCapabilitiesDie {
	r := HostCapabilities{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HostCapabilitiesDie) DieFeedYAML(y []byte) *HostCapabilitiesDie {
	r := HostCapabilities{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HostCapabilitiesDie) DieFeedYAMLFile(name string) *HostCapabilitiesDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostCapabilitiesDie) DieFeedRawExtension(raw runtime.RawExtension) *HostCapabilitiesDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HostCapabilitiesDie) DieRelease() HostCapabilities {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HostCapabilitiesDie) DieReleasePtr() *HostCapabilities {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HostCapabilitiesDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HostCapabilitiesDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostCapabilitiesDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HostCapabilitiesDie) DieStamp(fn func(r *HostCapabilities)) *HostCapabilitiesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HostCapabilitiesDie) DieStampAt(jp string, fn interface{}) *HostCapabilitiesDie {
	return d.DieStamp(func(r *HostCapabilities) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HostCapabilitiesDie) DieWith(fns ...func(d *HostCapabilitiesDie)) *HostCapabilitiesDie {
	nd := HostCapabilitiesBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HostCapabilitiesDie) DeepCopy() *HostCapabilitiesDie {
	r := *d.r.DeepCopy()
	return &HostCapabilitiesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *HostCapabilitiesDie) DieSeal() *HostCapabilitiesDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *HostCapabilitiesDie) DieSealFeed(r HostCapabilities) *HostCapabilitiesDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *HostCapabilitiesDie) DieSealFeedPtr(r *HostCapabilities) *HostCapabilitiesDie {
	if r == nil {
		r = &HostCapabilities{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *HostCapabilitiesDie) DieSealRelease() HostCapabilities {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *HostCapabilitiesDie) DieSealReleasePtr() *HostCapabilities {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *HostCapabilitiesDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *HostCapabilitiesDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// EnvDie mutates Env as a die.
func (d *HostCapabilitiesDie) EnvDie(fn func(d *HostEnvDie)) *HostCapabilitiesDie {
	return d.DieStamp(func(r *HostCapabilities) {
		d := HostEnvBlank.DieImmutable(false).DieFeedPtr(r.Env)
		fn(d)
		r.Env = d.DieReleasePtr()
	})
}

// ConfigDie mutates Config as a die.
func (d *HostCapabilitiesDie) ConfigDie(fn func(d *HostConfigDie)) *HostCapabilitiesDie {
	return d.DieStamp(func(r *HostCapabilities) {
		d := HostConfigBlank.DieImmutable(false).DieFeedPtr(r.Config)
		fn(d)
		r.Config = d.DieReleasePtr()
	})
}

// NetworkDie mutates Network as a die.
func (d *HostCapabilitiesDie) NetworkDie(fn func(d *HostNetworkDie)) *HostCapabilitiesDie {
	return d.DieStamp(func(r *HostCapabilities) {
		d := HostNetworkBlank.DieImmutable(false).DieFeedPtr(r.Network)
		fn(d)
		r.Network = d.DieReleasePtr()
	})
}

func (d *HostCapabilitiesDie) Env(v *HostEnv) *HostCapabilitiesDie {
	return d.DieStamp(func(r *HostCapabilities) {
		r.Env = v
	})
}

func (d *HostCapabilitiesDie) Config(v *HostConfig) *HostCapabilitiesDie {
	return d.DieStamp(func(r *HostCapabilities) {
		r.Config = v
	})
}

func (d *HostCapabilitiesDie) Network(v *HostNetwork) *HostCapabilitiesDie {
	return d.DieStamp(func(r *HostCapabilities) {
		r.Network = v
	})
}

var HostEnvBlank = (&HostEnvDie{}).DieFeed(HostEnv{})

type HostEnvDie struct {
	mutable bool
	r       HostEnv
	seal    HostEnv
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HostEnvDie) DieImmutable(immutable bool) *HostEnvDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HostEnvDie) DieFeed(r HostEnv) *HostEnvDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HostEnvDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HostEnvDie) DieFeedPtr(r *HostEnv) *HostEnvDie {
	if r == nil {
		r = &HostEnv{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HostEnvDie) DieFeedJSON(j []byte) *HostEnvDie {
	r := HostEnv{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HostEnvDie) DieFeedYAML(y []byte) *HostEnvDie {
	r := HostEnv{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HostEnvDie) DieFeedYAMLFile(name string) *HostEnvDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostEnvDie) DieFeedRawExtension(raw runtime.RawExtension) *HostEnvDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HostEnvDie) DieRelease() HostEnv {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HostEnvDie) DieReleasePtr() *HostEnv {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HostEnvDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HostEnvDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostEnvDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HostEnvDie) DieStamp(fn func(r *HostEnv)) *HostEnvDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HostEnvDie) DieStampAt(jp string, fn interface{}) *HostEnvDie {
	return d.DieStamp(func(r *HostEnv) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HostEnvDie) DieWith(fns ...func(d *HostEnvDie)) *HostEnvDie {
	nd := HostEnvBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HostEnvDie) DeepCopy() *HostEnvDie {
	r := *d.r.DeepCopy()
	return &HostEnvDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *HostEnvDie) DieSeal() *HostEnvDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *HostEnvDie) DieSealFeed(r HostEnv) *HostEnvDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *HostEnvDie) DieSealFeedPtr(r *HostEnv) *HostEnvDie {
	if r == nil {
		r = &HostEnv{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *HostEnvDie) DieSealRelease() HostEnv {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *HostEnvDie) DieSealReleasePtr() *HostEnv {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *HostEnvDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *HostEnvDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// VarDie mutates a single item in Vars matched by the nested field Name, appending a new item if no match is found.
func (d *HostEnvDie) VarDie(v string, fn func(d *HostEnvVarDie)) *HostEnvDie {
	return d.DieStamp(func(r *HostEnv) {
		for i := range r.Vars {
			if v == r.Vars[i].Name {
				d := HostEnvVarBlank.DieImmutable(false).DieFeed(r.Vars[i])
				fn(d)
				r.Vars[i] = d.DieRelease()
				return
			}
		}

		d := HostEnvVarBlank.DieImmutable(false).DieFeed(HostEnvVar{Name: v})
		fn(d)
		r.Vars = append(r.Vars, d.DieRelease())
	})
}

func (d *HostEnvDie) Inherit(v bool) *HostEnvDie {
	return d.DieStamp(func(r *HostEnv) {
		r.Inherit = v
	})
}

func (d *HostEnvDie) Vars(v ...HostEnvVar) *HostEnvDie {
	return d.DieStamp(func(r *HostEnv) {
		r.Vars = v
	})
}

var HostEnvVarBlank = (&HostEnvVarDie{}).DieFeed(HostEnvVar{})

type HostEnvVarDie struct {
	mutable bool
	r       HostEnvVar
	seal    HostEnvVar
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HostEnvVarDie) DieImmutable(immutable bool) *HostEnvVarDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HostEnvVarDie) DieFeed(r HostEnvVar) *HostEnvVarDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HostEnvVarDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HostEnvVarDie) DieFeedPtr(r *HostEnvVar) *HostEnvVarDie {
	if r == nil {
		r = &HostEnvVar{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HostEnvVarDie) DieFeedJSON(j []byte) *HostEnvVarDie {
	r := HostEnvVar{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HostEnvVarDie) DieFeedYAML(y []byte) *HostEnvVarDie {
	r := HostEnvVar{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HostEnvVarDie) DieFeedYAMLFile(name string) *HostEnvVarDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostEnvVarDie) DieFeedRawExtension(raw runtime.RawExtension) *HostEnvVarDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HostEnvVarDie) DieRelease() HostEnvVar {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HostEnvVarDie) DieReleasePtr() *HostEnvVar {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HostEnvVarDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HostEnvVarDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostEnvVarDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HostEnvVarDie) DieStamp(fn func(r *HostEnvVar)) *HostEnvVarDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HostEnvVarDie) DieStampAt(jp string, fn interface{}) *HostEnvVarDie {
	return d.DieStamp(func(r *HostEnvVar) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HostEnvVarDie) DieWith(fns ...func(d *HostEnvVarDie)) *HostEnvVarDie {
	nd := HostEnvVarBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HostEnvVarDie) DeepCopy() *HostEnvVarDie {
	r := *d.r.DeepCopy()
	return &HostEnvVarDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *HostEnvVarDie) DieSeal() *HostEnvVarDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *HostEnvVarDie) DieSealFeed(r HostEnvVar) *HostEnvVarDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *HostEnvVarDie) DieSealFeedPtr(r *HostEnvVar) *HostEnvVarDie {
	if r == nil {
		r = &HostEnvVar{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *HostEnvVarDie) DieSealRelease() HostEnvVar {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *HostEnvVarDie) DieSealReleasePtr() *HostEnvVar {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *HostEnvVarDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *HostEnvVarDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *HostEnvVarDie) Name(v string) *HostEnvVarDie {
	return d.DieStamp(func(r *HostEnvVar) {
		r.Name = v
	})
}

func (d *HostEnvVarDie) Value(v *string) *HostEnvVarDie {
	return d.DieStamp(func(r *HostEnvVar) {
		r.Value = v
	})
}

var HostConfigBlank = (&HostConfigDie{}).DieFeed(HostConfig{})

type HostConfigDie struct {
	mutable bool
	r       HostConfig
	seal    HostConfig
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HostConfigDie) DieImmutable(immutable bool) *HostConfigDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HostConfigDie) DieFeed(r HostConfig) *HostConfigDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HostConfigDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HostConfigDie) DieFeedPtr(r *HostConfig) *HostConfigDie {
	if r == nil {
		r = &HostConfig{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HostConfigDie) DieFeedJSON(j []byte) *HostConfigDie {
	r := HostConfig{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HostConfigDie) DieFeedYAML(y []byte) *HostConfigDie {
	r := HostConfig{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HostConfigDie) DieFeedYAMLFile(name string) *HostConfigDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostConfigDie) DieFeedRawExtension(raw runtime.RawExtension) *HostConfigDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HostConfigDie) DieRelease() HostConfig {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HostConfigDie) DieReleasePtr() *HostConfig {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HostConfigDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HostConfigDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostConfigDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HostConfigDie) DieStamp(fn func(r *HostConfig)) *HostConfigDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HostConfigDie) DieStampAt(jp string, fn interface{}) *HostConfigDie {
	return d.DieStamp(func(r *HostConfig) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HostConfigDie) DieWith(fns ...func(d *HostConfigDie)) *HostConfigDie {
	nd := HostConfigBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HostConfigDie) DeepCopy() *HostConfigDie {
	r := *d.r.DeepCopy()
	return &HostConfigDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *HostConfigDie) DieSeal() *HostConfigDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *HostConfigDie) DieSealFeed(r HostConfig) *HostConfigDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *HostConfigDie) DieSealFeedPtr(r *HostConfig) *HostConfigDie {
	if r == nil {
		r = &HostConfig{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *HostConfigDie) DieSealRelease() HostConfig {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *HostConfigDie) DieSealReleasePtr() *HostConfig {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *HostConfigDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *HostConfigDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// VarDie mutates a single item in Vars matched by the nested field Name, appending a new item if no match is found.
func (d *HostConfigDie) VarDie(v string, fn func(d *HostConfigVarDie)) *HostConfigDie {
	return d.DieStamp(func(r *HostConfig) {
		for i := range r.Vars {
			if v == r.Vars[i].Name {
				d := HostConfigVarBlank.DieImmutable(false).DieFeed(r.Vars[i])
				fn(d)
				r.Vars[i] = d.DieRelease()
				return
			}
		}

		d := HostConfigVarBlank.DieImmutable(false).DieFeed(HostConfigVar{Name: v})
		fn(d)
		r.Vars = append(r.Vars, d.DieRelease())
	})
}

func (d *HostConfigDie) Vars(v ...HostConfigVar) *HostConfigDie {
	return d.DieStamp(func(r *HostConfig) {
		r.Vars = v
	})
}

var HostConfigVarBlank = (&HostConfigVarDie{}).DieFeed(HostConfigVar{})

type HostConfigVarDie struct {
	mutable bool
	r       HostConfigVar
	seal    HostConfigVar
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HostConfigVarDie) DieImmutable(immutable bool) *HostConfigVarDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HostConfigVarDie) DieFeed(r HostConfigVar) *HostConfigVarDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HostConfigVarDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HostConfigVarDie) DieFeedPtr(r *HostConfigVar) *HostConfigVarDie {
	if r == nil {
		r = &HostConfigVar{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HostConfigVarDie) DieFeedJSON(j []byte) *HostConfigVarDie {
	r := HostConfigVar{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HostConfigVarDie) DieFeedYAML(y []byte) *HostConfigVarDie {
	r := HostConfigVar{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HostConfigVarDie) DieFeedYAMLFile(name string) *HostConfigVarDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostConfigVarDie) DieFeedRawExtension(raw runtime.RawExtension) *HostConfigVarDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HostConfigVarDie) DieRelease() HostConfigVar {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HostConfigVarDie) DieReleasePtr() *HostConfigVar {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HostConfigVarDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HostConfigVarDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostConfigVarDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HostConfigVarDie) DieStamp(fn func(r *HostConfigVar)) *HostConfigVarDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HostConfigVarDie) DieStampAt(jp string, fn interface{}) *HostConfigVarDie {
	return d.DieStamp(func(r *HostConfigVar) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HostConfigVarDie) DieWith(fns ...func(d *HostConfigVarDie)) *HostConfigVarDie {
	nd := HostConfigVarBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HostConfigVarDie) DeepCopy() *HostConfigVarDie {
	r := *d.r.DeepCopy()
	return &HostConfigVarDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *HostConfigVarDie) DieSeal() *HostConfigVarDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *HostConfigVarDie) DieSealFeed(r HostConfigVar) *HostConfigVarDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *HostConfigVarDie) DieSealFeedPtr(r *HostConfigVar) *HostConfigVarDie {
	if r == nil {
		r = &HostConfigVar{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *HostConfigVarDie) DieSealRelease() HostConfigVar {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *HostConfigVarDie) DieSealReleasePtr() *HostConfigVar {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *HostConfigVarDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *HostConfigVarDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *HostConfigVarDie) Name(v string) *HostConfigVarDie {
	return d.DieStamp(func(r *HostConfigVar) {
		r.Name = v
	})
}

func (d *HostConfigVarDie) Value(v string) *HostConfigVarDie {
	return d.DieStamp(func(r *HostConfigVar) {
		r.Value = v
	})
}

var HostNetworkBlank = (&HostNetworkDie{}).DieFeed(HostNetwork{})

type HostNetworkDie struct {
	mutable bool
	r       HostNetwork
	seal    HostNetwork
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HostNetworkDie) DieImmutable(immutable bool) *HostNetworkDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HostNetworkDie) DieFeed(r HostNetwork) *HostNetworkDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HostNetworkDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HostNetworkDie) DieFeedPtr(r *HostNetwork) *HostNetworkDie {
	if r == nil {
		r = &HostNetwork{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HostNetworkDie) DieFeedJSON(j []byte) *HostNetworkDie {
	r := HostNetwork{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HostNetworkDie) DieFeedYAML(y []byte) *HostNetworkDie {
	r := HostNetwork{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HostNetworkDie) DieFeedYAMLFile(name string) *HostNetworkDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostNetworkDie) DieFeedRawExtension(raw runtime.RawExtension) *HostNetworkDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HostNetworkDie) DieRelease() HostNetwork {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HostNetworkDie) DieReleasePtr() *HostNetwork {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HostNetworkDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HostNetworkDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostNetworkDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HostNetworkDie) DieStamp(fn func(r *HostNetwork)) *HostNetworkDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HostNetworkDie) DieStampAt(jp string, fn interface{}) *HostNetworkDie {
	return d.DieStamp(func(r *HostNetwork) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HostNetworkDie) DieWith(fns ...func(d *HostNetworkDie)) *HostNetworkDie {
	nd := HostNetworkBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HostNetworkDie) DeepCopy() *HostNetworkDie {
	r := *d.r.DeepCopy()
	return &HostNetworkDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *HostNetworkDie) DieSeal() *HostNetworkDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *HostNetworkDie) DieSealFeed(r HostNetwork) *HostNetworkDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *HostNetworkDie) DieSealFeedPtr(r *HostNetwork) *HostNetworkDie {
	if r == nil {
		r = &HostNetwork{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *HostNetworkDie) DieSealRelease() HostNetwork {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *HostNetworkDie) DieSealReleasePtr() *HostNetwork {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *HostNetworkDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *HostNetworkDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *HostNetworkDie) Inherit(v bool) *HostNetworkDie {
	return d.DieStamp(func(r *HostNetwork) {
		r.Inherit = v
	})
}

func (d *HostNetworkDie) IPNameLookup(v bool) *HostNetworkDie {
	return d.DieStamp(func(r *HostNetwork) {
		r.IPNameLookup = v
	})
}

var GenericContainerStatusBlank = (&GenericContainerStatusDie{}).DieFeed(GenericContainerStatus{})

type GenericContainerStatusDie struct {
	mutable bool
	r       GenericContainerStatus
	seal    GenericContainerStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GenericContainerStatusDie) DieImmutable(immutable bool) *GenericContainerStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GenericContainerStatusDie) DieFeed(r GenericContainerStatus) *GenericContainerStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GenericContainerStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GenericContainerStatusDie) DieFeedPtr(r *GenericContainerStatus) *GenericContainerStatusDie {
	if r == nil {
		r = &GenericContainerStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *GenericContainerStatusDie) DieFeedJSON(j []byte) *GenericContainerStatusDie {
	r := GenericContainerStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *GenericContainerStatusDie) DieFeedYAML(y []byte) *GenericContainerStatusDie {
	r := GenericContainerStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *GenericContainerStatusDie) DieFeedYAMLFile(name string) *GenericContainerStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericContainerStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *GenericContainerStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *GenericContainerStatusDie) DieRelease() GenericContainerStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GenericContainerStatusDie) DieReleasePtr() *GenericContainerStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *GenericContainerStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *GenericContainerStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericContainerStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GenericContainerStatusDie) DieStamp(fn func(r *GenericContainerStatus)) *GenericContainerStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *GenericContainerStatusDie) DieStampAt(jp string, fn interface{}) *GenericContainerStatusDie {
	return d.DieStamp(func(r *GenericContainerStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *GenericContainerStatusDie) DieWith(fns ...func(d *GenericContainerStatusDie)) *GenericContainerStatusDie {
	nd := GenericContainerStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GenericContainerStatusDie) DeepCopy() *GenericContainerStatusDie {
	r := *d.r.DeepCopy()
	return &GenericContainerStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *GenericContainerStatusDie) DieSeal() *GenericContainerStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *GenericContainerStatusDie) DieSealFeed(r GenericContainerStatus) *GenericContainerStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *GenericContainerStatusDie) DieSealFeedPtr(r *GenericContainerStatus) *GenericContainerStatusDie {
	if r == nil {
		r = &GenericContainerStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *GenericContainerStatusDie) DieSealRelease() GenericContainerStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *GenericContainerStatusDie) DieSealReleasePtr() *GenericContainerStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *GenericContainerStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *GenericContainerStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentStatusDie mutates GenericComponentStatus as a die.
func (d *GenericContainerStatusDie) GenericComponentStatusDie(fn func(d *componentsv1alpha1.GenericComponentStatusDie)) *GenericContainerStatusDie {
	return d.DieStamp(func(r *GenericContainerStatus) {
		d := componentsv1alpha1.GenericComponentStatusBlank.DieImmutable(false).DieFeed(r.GenericComponentStatus)
		fn(d)
		r.GenericComponentStatus = d.DieRelease()
	})
}

func (d *GenericContainerStatusDie) GenericComponentStatus(v componentsv1alpha1.GenericComponentStatus) *GenericContainerStatusDie {
	return d.DieStamp(func(r *GenericContainerStatus) {
		r.GenericComponentStatus = v
	})
}

var WITBlank = (&WITDie{}).DieFeed(WIT{})

type WITDie struct {
	mutable bool
	r       WIT
	seal    WIT
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *WITDie) DieImmutable(immutable bool) *WITDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *WITDie) DieFeed(r WIT) *WITDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &WITDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *WITDie) DieFeedPtr(r *WIT) *WITDie {
	if r == nil {
		r = &WIT{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *WITDie) DieFeedJSON(j []byte) *WITDie {
	r := WIT{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *WITDie) DieFeedYAML(y []byte) *WITDie {
	r := WIT{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *WITDie) DieFeedYAMLFile(name string) *WITDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WITDie) DieFeedRawExtension(raw runtime.RawExtension) *WITDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *WITDie) DieRelease() WIT {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *WITDie) DieReleasePtr() *WIT {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *WITDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *WITDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WITDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *WITDie) DieStamp(fn func(r *WIT)) *WITDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *WITDie) DieStampAt(jp string, fn interface{}) *WITDie {
	return d.DieStamp(func(r *WIT) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *WITDie) DieWith(fns ...func(d *WITDie)) *WITDie {
	nd := WITBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *WITDie) DeepCopy() *WITDie {
	r := *d.r.DeepCopy()
	return &WITDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *WITDie) DieSeal() *WITDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *WITDie) DieSealFeed(r WIT) *WITDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *WITDie) DieSealFeedPtr(r *WIT) *WITDie {
	if r == nil {
		r = &WIT{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *WITDie) DieSealRelease() WIT {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *WITDie) DieSealReleasePtr() *WIT {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *WITDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *WITDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *WITDie) Imports(v ...string) *WITDie {
	return d.DieStamp(func(r *WIT) {
		r.Imports = v
	})
}

func (d *WITDie) Exports(v ...string) *WITDie {
	return d.DieStamp(func(r *WIT) {
		r.Exports = v
	})
}

var ContainerDuckSpecBlank = (&ContainerDuckSpecDie{}).DieFeed(ContainerDuckSpec{})

type ContainerDuckSpecDie struct {
	mutable bool
	r       ContainerDuckSpec
	seal    ContainerDuckSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerDuckSpecDie) DieImmutable(immutable bool) *ContainerDuckSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerDuckSpecDie) DieFeed(r ContainerDuckSpec) *ContainerDuckSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerDuckSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerDuckSpecDie) DieFeedPtr(r *ContainerDuckSpec) *ContainerDuckSpecDie {
	if r == nil {
		r = &ContainerDuckSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ContainerDuckSpecDie) DieFeedJSON(j []byte) *ContainerDuckSpecDie {
	r := ContainerDuckSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ContainerDuckSpecDie) DieFeedYAML(y []byte) *ContainerDuckSpecDie {
	r := ContainerDuckSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ContainerDuckSpecDie) DieFeedYAMLFile(name string) *ContainerDuckSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ContainerDuckSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerDuckSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerDuckSpecDie) DieRelease() ContainerDuckSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerDuckSpecDie) DieReleasePtr() *ContainerDuckSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ContainerDuckSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ContainerDuckSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ContainerDuckSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerDuckSpecDie) DieStamp(fn func(r *ContainerDuckSpec)) *ContainerDuckSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ContainerDuckSpecDie) DieStampAt(jp string, fn interface{}) *ContainerDuckSpecDie {
	return d.DieStamp(func(r *ContainerDuckSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ContainerDuckSpecDie) DieWith(fns ...func(d *ContainerDuckSpecDie)) *ContainerDuckSpecDie {
	nd := ContainerDuckSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerDuckSpecDie) DeepCopy() *ContainerDuckSpecDie {
	r := *d.r.DeepCopy()
	return &ContainerDuckSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ContainerDuckSpecDie) DieSeal() *ContainerDuckSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ContainerDuckSpecDie) DieSealFeed(r ContainerDuckSpec) *ContainerDuckSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ContainerDuckSpecDie) DieSealFeedPtr(r *ContainerDuckSpec) *ContainerDuckSpecDie {
	if r == nil {
		r = &ContainerDuckSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ContainerDuckSpecDie) DieSealRelease() ContainerDuckSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ContainerDuckSpecDie) DieSealReleasePtr() *ContainerDuckSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ContainerDuckSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ContainerDuckSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericContainerSpecDie mutates GenericContainerSpec as a die.
func (d *ContainerDuckSpecDie) GenericContainerSpecDie(fn func(d *GenericContainerSpecDie)) *ContainerDuckSpecDie {
	return d.DieStamp(func(r *ContainerDuckSpec) {
		d := GenericContainerSpecBlank.DieImmutable(false).DieFeed(r.GenericContainerSpec)
		fn(d)
		r.GenericContainerSpec = d.DieRelease()
	})
}

func (d *ContainerDuckSpecDie) GenericContainerSpec(v GenericContainerSpec) *ContainerDuckSpecDie {
	return d.DieStamp(func(r *ContainerDuckSpec) {
		r.GenericContainerSpec = v
	})
}

var ContainerDuckStatusBlank = (&ContainerDuckStatusDie{}).DieFeed(ContainerDuckStatus{})

type ContainerDuckStatusDie struct {
	mutable bool
	r       ContainerDuckStatus
	seal    ContainerDuckStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerDuckStatusDie) DieImmutable(immutable bool) *ContainerDuckStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerDuckStatusDie) DieFeed(r ContainerDuckStatus) *ContainerDuckStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerDuckStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerDuckStatusDie) DieFeedPtr(r *ContainerDuckStatus) *ContainerDuckStatusDie {
	if r == nil {
		r = &ContainerDuckStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ContainerDuckStatusDie) DieFeedJSON(j []byte) *ContainerDuckStatusDie {
	r := ContainerDuckStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ContainerDuckStatusDie) DieFeedYAML(y []byte) *ContainerDuckStatusDie {
	r := ContainerDuckStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ContainerDuckStatusDie) DieFeedYAMLFile(name string) *ContainerDuckStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ContainerDuckStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerDuckStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerDuckStatusDie) DieRelease() ContainerDuckStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerDuckStatusDie) DieReleasePtr() *ContainerDuckStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ContainerDuckStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ContainerDuckStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ContainerDuckStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerDuckStatusDie) DieStamp(fn func(r *ContainerDuckStatus)) *ContainerDuckStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ContainerDuckStatusDie) DieStampAt(jp string, fn interface{}) *ContainerDuckStatusDie {
	return d.DieStamp(func(r *ContainerDuckStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ContainerDuckStatusDie) DieWith(fns ...func(d *ContainerDuckStatusDie)) *ContainerDuckStatusDie {
	nd := ContainerDuckStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerDuckStatusDie) DeepCopy() *ContainerDuckStatusDie {
	r := *d.r.DeepCopy()
	return &ContainerDuckStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ContainerDuckStatusDie) DieSeal() *ContainerDuckStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ContainerDuckStatusDie) DieSealFeed(r ContainerDuckStatus) *ContainerDuckStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ContainerDuckStatusDie) DieSealFeedPtr(r *ContainerDuckStatus) *ContainerDuckStatusDie {
	if r == nil {
		r = &ContainerDuckStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ContainerDuckStatusDie) DieSealRelease() ContainerDuckStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ContainerDuckStatusDie) DieSealReleasePtr() *ContainerDuckStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ContainerDuckStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ContainerDuckStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericContainerStatusDie mutates GenericContainerStatus as a die.
func (d *ContainerDuckStatusDie) GenericContainerStatusDie(fn func(d *GenericContainerStatusDie)) *ContainerDuckStatusDie {
	return d.DieStamp(func(r *ContainerDuckStatus) {
		d := GenericContainerStatusBlank.DieImmutable(false).DieFeed(r.GenericContainerStatus)
		fn(d)
		r.GenericContainerStatus = d.DieRelease()
	})
}

func (d *ContainerDuckStatusDie) Status(v apis.Status) *ContainerDuckStatusDie {
	return d.DieStamp(func(r *ContainerDuckStatus) {
		r.Status = v
	})
}

func (d *ContainerDuckStatusDie) GenericContainerStatus(v GenericContainerStatus) *ContainerDuckStatusDie {
	return d.DieStamp(func(r *ContainerDuckStatus) {
		r.GenericContainerStatus = v
	})
}

var ContainerDuckBlank = (&ContainerDuckDie{}).DieFeed(ContainerDuck{})

type ContainerDuckDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       ContainerDuck
	seal    ContainerDuck
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerDuckDie) DieImmutable(immutable bool) *ContainerDuckDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerDuckDie) DieFeed(r ContainerDuck) *ContainerDuckDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ContainerDuckDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerDuckDie) DieFeedPtr(r *ContainerDuck) *ContainerDuckDie {
	if r == nil {
		r = &ContainerDuck{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ContainerDuckDie) DieFeedJSON(j []byte) *ContainerDuckDie {
	r := ContainerDuck{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ContainerDuckDie) DieFeedYAML(y []byte) *ContainerDuckDie {
	r := ContainerDuck{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ContainerDuckDie) DieFeedYAMLFile(name string) *ContainerDuckDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ContainerDuckDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerDuckDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerDuckDie) DieRelease() ContainerDuck {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerDuckDie) DieReleasePtr() *ContainerDuck {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ContainerDuckDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ContainerDuckDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ContainerDuckDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ContainerDuckDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerDuckDie) DieStamp(fn func(r *ContainerDuck)) *ContainerDuckDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ContainerDuckDie) DieStampAt(jp string, fn interface{}) *ContainerDuckDie {
	return d.DieStamp(func(r *ContainerDuck) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ContainerDuckDie) DieWith(fns ...func(d *ContainerDuckDie)) *ContainerDuckDie {
	nd := ContainerDuckBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerDuckDie) DeepCopy() *ContainerDuckDie {
	r := *d.r.DeepCopy()
	return &ContainerDuckDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ContainerDuckDie) DieSeal() *ContainerDuckDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ContainerDuckDie) DieSealFeed(r ContainerDuck) *ContainerDuckDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ContainerDuckDie) DieSealFeedPtr(r *ContainerDuck) *ContainerDuckDie {
	if r == nil {
		r = &ContainerDuck{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ContainerDuckDie) DieSealRelease() ContainerDuck {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ContainerDuckDie) DieSealReleasePtr() *ContainerDuck {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ContainerDuckDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ContainerDuckDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ContainerDuckDie)(nil)

func (d *ContainerDuckDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ContainerDuckDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ContainerDuckDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ContainerDuckDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ContainerDuck{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ContainerDuckDie) APIVersion(v string) *ContainerDuckDie {
	return d.DieStamp(func(r *ContainerDuck) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ContainerDuckDie) Kind(v string) *ContainerDuckDie {
	return d.DieStamp(func(r *ContainerDuck) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ContainerDuckDie) TypeMetadata(v apismetav1.TypeMeta) *ContainerDuckDie {
	return d.DieStamp(func(r *ContainerDuck) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ContainerDuckDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *ContainerDuckDie {
	return d.DieStamp(func(r *ContainerDuck) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ContainerDuckDie) Metadata(v apismetav1.ObjectMeta) *ContainerDuckDie {
	return d.DieStamp(func(r *ContainerDuck) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ContainerDuckDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ContainerDuckDie {
	return d.DieStamp(func(r *ContainerDuck) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ContainerDuckDie) SpecDie(fn func(d *ContainerDuckSpecDie)) *ContainerDuckDie {
	return d.DieStamp(func(r *ContainerDuck) {
		d := ContainerDuckSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ContainerDuckDie) StatusDie(fn func(d *ContainerDuckStatusDie)) *ContainerDuckDie {
	return d.DieStamp(func(r *ContainerDuck) {
		d := ContainerDuckStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ContainerDuckDie) Spec(v ContainerDuckSpec) *ContainerDuckDie {
	return d.DieStamp(func(r *ContainerDuck) {
		r.Spec = v
	})
}

func (d *ContainerDuckDie) Status(v ContainerDuckStatus) *ContainerDuckDie {
	return d.DieStamp(func(r *ContainerDuck) {
		r.Status = v
	})
}

var HttpTriggerSpecBlank = (&HttpTriggerSpecDie{}).DieFeed(HttpTriggerSpec{})

type HttpTriggerSpecDie struct {
	mutable bool
	r       HttpTriggerSpec
	seal    HttpTriggerSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HttpTriggerSpecDie) DieImmutable(immutable bool) *HttpTriggerSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HttpTriggerSpecDie) DieFeed(r HttpTriggerSpec) *HttpTriggerSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HttpTriggerSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HttpTriggerSpecDie) DieFeedPtr(r *HttpTriggerSpec) *HttpTriggerSpecDie {
	if r == nil {
		r = &HttpTriggerSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HttpTriggerSpecDie) DieFeedJSON(j []byte) *HttpTriggerSpecDie {
	r := HttpTriggerSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HttpTriggerSpecDie) DieFeedYAML(y []byte) *HttpTriggerSpecDie {
	r := HttpTriggerSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HttpTriggerSpecDie) DieFeedYAMLFile(name string) *HttpTriggerSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HttpTriggerSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *HttpTriggerSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HttpTriggerSpecDie) DieRelease() HttpTriggerSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HttpTriggerSpecDie) DieReleasePtr() *HttpTriggerSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HttpTriggerSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HttpTriggerSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HttpTriggerSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HttpTriggerSpecDie) DieStamp(fn func(r *HttpTriggerSpec)) *HttpTriggerSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HttpTriggerSpecDie) DieStampAt(jp string, fn interface{}) *HttpTriggerSpecDie {
	return d.DieStamp(func(r *HttpTriggerSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HttpTriggerSpecDie) DieWith(fns ...func(d *HttpTriggerSpecDie)) *HttpTriggerSpecDie {
	nd := HttpTriggerSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HttpTriggerSpecDie) DeepCopy() *HttpTriggerSpecDie {
	r := *d.r.DeepCopy()
	return &HttpTriggerSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *HttpTriggerSpecDie) DieSeal() *HttpTriggerSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *HttpTriggerSpecDie) DieSealFeed(r HttpTriggerSpec) *HttpTriggerSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *HttpTriggerSpecDie) DieSealFeedPtr(r *HttpTriggerSpec) *HttpTriggerSpecDie {
	if r == nil {
		r = &HttpTriggerSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *HttpTriggerSpecDie) DieSealRelease() HttpTriggerSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *HttpTriggerSpecDie) DieSealReleasePtr() *HttpTriggerSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *HttpTriggerSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *HttpTriggerSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericContainerSpecDie mutates GenericContainerSpec as a die.
func (d *HttpTriggerSpecDie) GenericContainerSpecDie(fn func(d *GenericContainerSpecDie)) *HttpTriggerSpecDie {
	return d.DieStamp(func(r *HttpTriggerSpec) {
		d := GenericContainerSpecBlank.DieImmutable(false).DieFeed(r.GenericContainerSpec)
		fn(d)
		r.GenericContainerSpec = d.DieRelease()
	})
}

func (d *HttpTriggerSpecDie) GenericContainerSpec(v GenericContainerSpec) *HttpTriggerSpecDie {
	return d.DieStamp(func(r *HttpTriggerSpec) {
		r.GenericContainerSpec = v
	})
}

var HttpTriggerStatusBlank = (&HttpTriggerStatusDie{}).DieFeed(HttpTriggerStatus{})

type HttpTriggerStatusDie struct {
	mutable bool
	r       HttpTriggerStatus
	seal    HttpTriggerStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HttpTriggerStatusDie) DieImmutable(immutable bool) *HttpTriggerStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HttpTriggerStatusDie) DieFeed(r HttpTriggerStatus) *HttpTriggerStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HttpTriggerStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HttpTriggerStatusDie) DieFeedPtr(r *HttpTriggerStatus) *HttpTriggerStatusDie {
	if r == nil {
		r = &HttpTriggerStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HttpTriggerStatusDie) DieFeedJSON(j []byte) *HttpTriggerStatusDie {
	r := HttpTriggerStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HttpTriggerStatusDie) DieFeedYAML(y []byte) *HttpTriggerStatusDie {
	r := HttpTriggerStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HttpTriggerStatusDie) DieFeedYAMLFile(name string) *HttpTriggerStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HttpTriggerStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *HttpTriggerStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HttpTriggerStatusDie) DieRelease() HttpTriggerStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HttpTriggerStatusDie) DieReleasePtr() *HttpTriggerStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HttpTriggerStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HttpTriggerStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HttpTriggerStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HttpTriggerStatusDie) DieStamp(fn func(r *HttpTriggerStatus)) *HttpTriggerStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HttpTriggerStatusDie) DieStampAt(jp string, fn interface{}) *HttpTriggerStatusDie {
	return d.DieStamp(func(r *HttpTriggerStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HttpTriggerStatusDie) DieWith(fns ...func(d *HttpTriggerStatusDie)) *HttpTriggerStatusDie {
	nd := HttpTriggerStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HttpTriggerStatusDie) DeepCopy() *HttpTriggerStatusDie {
	r := *d.r.DeepCopy()
	return &HttpTriggerStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *HttpTriggerStatusDie) DieSeal() *HttpTriggerStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *HttpTriggerStatusDie) DieSealFeed(r HttpTriggerStatus) *HttpTriggerStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *HttpTriggerStatusDie) DieSealFeedPtr(r *HttpTriggerStatus) *HttpTriggerStatusDie {
	if r == nil {
		r = &HttpTriggerStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *HttpTriggerStatusDie) DieSealRelease() HttpTriggerStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *HttpTriggerStatusDie) DieSealReleasePtr() *HttpTriggerStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *HttpTriggerStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *HttpTriggerStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericContainerStatusDie mutates GenericContainerStatus as a die.
func (d *HttpTriggerStatusDie) GenericContainerStatusDie(fn func(d *GenericContainerStatusDie)) *HttpTriggerStatusDie {
	return d.DieStamp(func(r *HttpTriggerStatus) {
		d := GenericContainerStatusBlank.DieImmutable(false).DieFeed(r.GenericContainerStatus)
		fn(d)
		r.GenericContainerStatus = d.DieRelease()
	})
}

func (d *HttpTriggerStatusDie) Status(v apis.Status) *HttpTriggerStatusDie {
	return d.DieStamp(func(r *HttpTriggerStatus) {
		r.Status = v
	})
}

func (d *HttpTriggerStatusDie) GenericContainerStatus(v GenericContainerStatus) *HttpTriggerStatusDie {
	return d.DieStamp(func(r *HttpTriggerStatus) {
		r.GenericContainerStatus = v
	})
}

func (d *HttpTriggerStatusDie) URL(v string) *HttpTriggerStatusDie {
	return d.DieStamp(func(r *HttpTriggerStatus) {
		r.URL = v
	})
}

var HttpTriggerBlank = (&HttpTriggerDie{}).DieFeed(HttpTrigger{})

type HttpTriggerDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       HttpTrigger
	seal    HttpTrigger
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HttpTriggerDie) DieImmutable(immutable bool) *HttpTriggerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HttpTriggerDie) DieFeed(r HttpTrigger) *HttpTriggerDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &HttpTriggerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HttpTriggerDie) DieFeedPtr(r *HttpTrigger) *HttpTriggerDie {
	if r == nil {
		r = &HttpTrigger{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HttpTriggerDie) DieFeedJSON(j []byte) *HttpTriggerDie {
	r := HttpTrigger{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HttpTriggerDie) DieFeedYAML(y []byte) *HttpTriggerDie {
	r := HttpTrigger{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HttpTriggerDie) DieFeedYAMLFile(name string) *HttpTriggerDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HttpTriggerDie) DieFeedRawExtension(raw runtime.RawExtension) *HttpTriggerDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HttpTriggerDie) DieRelease() HttpTrigger {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HttpTriggerDie) DieReleasePtr() *HttpTrigger {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *HttpTriggerDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HttpTriggerDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HttpTriggerDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HttpTriggerDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HttpTriggerDie) DieStamp(fn func(r *HttpTrigger)) *HttpTriggerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HttpTriggerDie) DieStampAt(jp string, fn interface{}) *HttpTriggerDie {
	return d.DieStamp(func(r *HttpTrigger) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HttpTriggerDie) DieWith(fns ...func(d *HttpTriggerDie)) *HttpTriggerDie {
	nd := HttpTriggerBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HttpTriggerDie) DeepCopy() *HttpTriggerDie {
	r := *d.r.DeepCopy()
	return &HttpTriggerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *HttpTriggerDie) DieSeal() *HttpTriggerDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *HttpTriggerDie) DieSealFeed(r HttpTrigger) *HttpTriggerDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *HttpTriggerDie) DieSealFeedPtr(r *HttpTrigger) *HttpTriggerDie {
	if r == nil {
		r = &HttpTrigger{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *HttpTriggerDie) DieSealRelease() HttpTrigger {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *HttpTriggerDie) DieSealReleasePtr() *HttpTrigger {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *HttpTriggerDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *HttpTriggerDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*HttpTriggerDie)(nil)

func (d *HttpTriggerDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *HttpTriggerDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *HttpTriggerDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *HttpTriggerDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &HttpTrigger{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *HttpTriggerDie) APIVersion(v string) *HttpTriggerDie {
	return d.DieStamp(func(r *HttpTrigger) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *HttpTriggerDie) Kind(v string) *HttpTriggerDie {
	return d.DieStamp(func(r *HttpTrigger) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *HttpTriggerDie) TypeMetadata(v apismetav1.TypeMeta) *HttpTriggerDie {
	return d.DieStamp(func(r *HttpTrigger) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *HttpTriggerDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *HttpTriggerDie {
	return d.DieStamp(func(r *HttpTrigger) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *HttpTriggerDie) Metadata(v apismetav1.ObjectMeta) *HttpTriggerDie {
	return d.DieStamp(func(r *HttpTrigger) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *HttpTriggerDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *HttpTriggerDie {
	return d.DieStamp(func(r *HttpTrigger) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *HttpTriggerDie) SpecDie(fn func(d *HttpTriggerSpecDie)) *HttpTriggerDie {
	return d.DieStamp(func(r *HttpTrigger) {
		d := HttpTriggerSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *HttpTriggerDie) StatusDie(fn func(d *HttpTriggerStatusDie)) *HttpTriggerDie {
	return d.DieStamp(func(r *HttpTrigger) {
		d := HttpTriggerStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *HttpTriggerDie) Spec(v HttpTriggerSpec) *HttpTriggerDie {
	return d.DieStamp(func(r *HttpTrigger) {
		r.Spec = v
	})
}

func (d *HttpTriggerDie) Status(v HttpTriggerStatus) *HttpTriggerDie {
	return d.DieStamp(func(r *HttpTrigger) {
		r.Status = v
	})
}

var WasmtimeContainerSpecBlank = (&WasmtimeContainerSpecDie{}).DieFeed(WasmtimeContainerSpec{})

type WasmtimeContainerSpecDie struct {
	mutable bool
	r       WasmtimeContainerSpec
	seal    WasmtimeContainerSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *WasmtimeContainerSpecDie) DieImmutable(immutable bool) *WasmtimeContainerSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *WasmtimeContainerSpecDie) DieFeed(r WasmtimeContainerSpec) *WasmtimeContainerSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &WasmtimeContainerSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *WasmtimeContainerSpecDie) DieFeedPtr(r *WasmtimeContainerSpec) *WasmtimeContainerSpecDie {
	if r == nil {
		r = &WasmtimeContainerSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *WasmtimeContainerSpecDie) DieFeedJSON(j []byte) *WasmtimeContainerSpecDie {
	r := WasmtimeContainerSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *WasmtimeContainerSpecDie) DieFeedYAML(y []byte) *WasmtimeContainerSpecDie {
	r := WasmtimeContainerSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *WasmtimeContainerSpecDie) DieFeedYAMLFile(name string) *WasmtimeContainerSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WasmtimeContainerSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *WasmtimeContainerSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *WasmtimeContainerSpecDie) DieRelease() WasmtimeContainerSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *WasmtimeContainerSpecDie) DieReleasePtr() *WasmtimeContainerSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *WasmtimeContainerSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *WasmtimeContainerSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WasmtimeContainerSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *WasmtimeContainerSpecDie) DieStamp(fn func(r *WasmtimeContainerSpec)) *WasmtimeContainerSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *WasmtimeContainerSpecDie) DieStampAt(jp string, fn interface{}) *WasmtimeContainerSpecDie {
	return d.DieStamp(func(r *WasmtimeContainerSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *WasmtimeContainerSpecDie) DieWith(fns ...func(d *WasmtimeContainerSpecDie)) *WasmtimeContainerSpecDie {
	nd := WasmtimeContainerSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *WasmtimeContainerSpecDie) DeepCopy() *WasmtimeContainerSpecDie {
	r := *d.r.DeepCopy()
	return &WasmtimeContainerSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *WasmtimeContainerSpecDie) DieSeal() *WasmtimeContainerSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *WasmtimeContainerSpecDie) DieSealFeed(r WasmtimeContainerSpec) *WasmtimeContainerSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *WasmtimeContainerSpecDie) DieSealFeedPtr(r *WasmtimeContainerSpec) *WasmtimeContainerSpecDie {
	if r == nil {
		r = &WasmtimeContainerSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *WasmtimeContainerSpecDie) DieSealRelease() WasmtimeContainerSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *WasmtimeContainerSpecDie) DieSealReleasePtr() *WasmtimeContainerSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *WasmtimeContainerSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *WasmtimeContainerSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentSpecDie mutates GenericComponentSpec as a die.
func (d *WasmtimeContainerSpecDie) GenericComponentSpecDie(fn func(d *componentsv1alpha1.GenericComponentSpecDie)) *WasmtimeContainerSpecDie {
	return d.DieStamp(func(r *WasmtimeContainerSpec) {
		d := componentsv1alpha1.GenericComponentSpecBlank.DieImmutable(false).DieFeed(r.GenericComponentSpec)
		fn(d)
		r.GenericComponentSpec = d.DieRelease()
	})
}

// RefDie mutates Ref as a die.
//
// Ref references the component to convert to an image
func (d *WasmtimeContainerSpecDie) RefDie(fn func(d *componentsv1alpha1.ComponentReferenceDie)) *WasmtimeContainerSpecDie {
	return d.DieStamp(func(r *WasmtimeContainerSpec) {
		d := componentsv1alpha1.ComponentReferenceBlank.DieImmutable(false).DieFeed(r.Ref)
		fn(d)
		r.Ref = d.DieRelease()
	})
}

// ServiceAccountRefDie mutates ServiceAccountRef as a die.
//
// ServiceAccountRef references the service account holding image pull secrets for the image
func (d *WasmtimeContainerSpecDie) ServiceAccountRefDie(fn func(d *registriesv1alpha1.ServiceAccountReferenceDie)) *WasmtimeContainerSpecDie {
	return d.DieStamp(func(r *WasmtimeContainerSpec) {
		d := registriesv1alpha1.ServiceAccountReferenceBlank.DieImmutable(false).DieFeed(r.ServiceAccountRef)
		fn(d)
		r.ServiceAccountRef = d.DieRelease()
	})
}

func (d *WasmtimeContainerSpecDie) GenericComponentSpec(v componentsv1alpha1.GenericComponentSpec) *WasmtimeContainerSpecDie {
	return d.DieStamp(func(r *WasmtimeContainerSpec) {
		r.GenericComponentSpec = v
	})
}

// BaseImage in an oci repository holding wasmtime
func (d *WasmtimeContainerSpecDie) BaseImage(v string) *WasmtimeContainerSpecDie {
	return d.DieStamp(func(r *WasmtimeContainerSpec) {
		r.BaseImage = v
	})
}

// Ref references the component to convert to an image
func (d *WasmtimeContainerSpecDie) Ref(v componentsv1alpha1.ComponentReference) *WasmtimeContainerSpecDie {
	return d.DieStamp(func(r *WasmtimeContainerSpec) {
		r.Ref = v
	})
}

// ServiceAccountRef references the service account holding image pull secrets for the image
func (d *WasmtimeContainerSpecDie) ServiceAccountRef(v registriesv1alpha1.ServiceAccountReference) *WasmtimeContainerSpecDie {
	return d.DieStamp(func(r *WasmtimeContainerSpec) {
		r.ServiceAccountRef = v
	})
}

var WasmtimeContainerStatusBlank = (&WasmtimeContainerStatusDie{}).DieFeed(WasmtimeContainerStatus{})

type WasmtimeContainerStatusDie struct {
	mutable bool
	r       WasmtimeContainerStatus
	seal    WasmtimeContainerStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *WasmtimeContainerStatusDie) DieImmutable(immutable bool) *WasmtimeContainerStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *WasmtimeContainerStatusDie) DieFeed(r WasmtimeContainerStatus) *WasmtimeContainerStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &WasmtimeContainerStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *WasmtimeContainerStatusDie) DieFeedPtr(r *WasmtimeContainerStatus) *WasmtimeContainerStatusDie {
	if r == nil {
		r = &WasmtimeContainerStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *WasmtimeContainerStatusDie) DieFeedJSON(j []byte) *WasmtimeContainerStatusDie {
	r := WasmtimeContainerStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *WasmtimeContainerStatusDie) DieFeedYAML(y []byte) *WasmtimeContainerStatusDie {
	r := WasmtimeContainerStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *WasmtimeContainerStatusDie) DieFeedYAMLFile(name string) *WasmtimeContainerStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WasmtimeContainerStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *WasmtimeContainerStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *WasmtimeContainerStatusDie) DieRelease() WasmtimeContainerStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *WasmtimeContainerStatusDie) DieReleasePtr() *WasmtimeContainerStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *WasmtimeContainerStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *WasmtimeContainerStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WasmtimeContainerStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *WasmtimeContainerStatusDie) DieStamp(fn func(r *WasmtimeContainerStatus)) *WasmtimeContainerStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *WasmtimeContainerStatusDie) DieStampAt(jp string, fn interface{}) *WasmtimeContainerStatusDie {
	return d.DieStamp(func(r *WasmtimeContainerStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *WasmtimeContainerStatusDie) DieWith(fns ...func(d *WasmtimeContainerStatusDie)) *WasmtimeContainerStatusDie {
	nd := WasmtimeContainerStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *WasmtimeContainerStatusDie) DeepCopy() *WasmtimeContainerStatusDie {
	r := *d.r.DeepCopy()
	return &WasmtimeContainerStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *WasmtimeContainerStatusDie) DieSeal() *WasmtimeContainerStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *WasmtimeContainerStatusDie) DieSealFeed(r WasmtimeContainerStatus) *WasmtimeContainerStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *WasmtimeContainerStatusDie) DieSealFeedPtr(r *WasmtimeContainerStatus) *WasmtimeContainerStatusDie {
	if r == nil {
		r = &WasmtimeContainerStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *WasmtimeContainerStatusDie) DieSealRelease() WasmtimeContainerStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *WasmtimeContainerStatusDie) DieSealReleasePtr() *WasmtimeContainerStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *WasmtimeContainerStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *WasmtimeContainerStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentStatusDie mutates GenericComponentStatus as a die.
func (d *WasmtimeContainerStatusDie) GenericComponentStatusDie(fn func(d *componentsv1alpha1.GenericComponentStatusDie)) *WasmtimeContainerStatusDie {
	return d.DieStamp(func(r *WasmtimeContainerStatus) {
		d := componentsv1alpha1.GenericComponentStatusBlank.DieImmutable(false).DieFeed(r.GenericComponentStatus)
		fn(d)
		r.GenericComponentStatus = d.DieRelease()
	})
}

func (d *WasmtimeContainerStatusDie) Status(v apis.Status) *WasmtimeContainerStatusDie {
	return d.DieStamp(func(r *WasmtimeContainerStatus) {
		r.Status = v
	})
}

func (d *WasmtimeContainerStatusDie) GenericComponentStatus(v componentsv1alpha1.GenericComponentStatus) *WasmtimeContainerStatusDie {
	return d.DieStamp(func(r *WasmtimeContainerStatus) {
		r.GenericComponentStatus = v
	})
}

var WasmtimeContainerBlank = (&WasmtimeContainerDie{}).DieFeed(WasmtimeContainer{})

type WasmtimeContainerDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       WasmtimeContainer
	seal    WasmtimeContainer
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *WasmtimeContainerDie) DieImmutable(immutable bool) *WasmtimeContainerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *WasmtimeContainerDie) DieFeed(r WasmtimeContainer) *WasmtimeContainerDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &WasmtimeContainerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *WasmtimeContainerDie) DieFeedPtr(r *WasmtimeContainer) *WasmtimeContainerDie {
	if r == nil {
		r = &WasmtimeContainer{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *WasmtimeContainerDie) DieFeedJSON(j []byte) *WasmtimeContainerDie {
	r := WasmtimeContainer{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *WasmtimeContainerDie) DieFeedYAML(y []byte) *WasmtimeContainerDie {
	r := WasmtimeContainer{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *WasmtimeContainerDie) DieFeedYAMLFile(name string) *WasmtimeContainerDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WasmtimeContainerDie) DieFeedRawExtension(raw runtime.RawExtension) *WasmtimeContainerDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *WasmtimeContainerDie) DieRelease() WasmtimeContainer {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *WasmtimeContainerDie) DieReleasePtr() *WasmtimeContainer {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *WasmtimeContainerDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *WasmtimeContainerDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *WasmtimeContainerDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WasmtimeContainerDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *WasmtimeContainerDie) DieStamp(fn func(r *WasmtimeContainer)) *WasmtimeContainerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *WasmtimeContainerDie) DieStampAt(jp string, fn interface{}) *WasmtimeContainerDie {
	return d.DieStamp(func(r *WasmtimeContainer) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *WasmtimeContainerDie) DieWith(fns ...func(d *WasmtimeContainerDie)) *WasmtimeContainerDie {
	nd := WasmtimeContainerBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *WasmtimeContainerDie) DeepCopy() *WasmtimeContainerDie {
	r := *d.r.DeepCopy()
	return &WasmtimeContainerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *WasmtimeContainerDie) DieSeal() *WasmtimeContainerDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *WasmtimeContainerDie) DieSealFeed(r WasmtimeContainer) *WasmtimeContainerDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *WasmtimeContainerDie) DieSealFeedPtr(r *WasmtimeContainer) *WasmtimeContainerDie {
	if r == nil {
		r = &WasmtimeContainer{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *WasmtimeContainerDie) DieSealRelease() WasmtimeContainer {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *WasmtimeContainerDie) DieSealReleasePtr() *WasmtimeContainer {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *WasmtimeContainerDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *WasmtimeContainerDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*WasmtimeContainerDie)(nil)

func (d *WasmtimeContainerDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *WasmtimeContainerDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *WasmtimeContainerDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *WasmtimeContainerDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &WasmtimeContainer{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *WasmtimeContainerDie) APIVersion(v string) *WasmtimeContainerDie {
	return d.DieStamp(func(r *WasmtimeContainer) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *WasmtimeContainerDie) Kind(v string) *WasmtimeContainerDie {
	return d.DieStamp(func(r *WasmtimeContainer) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *WasmtimeContainerDie) TypeMetadata(v apismetav1.TypeMeta) *WasmtimeContainerDie {
	return d.DieStamp(func(r *WasmtimeContainer) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *WasmtimeContainerDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *WasmtimeContainerDie {
	return d.DieStamp(func(r *WasmtimeContainer) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *WasmtimeContainerDie) Metadata(v apismetav1.ObjectMeta) *WasmtimeContainerDie {
	return d.DieStamp(func(r *WasmtimeContainer) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *WasmtimeContainerDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *WasmtimeContainerDie {
	return d.DieStamp(func(r *WasmtimeContainer) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *WasmtimeContainerDie) SpecDie(fn func(d *WasmtimeContainerSpecDie)) *WasmtimeContainerDie {
	return d.DieStamp(func(r *WasmtimeContainer) {
		d := WasmtimeContainerSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *WasmtimeContainerDie) StatusDie(fn func(d *WasmtimeContainerStatusDie)) *WasmtimeContainerDie {
	return d.DieStamp(func(r *WasmtimeContainer) {
		d := WasmtimeContainerStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *WasmtimeContainerDie) Spec(v WasmtimeContainerSpec) *WasmtimeContainerDie {
	return d.DieStamp(func(r *WasmtimeContainer) {
		r.Spec = v
	})
}

func (d *WasmtimeContainerDie) Status(v WasmtimeContainerStatus) *WasmtimeContainerDie {
	return d.DieStamp(func(r *WasmtimeContainer) {
		r.Status = v
	})
}

var WrpcTriggerSpecBlank = (&WrpcTriggerSpecDie{}).DieFeed(WrpcTriggerSpec{})

type WrpcTriggerSpecDie struct {
	mutable bool
	r       WrpcTriggerSpec
	seal    WrpcTriggerSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *WrpcTriggerSpecDie) DieImmutable(immutable bool) *WrpcTriggerSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *WrpcTriggerSpecDie) DieFeed(r WrpcTriggerSpec) *WrpcTriggerSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &WrpcTriggerSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *WrpcTriggerSpecDie) DieFeedPtr(r *WrpcTriggerSpec) *WrpcTriggerSpecDie {
	if r == nil {
		r = &WrpcTriggerSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *WrpcTriggerSpecDie) DieFeedJSON(j []byte) *WrpcTriggerSpecDie {
	r := WrpcTriggerSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *WrpcTriggerSpecDie) DieFeedYAML(y []byte) *WrpcTriggerSpecDie {
	r := WrpcTriggerSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *WrpcTriggerSpecDie) DieFeedYAMLFile(name string) *WrpcTriggerSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WrpcTriggerSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *WrpcTriggerSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *WrpcTriggerSpecDie) DieRelease() WrpcTriggerSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *WrpcTriggerSpecDie) DieReleasePtr() *WrpcTriggerSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *WrpcTriggerSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *WrpcTriggerSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WrpcTriggerSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *WrpcTriggerSpecDie) DieStamp(fn func(r *WrpcTriggerSpec)) *WrpcTriggerSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *WrpcTriggerSpecDie) DieStampAt(jp string, fn interface{}) *WrpcTriggerSpecDie {
	return d.DieStamp(func(r *WrpcTriggerSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *WrpcTriggerSpecDie) DieWith(fns ...func(d *WrpcTriggerSpecDie)) *WrpcTriggerSpecDie {
	nd := WrpcTriggerSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *WrpcTriggerSpecDie) DeepCopy() *WrpcTriggerSpecDie {
	r := *d.r.DeepCopy()
	return &WrpcTriggerSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *WrpcTriggerSpecDie) DieSeal() *WrpcTriggerSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *WrpcTriggerSpecDie) DieSealFeed(r WrpcTriggerSpec) *WrpcTriggerSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *WrpcTriggerSpecDie) DieSealFeedPtr(r *WrpcTriggerSpec) *WrpcTriggerSpecDie {
	if r == nil {
		r = &WrpcTriggerSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *WrpcTriggerSpecDie) DieSealRelease() WrpcTriggerSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *WrpcTriggerSpecDie) DieSealReleasePtr() *WrpcTriggerSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *WrpcTriggerSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *WrpcTriggerSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericContainerSpecDie mutates GenericContainerSpec as a die.
func (d *WrpcTriggerSpecDie) GenericContainerSpecDie(fn func(d *GenericContainerSpecDie)) *WrpcTriggerSpecDie {
	return d.DieStamp(func(r *WrpcTriggerSpec) {
		d := GenericContainerSpecBlank.DieImmutable(false).DieFeed(r.GenericContainerSpec)
		fn(d)
		r.GenericContainerSpec = d.DieRelease()
	})
}

func (d *WrpcTriggerSpecDie) GenericContainerSpec(v GenericContainerSpec) *WrpcTriggerSpecDie {
	return d.DieStamp(func(r *WrpcTriggerSpec) {
		r.GenericContainerSpec = v
	})
}

var WrpcTriggerStatusBlank = (&WrpcTriggerStatusDie{}).DieFeed(WrpcTriggerStatus{})

type WrpcTriggerStatusDie struct {
	mutable bool
	r       WrpcTriggerStatus
	seal    WrpcTriggerStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *WrpcTriggerStatusDie) DieImmutable(immutable bool) *WrpcTriggerStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *WrpcTriggerStatusDie) DieFeed(r WrpcTriggerStatus) *WrpcTriggerStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &WrpcTriggerStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *WrpcTriggerStatusDie) DieFeedPtr(r *WrpcTriggerStatus) *WrpcTriggerStatusDie {
	if r == nil {
		r = &WrpcTriggerStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *WrpcTriggerStatusDie) DieFeedJSON(j []byte) *WrpcTriggerStatusDie {
	r := WrpcTriggerStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *WrpcTriggerStatusDie) DieFeedYAML(y []byte) *WrpcTriggerStatusDie {
	r := WrpcTriggerStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *WrpcTriggerStatusDie) DieFeedYAMLFile(name string) *WrpcTriggerStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WrpcTriggerStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *WrpcTriggerStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *WrpcTriggerStatusDie) DieRelease() WrpcTriggerStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *WrpcTriggerStatusDie) DieReleasePtr() *WrpcTriggerStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *WrpcTriggerStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *WrpcTriggerStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WrpcTriggerStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *WrpcTriggerStatusDie) DieStamp(fn func(r *WrpcTriggerStatus)) *WrpcTriggerStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *WrpcTriggerStatusDie) DieStampAt(jp string, fn interface{}) *WrpcTriggerStatusDie {
	return d.DieStamp(func(r *WrpcTriggerStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *WrpcTriggerStatusDie) DieWith(fns ...func(d *WrpcTriggerStatusDie)) *WrpcTriggerStatusDie {
	nd := WrpcTriggerStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *WrpcTriggerStatusDie) DeepCopy() *WrpcTriggerStatusDie {
	r := *d.r.DeepCopy()
	return &WrpcTriggerStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *WrpcTriggerStatusDie) DieSeal() *WrpcTriggerStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *WrpcTriggerStatusDie) DieSealFeed(r WrpcTriggerStatus) *WrpcTriggerStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *WrpcTriggerStatusDie) DieSealFeedPtr(r *WrpcTriggerStatus) *WrpcTriggerStatusDie {
	if r == nil {
		r = &WrpcTriggerStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *WrpcTriggerStatusDie) DieSealRelease() WrpcTriggerStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *WrpcTriggerStatusDie) DieSealReleasePtr() *WrpcTriggerStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *WrpcTriggerStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *WrpcTriggerStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericContainerStatusDie mutates GenericContainerStatus as a die.
func (d *WrpcTriggerStatusDie) GenericContainerStatusDie(fn func(d *GenericContainerStatusDie)) *WrpcTriggerStatusDie {
	return d.DieStamp(func(r *WrpcTriggerStatus) {
		d := GenericContainerStatusBlank.DieImmutable(false).DieFeed(r.GenericContainerStatus)
		fn(d)
		r.GenericContainerStatus = d.DieRelease()
	})
}

func (d *WrpcTriggerStatusDie) Status(v apis.Status) *WrpcTriggerStatusDie {
	return d.DieStamp(func(r *WrpcTriggerStatus) {
		r.Status = v
	})
}

func (d *WrpcTriggerStatusDie) GenericContainerStatus(v GenericContainerStatus) *WrpcTriggerStatusDie {
	return d.DieStamp(func(r *WrpcTriggerStatus) {
		r.GenericContainerStatus = v
	})
}

func (d *WrpcTriggerStatusDie) URL(v string) *WrpcTriggerStatusDie {
	return d.DieStamp(func(r *WrpcTriggerStatus) {
		r.URL = v
	})
}

var WrpcTriggerBlank = (&WrpcTriggerDie{}).DieFeed(WrpcTrigger{})

type WrpcTriggerDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       WrpcTrigger
	seal    WrpcTrigger
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *WrpcTriggerDie) DieImmutable(immutable bool) *WrpcTriggerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *WrpcTriggerDie) DieFeed(r WrpcTrigger) *WrpcTriggerDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &WrpcTriggerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *WrpcTriggerDie) DieFeedPtr(r *WrpcTrigger) *WrpcTriggerDie {
	if r == nil {
		r = &WrpcTrigger{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *WrpcTriggerDie) DieFeedJSON(j []byte) *WrpcTriggerDie {
	r := WrpcTrigger{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *WrpcTriggerDie) DieFeedYAML(y []byte) *WrpcTriggerDie {
	r := WrpcTrigger{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *WrpcTriggerDie) DieFeedYAMLFile(name string) *WrpcTriggerDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WrpcTriggerDie) DieFeedRawExtension(raw runtime.RawExtension) *WrpcTriggerDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *WrpcTriggerDie) DieRelease() WrpcTrigger {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *WrpcTriggerDie) DieReleasePtr() *WrpcTrigger {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *WrpcTriggerDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *WrpcTriggerDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *WrpcTriggerDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WrpcTriggerDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *WrpcTriggerDie) DieStamp(fn func(r *WrpcTrigger)) *WrpcTriggerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *WrpcTriggerDie) DieStampAt(jp string, fn interface{}) *WrpcTriggerDie {
	return d.DieStamp(func(r *WrpcTrigger) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *WrpcTriggerDie) DieWith(fns ...func(d *WrpcTriggerDie)) *WrpcTriggerDie {
	nd := WrpcTriggerBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *WrpcTriggerDie) DeepCopy() *WrpcTriggerDie {
	r := *d.r.DeepCopy()
	return &WrpcTriggerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *WrpcTriggerDie) DieSeal() *WrpcTriggerDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *WrpcTriggerDie) DieSealFeed(r WrpcTrigger) *WrpcTriggerDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *WrpcTriggerDie) DieSealFeedPtr(r *WrpcTrigger) *WrpcTriggerDie {
	if r == nil {
		r = &WrpcTrigger{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *WrpcTriggerDie) DieSealRelease() WrpcTrigger {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *WrpcTriggerDie) DieSealReleasePtr() *WrpcTrigger {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *WrpcTriggerDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *WrpcTriggerDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*WrpcTriggerDie)(nil)

func (d *WrpcTriggerDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *WrpcTriggerDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *WrpcTriggerDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *WrpcTriggerDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &WrpcTrigger{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *WrpcTriggerDie) APIVersion(v string) *WrpcTriggerDie {
	return d.DieStamp(func(r *WrpcTrigger) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *WrpcTriggerDie) Kind(v string) *WrpcTriggerDie {
	return d.DieStamp(func(r *WrpcTrigger) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *WrpcTriggerDie) TypeMetadata(v apismetav1.TypeMeta) *WrpcTriggerDie {
	return d.DieStamp(func(r *WrpcTrigger) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *WrpcTriggerDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *WrpcTriggerDie {
	return d.DieStamp(func(r *WrpcTrigger) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *WrpcTriggerDie) Metadata(v apismetav1.ObjectMeta) *WrpcTriggerDie {
	return d.DieStamp(func(r *WrpcTrigger) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *WrpcTriggerDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *WrpcTriggerDie {
	return d.DieStamp(func(r *WrpcTrigger) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *WrpcTriggerDie) SpecDie(fn func(d *WrpcTriggerSpecDie)) *WrpcTriggerDie {
	return d.DieStamp(func(r *WrpcTrigger) {
		d := WrpcTriggerSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *WrpcTriggerDie) StatusDie(fn func(d *WrpcTriggerStatusDie)) *WrpcTriggerDie {
	return d.DieStamp(func(r *WrpcTrigger) {
		d := WrpcTriggerStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *WrpcTriggerDie) Spec(v WrpcTriggerSpec) *WrpcTriggerDie {
	return d.DieStamp(func(r *WrpcTrigger) {
		r.Spec = v
	})
}

func (d *WrpcTriggerDie) Status(v WrpcTriggerStatus) *WrpcTriggerDie {
	return d.DieStamp(func(r *WrpcTrigger) {
		r.Status = v
	})
}
