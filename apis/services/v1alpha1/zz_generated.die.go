//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2025 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1alpha1

import (
	fmtx "fmt"
	osx "os"
	reflectx "reflect"

	"github.com/google/go-cmp/cmp"
	apicorev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	json "k8s.io/apimachinery/pkg/util/json"
	jsonpath "k8s.io/client-go/util/jsonpath"
	corev1 "reconciler.io/dies/apis/core/v1"
	metav1 "reconciler.io/dies/apis/meta/v1"
	patch "reconciler.io/dies/patch"
	"reconciler.io/runtime/apis"
	yaml "sigs.k8s.io/yaml"

	componentsv1alpha1 "reconciler.io/wa8s/apis/components/v1alpha1"
	containersv1alpha1 "reconciler.io/wa8s/apis/containers/v1alpha1"
)

var ServiceBindingSpecBlank = (&ServiceBindingSpecDie{}).DieFeed(ServiceBindingSpec{})

type ServiceBindingSpecDie struct {
	mutable bool
	r       ServiceBindingSpec
	seal    ServiceBindingSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceBindingSpecDie) DieImmutable(immutable bool) *ServiceBindingSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceBindingSpecDie) DieFeed(r ServiceBindingSpec) *ServiceBindingSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceBindingSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingSpecDie) DieFeedPtr(r *ServiceBindingSpec) *ServiceBindingSpecDie {
	if r == nil {
		r = &ServiceBindingSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceBindingSpecDie) DieFeedDuck(v any) *ServiceBindingSpecDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceBindingSpecDie) DieFeedJSON(j []byte) *ServiceBindingSpecDie {
	r := ServiceBindingSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceBindingSpecDie) DieFeedYAML(y []byte) *ServiceBindingSpecDie {
	r := ServiceBindingSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceBindingSpecDie) DieFeedYAMLFile(name string) *ServiceBindingSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceBindingSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceBindingSpecDie) DieRelease() ServiceBindingSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceBindingSpecDie) DieReleasePtr() *ServiceBindingSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceBindingSpecDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceBindingSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceBindingSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceBindingSpecDie) DieStamp(fn func(r *ServiceBindingSpec)) *ServiceBindingSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceBindingSpecDie) DieStampAt(jp string, fn interface{}) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *ServiceBindingSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceBindingSpecDie) DieWith(fns ...func(d *ServiceBindingSpecDie)) *ServiceBindingSpecDie {
	nd := ServiceBindingSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceBindingSpecDie) DeepCopy() *ServiceBindingSpecDie {
	r := *d.r.DeepCopy()
	return &ServiceBindingSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceBindingSpecDie) DieSeal() *ServiceBindingSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceBindingSpecDie) DieSealFeed(r ServiceBindingSpec) *ServiceBindingSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingSpecDie) DieSealFeedPtr(r *ServiceBindingSpec) *ServiceBindingSpecDie {
	if r == nil {
		r = &ServiceBindingSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceBindingSpecDie) DieSealRelease() ServiceBindingSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceBindingSpecDie) DieSealReleasePtr() *ServiceBindingSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceBindingSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceBindingSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// RefDie mutates Ref as a die.
func (d *ServiceBindingSpecDie) RefDie(fn func(d *ServiceInstanceReferenceDie)) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *ServiceBindingSpec) {
		d := ServiceInstanceReferenceBlank.DieImmutable(false).DieFeed(r.Ref)
		fn(d)
		r.Ref = d.DieRelease()
	})
}

func (d *ServiceBindingSpecDie) Ref(v ServiceInstanceReference) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *ServiceBindingSpec) {
		r.Ref = v
	})
}

func (d *ServiceBindingSpecDie) Scopes(v ...string) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *ServiceBindingSpec) {
		r.Scopes = v
	})
}

func (d *ServiceBindingSpecDie) Duration(v v1.Duration) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *ServiceBindingSpec) {
		r.Duration = v
	})
}

var ServiceBindingStatusBlank = (&ServiceBindingStatusDie{}).DieFeed(ServiceBindingStatus{})

type ServiceBindingStatusDie struct {
	mutable bool
	r       ServiceBindingStatus
	seal    ServiceBindingStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceBindingStatusDie) DieImmutable(immutable bool) *ServiceBindingStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceBindingStatusDie) DieFeed(r ServiceBindingStatus) *ServiceBindingStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceBindingStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingStatusDie) DieFeedPtr(r *ServiceBindingStatus) *ServiceBindingStatusDie {
	if r == nil {
		r = &ServiceBindingStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceBindingStatusDie) DieFeedDuck(v any) *ServiceBindingStatusDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceBindingStatusDie) DieFeedJSON(j []byte) *ServiceBindingStatusDie {
	r := ServiceBindingStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceBindingStatusDie) DieFeedYAML(y []byte) *ServiceBindingStatusDie {
	r := ServiceBindingStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceBindingStatusDie) DieFeedYAMLFile(name string) *ServiceBindingStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceBindingStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceBindingStatusDie) DieRelease() ServiceBindingStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceBindingStatusDie) DieReleasePtr() *ServiceBindingStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceBindingStatusDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceBindingStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceBindingStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceBindingStatusDie) DieStamp(fn func(r *ServiceBindingStatus)) *ServiceBindingStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceBindingStatusDie) DieStampAt(jp string, fn interface{}) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *ServiceBindingStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceBindingStatusDie) DieWith(fns ...func(d *ServiceBindingStatusDie)) *ServiceBindingStatusDie {
	nd := ServiceBindingStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceBindingStatusDie) DeepCopy() *ServiceBindingStatusDie {
	r := *d.r.DeepCopy()
	return &ServiceBindingStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceBindingStatusDie) DieSeal() *ServiceBindingStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceBindingStatusDie) DieSealFeed(r ServiceBindingStatus) *ServiceBindingStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingStatusDie) DieSealFeedPtr(r *ServiceBindingStatus) *ServiceBindingStatusDie {
	if r == nil {
		r = &ServiceBindingStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceBindingStatusDie) DieSealRelease() ServiceBindingStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceBindingStatusDie) DieSealReleasePtr() *ServiceBindingStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceBindingStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceBindingStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentStatusDie mutates GenericComponentStatus as a die.
func (d *ServiceBindingStatusDie) GenericComponentStatusDie(fn func(d *componentsv1alpha1.GenericComponentStatusDie)) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *ServiceBindingStatus) {
		d := componentsv1alpha1.GenericComponentStatusBlank.DieImmutable(false).DieFeed(r.GenericComponentStatus)
		fn(d)
		r.GenericComponentStatus = d.DieRelease()
	})
}

// BindingDie mutates Binding as a die.
func (d *ServiceBindingStatusDie) BindingDie(fn func(d *corev1.LocalObjectReferenceDie)) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *ServiceBindingStatus) {
		d := corev1.LocalObjectReferenceBlank.DieImmutable(false).DieFeed(r.Binding)
		fn(d)
		r.Binding = d.DieRelease()
	})
}

func (d *ServiceBindingStatusDie) Status(v apis.Status) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *ServiceBindingStatus) {
		r.Status = v
	})
}

func (d *ServiceBindingStatusDie) GenericComponentStatus(v componentsv1alpha1.GenericComponentStatus) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *ServiceBindingStatus) {
		r.GenericComponentStatus = v
	})
}

func (d *ServiceBindingStatusDie) ServiceBindingId(v string) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *ServiceBindingStatus) {
		r.ServiceBindingId = v
	})
}

func (d *ServiceBindingStatusDie) Binding(v apicorev1.LocalObjectReference) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *ServiceBindingStatus) {
		r.Binding = v
	})
}

func (d *ServiceBindingStatusDie) ExpiresAfter(v v1.Time) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *ServiceBindingStatus) {
		r.ExpiresAfter = v
	})
}

func (d *ServiceBindingStatusDie) Expired(v bool) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *ServiceBindingStatus) {
		r.Expired = v
	})
}

var ServiceBindingBlank = (&ServiceBindingDie{}).DieFeed(ServiceBinding{})

type ServiceBindingDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       ServiceBinding
	seal    ServiceBinding
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceBindingDie) DieImmutable(immutable bool) *ServiceBindingDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceBindingDie) DieFeed(r ServiceBinding) *ServiceBindingDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceBindingDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingDie) DieFeedPtr(r *ServiceBinding) *ServiceBindingDie {
	if r == nil {
		r = &ServiceBinding{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceBindingDie) DieFeedDuck(v any) *ServiceBindingDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceBindingDie) DieFeedJSON(j []byte) *ServiceBindingDie {
	r := ServiceBinding{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceBindingDie) DieFeedYAML(y []byte) *ServiceBindingDie {
	r := ServiceBinding{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceBindingDie) DieFeedYAMLFile(name string) *ServiceBindingDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceBindingDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceBindingDie) DieRelease() ServiceBinding {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceBindingDie) DieReleasePtr() *ServiceBinding {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ServiceBindingDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceBindingDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceBindingDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceBindingDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceBindingDie) DieStamp(fn func(r *ServiceBinding)) *ServiceBindingDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceBindingDie) DieStampAt(jp string, fn interface{}) *ServiceBindingDie {
	return d.DieStamp(func(r *ServiceBinding) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceBindingDie) DieWith(fns ...func(d *ServiceBindingDie)) *ServiceBindingDie {
	nd := ServiceBindingBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceBindingDie) DeepCopy() *ServiceBindingDie {
	r := *d.r.DeepCopy()
	return &ServiceBindingDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceBindingDie) DieSeal() *ServiceBindingDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceBindingDie) DieSealFeed(r ServiceBinding) *ServiceBindingDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingDie) DieSealFeedPtr(r *ServiceBinding) *ServiceBindingDie {
	if r == nil {
		r = &ServiceBinding{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceBindingDie) DieSealRelease() ServiceBinding {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceBindingDie) DieSealReleasePtr() *ServiceBinding {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceBindingDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceBindingDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ServiceBindingDie)(nil)

func (d *ServiceBindingDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ServiceBindingDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceBindingDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceBindingDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ServiceBinding{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ServiceBindingDie) APIVersion(v string) *ServiceBindingDie {
	return d.DieStamp(func(r *ServiceBinding) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceBindingDie) Kind(v string) *ServiceBindingDie {
	return d.DieStamp(func(r *ServiceBinding) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ServiceBindingDie) TypeMetadata(v v1.TypeMeta) *ServiceBindingDie {
	return d.DieStamp(func(r *ServiceBinding) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ServiceBindingDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *ServiceBindingDie {
	return d.DieStamp(func(r *ServiceBinding) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ServiceBindingDie) Metadata(v v1.ObjectMeta) *ServiceBindingDie {
	return d.DieStamp(func(r *ServiceBinding) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ServiceBindingDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceBindingDie {
	return d.DieStamp(func(r *ServiceBinding) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ServiceBindingDie) SpecDie(fn func(d *ServiceBindingSpecDie)) *ServiceBindingDie {
	return d.DieStamp(func(r *ServiceBinding) {
		d := ServiceBindingSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ServiceBindingDie) StatusDie(fn func(d *ServiceBindingStatusDie)) *ServiceBindingDie {
	return d.DieStamp(func(r *ServiceBinding) {
		d := ServiceBindingStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ServiceBindingDie) Spec(v ServiceBindingSpec) *ServiceBindingDie {
	return d.DieStamp(func(r *ServiceBinding) {
		r.Spec = v
	})
}

func (d *ServiceBindingDie) Status(v ServiceBindingStatus) *ServiceBindingDie {
	return d.DieStamp(func(r *ServiceBinding) {
		r.Status = v
	})
}

var ServiceClientSpecBlank = (&ServiceClientSpecDie{}).DieFeed(ServiceClientSpec{})

type ServiceClientSpecDie struct {
	mutable bool
	r       ServiceClientSpec
	seal    ServiceClientSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceClientSpecDie) DieImmutable(immutable bool) *ServiceClientSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceClientSpecDie) DieFeed(r ServiceClientSpec) *ServiceClientSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceClientSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceClientSpecDie) DieFeedPtr(r *ServiceClientSpec) *ServiceClientSpecDie {
	if r == nil {
		r = &ServiceClientSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceClientSpecDie) DieFeedDuck(v any) *ServiceClientSpecDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceClientSpecDie) DieFeedJSON(j []byte) *ServiceClientSpecDie {
	r := ServiceClientSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceClientSpecDie) DieFeedYAML(y []byte) *ServiceClientSpecDie {
	r := ServiceClientSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceClientSpecDie) DieFeedYAMLFile(name string) *ServiceClientSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceClientSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceClientSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceClientSpecDie) DieRelease() ServiceClientSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceClientSpecDie) DieReleasePtr() *ServiceClientSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceClientSpecDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceClientSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceClientSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceClientSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceClientSpecDie) DieStamp(fn func(r *ServiceClientSpec)) *ServiceClientSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceClientSpecDie) DieStampAt(jp string, fn interface{}) *ServiceClientSpecDie {
	return d.DieStamp(func(r *ServiceClientSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceClientSpecDie) DieWith(fns ...func(d *ServiceClientSpecDie)) *ServiceClientSpecDie {
	nd := ServiceClientSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceClientSpecDie) DeepCopy() *ServiceClientSpecDie {
	r := *d.r.DeepCopy()
	return &ServiceClientSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceClientSpecDie) DieSeal() *ServiceClientSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceClientSpecDie) DieSealFeed(r ServiceClientSpec) *ServiceClientSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceClientSpecDie) DieSealFeedPtr(r *ServiceClientSpec) *ServiceClientSpecDie {
	if r == nil {
		r = &ServiceClientSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceClientSpecDie) DieSealRelease() ServiceClientSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceClientSpecDie) DieSealReleasePtr() *ServiceClientSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceClientSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceClientSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// RefDie mutates Ref as a die.
func (d *ServiceClientSpecDie) RefDie(fn func(d *ServiceInstanceReferenceDie)) *ServiceClientSpecDie {
	return d.DieStamp(func(r *ServiceClientSpec) {
		d := ServiceInstanceReferenceBlank.DieImmutable(false).DieFeed(r.Ref)
		fn(d)
		r.Ref = d.DieRelease()
	})
}

func (d *ServiceClientSpecDie) Ref(v ServiceInstanceReference) *ServiceClientSpecDie {
	return d.DieStamp(func(r *ServiceClientSpec) {
		r.Ref = v
	})
}

func (d *ServiceClientSpecDie) Scopes(v ...string) *ServiceClientSpecDie {
	return d.DieStamp(func(r *ServiceClientSpec) {
		r.Scopes = v
	})
}

func (d *ServiceClientSpecDie) Duration(v v1.Duration) *ServiceClientSpecDie {
	return d.DieStamp(func(r *ServiceClientSpec) {
		r.Duration = v
	})
}

func (d *ServiceClientSpecDie) RenewBefore(v v1.Duration) *ServiceClientSpecDie {
	return d.DieStamp(func(r *ServiceClientSpec) {
		r.RenewBefore = v
	})
}

func (d *ServiceClientSpecDie) RenewBeforePercentage(v int32) *ServiceClientSpecDie {
	return d.DieStamp(func(r *ServiceClientSpec) {
		r.RenewBeforePercentage = v
	})
}

var ServiceClientStatusBlank = (&ServiceClientStatusDie{}).DieFeed(ServiceClientStatus{})

type ServiceClientStatusDie struct {
	mutable bool
	r       ServiceClientStatus
	seal    ServiceClientStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceClientStatusDie) DieImmutable(immutable bool) *ServiceClientStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceClientStatusDie) DieFeed(r ServiceClientStatus) *ServiceClientStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceClientStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceClientStatusDie) DieFeedPtr(r *ServiceClientStatus) *ServiceClientStatusDie {
	if r == nil {
		r = &ServiceClientStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceClientStatusDie) DieFeedDuck(v any) *ServiceClientStatusDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceClientStatusDie) DieFeedJSON(j []byte) *ServiceClientStatusDie {
	r := ServiceClientStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceClientStatusDie) DieFeedYAML(y []byte) *ServiceClientStatusDie {
	r := ServiceClientStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceClientStatusDie) DieFeedYAMLFile(name string) *ServiceClientStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceClientStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceClientStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceClientStatusDie) DieRelease() ServiceClientStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceClientStatusDie) DieReleasePtr() *ServiceClientStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceClientStatusDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceClientStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceClientStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceClientStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceClientStatusDie) DieStamp(fn func(r *ServiceClientStatus)) *ServiceClientStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceClientStatusDie) DieStampAt(jp string, fn interface{}) *ServiceClientStatusDie {
	return d.DieStamp(func(r *ServiceClientStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceClientStatusDie) DieWith(fns ...func(d *ServiceClientStatusDie)) *ServiceClientStatusDie {
	nd := ServiceClientStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceClientStatusDie) DeepCopy() *ServiceClientStatusDie {
	r := *d.r.DeepCopy()
	return &ServiceClientStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceClientStatusDie) DieSeal() *ServiceClientStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceClientStatusDie) DieSealFeed(r ServiceClientStatus) *ServiceClientStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceClientStatusDie) DieSealFeedPtr(r *ServiceClientStatus) *ServiceClientStatusDie {
	if r == nil {
		r = &ServiceClientStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceClientStatusDie) DieSealRelease() ServiceClientStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceClientStatusDie) DieSealReleasePtr() *ServiceClientStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceClientStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceClientStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentStatusDie mutates GenericComponentStatus as a die.
func (d *ServiceClientStatusDie) GenericComponentStatusDie(fn func(d *componentsv1alpha1.GenericComponentStatusDie)) *ServiceClientStatusDie {
	return d.DieStamp(func(r *ServiceClientStatus) {
		d := componentsv1alpha1.GenericComponentStatusBlank.DieImmutable(false).DieFeed(r.GenericComponentStatus)
		fn(d)
		r.GenericComponentStatus = d.DieRelease()
	})
}

// BindingDie mutates Binding as a die.
func (d *ServiceClientStatusDie) BindingDie(fn func(d *corev1.LocalObjectReferenceDie)) *ServiceClientStatusDie {
	return d.DieStamp(func(r *ServiceClientStatus) {
		d := corev1.LocalObjectReferenceBlank.DieImmutable(false).DieFeed(r.Binding)
		fn(d)
		r.Binding = d.DieRelease()
	})
}

func (d *ServiceClientStatusDie) Status(v apis.Status) *ServiceClientStatusDie {
	return d.DieStamp(func(r *ServiceClientStatus) {
		r.Status = v
	})
}

func (d *ServiceClientStatusDie) GenericComponentStatus(v componentsv1alpha1.GenericComponentStatus) *ServiceClientStatusDie {
	return d.DieStamp(func(r *ServiceClientStatus) {
		r.GenericComponentStatus = v
	})
}

func (d *ServiceClientStatusDie) ServiceBindingId(v string) *ServiceClientStatusDie {
	return d.DieStamp(func(r *ServiceClientStatus) {
		r.ServiceBindingId = v
	})
}

func (d *ServiceClientStatusDie) Binding(v apicorev1.LocalObjectReference) *ServiceClientStatusDie {
	return d.DieStamp(func(r *ServiceClientStatus) {
		r.Binding = v
	})
}

func (d *ServiceClientStatusDie) RenewsAfter(v v1.Time) *ServiceClientStatusDie {
	return d.DieStamp(func(r *ServiceClientStatus) {
		r.RenewsAfter = v
	})
}

func (d *ServiceClientStatusDie) ExpiresAfter(v v1.Time) *ServiceClientStatusDie {
	return d.DieStamp(func(r *ServiceClientStatus) {
		r.ExpiresAfter = v
	})
}

var ServiceClientBlank = (&ServiceClientDie{}).DieFeed(ServiceClient{})

type ServiceClientDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       ServiceClient
	seal    ServiceClient
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceClientDie) DieImmutable(immutable bool) *ServiceClientDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceClientDie) DieFeed(r ServiceClient) *ServiceClientDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceClientDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceClientDie) DieFeedPtr(r *ServiceClient) *ServiceClientDie {
	if r == nil {
		r = &ServiceClient{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceClientDie) DieFeedDuck(v any) *ServiceClientDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceClientDie) DieFeedJSON(j []byte) *ServiceClientDie {
	r := ServiceClient{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceClientDie) DieFeedYAML(y []byte) *ServiceClientDie {
	r := ServiceClient{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceClientDie) DieFeedYAMLFile(name string) *ServiceClientDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceClientDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceClientDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceClientDie) DieRelease() ServiceClient {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceClientDie) DieReleasePtr() *ServiceClient {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ServiceClientDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceClientDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceClientDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceClientDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceClientDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceClientDie) DieStamp(fn func(r *ServiceClient)) *ServiceClientDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceClientDie) DieStampAt(jp string, fn interface{}) *ServiceClientDie {
	return d.DieStamp(func(r *ServiceClient) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceClientDie) DieWith(fns ...func(d *ServiceClientDie)) *ServiceClientDie {
	nd := ServiceClientBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceClientDie) DeepCopy() *ServiceClientDie {
	r := *d.r.DeepCopy()
	return &ServiceClientDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceClientDie) DieSeal() *ServiceClientDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceClientDie) DieSealFeed(r ServiceClient) *ServiceClientDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceClientDie) DieSealFeedPtr(r *ServiceClient) *ServiceClientDie {
	if r == nil {
		r = &ServiceClient{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceClientDie) DieSealRelease() ServiceClient {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceClientDie) DieSealReleasePtr() *ServiceClient {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceClientDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceClientDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ServiceClientDie)(nil)

func (d *ServiceClientDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ServiceClientDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceClientDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceClientDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ServiceClient{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ServiceClientDie) APIVersion(v string) *ServiceClientDie {
	return d.DieStamp(func(r *ServiceClient) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceClientDie) Kind(v string) *ServiceClientDie {
	return d.DieStamp(func(r *ServiceClient) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ServiceClientDie) TypeMetadata(v v1.TypeMeta) *ServiceClientDie {
	return d.DieStamp(func(r *ServiceClient) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ServiceClientDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *ServiceClientDie {
	return d.DieStamp(func(r *ServiceClient) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ServiceClientDie) Metadata(v v1.ObjectMeta) *ServiceClientDie {
	return d.DieStamp(func(r *ServiceClient) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ServiceClientDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceClientDie {
	return d.DieStamp(func(r *ServiceClient) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ServiceClientDie) SpecDie(fn func(d *ServiceClientSpecDie)) *ServiceClientDie {
	return d.DieStamp(func(r *ServiceClient) {
		d := ServiceClientSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ServiceClientDie) StatusDie(fn func(d *ServiceClientStatusDie)) *ServiceClientDie {
	return d.DieStamp(func(r *ServiceClient) {
		d := ServiceClientStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ServiceClientDie) Spec(v ServiceClientSpec) *ServiceClientDie {
	return d.DieStamp(func(r *ServiceClient) {
		r.Spec = v
	})
}

func (d *ServiceClientDie) Status(v ServiceClientStatus) *ServiceClientDie {
	return d.DieStamp(func(r *ServiceClient) {
		r.Status = v
	})
}

var ServiceClientDuckStatusBlank = (&ServiceClientDuckStatusDie{}).DieFeed(ServiceClientDuckStatus{})

type ServiceClientDuckStatusDie struct {
	mutable bool
	r       ServiceClientDuckStatus
	seal    ServiceClientDuckStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceClientDuckStatusDie) DieImmutable(immutable bool) *ServiceClientDuckStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceClientDuckStatusDie) DieFeed(r ServiceClientDuckStatus) *ServiceClientDuckStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceClientDuckStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceClientDuckStatusDie) DieFeedPtr(r *ServiceClientDuckStatus) *ServiceClientDuckStatusDie {
	if r == nil {
		r = &ServiceClientDuckStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceClientDuckStatusDie) DieFeedDuck(v any) *ServiceClientDuckStatusDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceClientDuckStatusDie) DieFeedJSON(j []byte) *ServiceClientDuckStatusDie {
	r := ServiceClientDuckStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceClientDuckStatusDie) DieFeedYAML(y []byte) *ServiceClientDuckStatusDie {
	r := ServiceClientDuckStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceClientDuckStatusDie) DieFeedYAMLFile(name string) *ServiceClientDuckStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceClientDuckStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceClientDuckStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceClientDuckStatusDie) DieRelease() ServiceClientDuckStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceClientDuckStatusDie) DieReleasePtr() *ServiceClientDuckStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceClientDuckStatusDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceClientDuckStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceClientDuckStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceClientDuckStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceClientDuckStatusDie) DieStamp(fn func(r *ServiceClientDuckStatus)) *ServiceClientDuckStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceClientDuckStatusDie) DieStampAt(jp string, fn interface{}) *ServiceClientDuckStatusDie {
	return d.DieStamp(func(r *ServiceClientDuckStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceClientDuckStatusDie) DieWith(fns ...func(d *ServiceClientDuckStatusDie)) *ServiceClientDuckStatusDie {
	nd := ServiceClientDuckStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceClientDuckStatusDie) DeepCopy() *ServiceClientDuckStatusDie {
	r := *d.r.DeepCopy()
	return &ServiceClientDuckStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceClientDuckStatusDie) DieSeal() *ServiceClientDuckStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceClientDuckStatusDie) DieSealFeed(r ServiceClientDuckStatus) *ServiceClientDuckStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceClientDuckStatusDie) DieSealFeedPtr(r *ServiceClientDuckStatus) *ServiceClientDuckStatusDie {
	if r == nil {
		r = &ServiceClientDuckStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceClientDuckStatusDie) DieSealRelease() ServiceClientDuckStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceClientDuckStatusDie) DieSealReleasePtr() *ServiceClientDuckStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceClientDuckStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceClientDuckStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentStatusDie mutates GenericComponentStatus as a die.
func (d *ServiceClientDuckStatusDie) GenericComponentStatusDie(fn func(d *componentsv1alpha1.GenericComponentStatusDie)) *ServiceClientDuckStatusDie {
	return d.DieStamp(func(r *ServiceClientDuckStatus) {
		d := componentsv1alpha1.GenericComponentStatusBlank.DieImmutable(false).DieFeed(r.GenericComponentStatus)
		fn(d)
		r.GenericComponentStatus = d.DieRelease()
	})
}

// BindingDie mutates Binding as a die.
func (d *ServiceClientDuckStatusDie) BindingDie(fn func(d *corev1.LocalObjectReferenceDie)) *ServiceClientDuckStatusDie {
	return d.DieStamp(func(r *ServiceClientDuckStatus) {
		d := corev1.LocalObjectReferenceBlank.DieImmutable(false).DieFeed(r.Binding)
		fn(d)
		r.Binding = d.DieRelease()
	})
}

func (d *ServiceClientDuckStatusDie) Status(v apis.Status) *ServiceClientDuckStatusDie {
	return d.DieStamp(func(r *ServiceClientDuckStatus) {
		r.Status = v
	})
}

func (d *ServiceClientDuckStatusDie) GenericComponentStatus(v componentsv1alpha1.GenericComponentStatus) *ServiceClientDuckStatusDie {
	return d.DieStamp(func(r *ServiceClientDuckStatus) {
		r.GenericComponentStatus = v
	})
}

func (d *ServiceClientDuckStatusDie) ServiceBindingId(v string) *ServiceClientDuckStatusDie {
	return d.DieStamp(func(r *ServiceClientDuckStatus) {
		r.ServiceBindingId = v
	})
}

func (d *ServiceClientDuckStatusDie) Binding(v apicorev1.LocalObjectReference) *ServiceClientDuckStatusDie {
	return d.DieStamp(func(r *ServiceClientDuckStatus) {
		r.Binding = v
	})
}

func (d *ServiceClientDuckStatusDie) RenewsAfter(v v1.Time) *ServiceClientDuckStatusDie {
	return d.DieStamp(func(r *ServiceClientDuckStatus) {
		r.RenewsAfter = v
	})
}

func (d *ServiceClientDuckStatusDie) ExpiresAfter(v v1.Time) *ServiceClientDuckStatusDie {
	return d.DieStamp(func(r *ServiceClientDuckStatus) {
		r.ExpiresAfter = v
	})
}

var ServiceClientDuckBlank = (&ServiceClientDuckDie{}).DieFeed(ServiceClientDuck{})

type ServiceClientDuckDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       ServiceClientDuck
	seal    ServiceClientDuck
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceClientDuckDie) DieImmutable(immutable bool) *ServiceClientDuckDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceClientDuckDie) DieFeed(r ServiceClientDuck) *ServiceClientDuckDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceClientDuckDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceClientDuckDie) DieFeedPtr(r *ServiceClientDuck) *ServiceClientDuckDie {
	if r == nil {
		r = &ServiceClientDuck{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceClientDuckDie) DieFeedDuck(v any) *ServiceClientDuckDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceClientDuckDie) DieFeedJSON(j []byte) *ServiceClientDuckDie {
	r := ServiceClientDuck{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceClientDuckDie) DieFeedYAML(y []byte) *ServiceClientDuckDie {
	r := ServiceClientDuck{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceClientDuckDie) DieFeedYAMLFile(name string) *ServiceClientDuckDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceClientDuckDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceClientDuckDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceClientDuckDie) DieRelease() ServiceClientDuck {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceClientDuckDie) DieReleasePtr() *ServiceClientDuck {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ServiceClientDuckDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceClientDuckDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceClientDuckDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceClientDuckDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceClientDuckDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceClientDuckDie) DieStamp(fn func(r *ServiceClientDuck)) *ServiceClientDuckDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceClientDuckDie) DieStampAt(jp string, fn interface{}) *ServiceClientDuckDie {
	return d.DieStamp(func(r *ServiceClientDuck) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceClientDuckDie) DieWith(fns ...func(d *ServiceClientDuckDie)) *ServiceClientDuckDie {
	nd := ServiceClientDuckBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceClientDuckDie) DeepCopy() *ServiceClientDuckDie {
	r := *d.r.DeepCopy()
	return &ServiceClientDuckDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceClientDuckDie) DieSeal() *ServiceClientDuckDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceClientDuckDie) DieSealFeed(r ServiceClientDuck) *ServiceClientDuckDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceClientDuckDie) DieSealFeedPtr(r *ServiceClientDuck) *ServiceClientDuckDie {
	if r == nil {
		r = &ServiceClientDuck{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceClientDuckDie) DieSealRelease() ServiceClientDuck {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceClientDuckDie) DieSealReleasePtr() *ServiceClientDuck {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceClientDuckDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceClientDuckDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ServiceClientDuckDie)(nil)

func (d *ServiceClientDuckDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ServiceClientDuckDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceClientDuckDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceClientDuckDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ServiceClientDuck{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ServiceClientDuckDie) APIVersion(v string) *ServiceClientDuckDie {
	return d.DieStamp(func(r *ServiceClientDuck) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceClientDuckDie) Kind(v string) *ServiceClientDuckDie {
	return d.DieStamp(func(r *ServiceClientDuck) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ServiceClientDuckDie) TypeMetadata(v v1.TypeMeta) *ServiceClientDuckDie {
	return d.DieStamp(func(r *ServiceClientDuck) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ServiceClientDuckDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *ServiceClientDuckDie {
	return d.DieStamp(func(r *ServiceClientDuck) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ServiceClientDuckDie) Metadata(v v1.ObjectMeta) *ServiceClientDuckDie {
	return d.DieStamp(func(r *ServiceClientDuck) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ServiceClientDuckDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceClientDuckDie {
	return d.DieStamp(func(r *ServiceClientDuck) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *ServiceClientDuckDie) Spec(v ServiceClientSpec) *ServiceClientDuckDie {
	return d.DieStamp(func(r *ServiceClientDuck) {
		r.Spec = v
	})
}

func (d *ServiceClientDuckDie) Status(v ServiceClientDuckStatus) *ServiceClientDuckDie {
	return d.DieStamp(func(r *ServiceClientDuck) {
		r.Status = v
	})
}

var ServiceInstanceReferenceBlank = (&ServiceInstanceReferenceDie{}).DieFeed(ServiceInstanceReference{})

type ServiceInstanceReferenceDie struct {
	mutable bool
	r       ServiceInstanceReference
	seal    ServiceInstanceReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceInstanceReferenceDie) DieImmutable(immutable bool) *ServiceInstanceReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceInstanceReferenceDie) DieFeed(r ServiceInstanceReference) *ServiceInstanceReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceInstanceReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceReferenceDie) DieFeedPtr(r *ServiceInstanceReference) *ServiceInstanceReferenceDie {
	if r == nil {
		r = &ServiceInstanceReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceInstanceReferenceDie) DieFeedDuck(v any) *ServiceInstanceReferenceDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceInstanceReferenceDie) DieFeedJSON(j []byte) *ServiceInstanceReferenceDie {
	r := ServiceInstanceReference{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceInstanceReferenceDie) DieFeedYAML(y []byte) *ServiceInstanceReferenceDie {
	r := ServiceInstanceReference{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceInstanceReferenceDie) DieFeedYAMLFile(name string) *ServiceInstanceReferenceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceInstanceReferenceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceInstanceReferenceDie) DieRelease() ServiceInstanceReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceInstanceReferenceDie) DieReleasePtr() *ServiceInstanceReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceInstanceReferenceDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceInstanceReferenceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceInstanceReferenceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceInstanceReferenceDie) DieStamp(fn func(r *ServiceInstanceReference)) *ServiceInstanceReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceInstanceReferenceDie) DieStampAt(jp string, fn interface{}) *ServiceInstanceReferenceDie {
	return d.DieStamp(func(r *ServiceInstanceReference) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceInstanceReferenceDie) DieWith(fns ...func(d *ServiceInstanceReferenceDie)) *ServiceInstanceReferenceDie {
	nd := ServiceInstanceReferenceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceInstanceReferenceDie) DeepCopy() *ServiceInstanceReferenceDie {
	r := *d.r.DeepCopy()
	return &ServiceInstanceReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceInstanceReferenceDie) DieSeal() *ServiceInstanceReferenceDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceInstanceReferenceDie) DieSealFeed(r ServiceInstanceReference) *ServiceInstanceReferenceDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceReferenceDie) DieSealFeedPtr(r *ServiceInstanceReference) *ServiceInstanceReferenceDie {
	if r == nil {
		r = &ServiceInstanceReference{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceInstanceReferenceDie) DieSealRelease() ServiceInstanceReference {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceInstanceReferenceDie) DieSealReleasePtr() *ServiceInstanceReference {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceInstanceReferenceDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceInstanceReferenceDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *ServiceInstanceReferenceDie) Name(v string) *ServiceInstanceReferenceDie {
	return d.DieStamp(func(r *ServiceInstanceReference) {
		r.Name = v
	})
}

var ServiceInstanceSpecBlank = (&ServiceInstanceSpecDie{}).DieFeed(ServiceInstanceSpec{})

type ServiceInstanceSpecDie struct {
	mutable bool
	r       ServiceInstanceSpec
	seal    ServiceInstanceSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceInstanceSpecDie) DieImmutable(immutable bool) *ServiceInstanceSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceInstanceSpecDie) DieFeed(r ServiceInstanceSpec) *ServiceInstanceSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceInstanceSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceSpecDie) DieFeedPtr(r *ServiceInstanceSpec) *ServiceInstanceSpecDie {
	if r == nil {
		r = &ServiceInstanceSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceInstanceSpecDie) DieFeedDuck(v any) *ServiceInstanceSpecDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceInstanceSpecDie) DieFeedJSON(j []byte) *ServiceInstanceSpecDie {
	r := ServiceInstanceSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceInstanceSpecDie) DieFeedYAML(y []byte) *ServiceInstanceSpecDie {
	r := ServiceInstanceSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceInstanceSpecDie) DieFeedYAMLFile(name string) *ServiceInstanceSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceInstanceSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceInstanceSpecDie) DieRelease() ServiceInstanceSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceInstanceSpecDie) DieReleasePtr() *ServiceInstanceSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceInstanceSpecDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceInstanceSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceInstanceSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceInstanceSpecDie) DieStamp(fn func(r *ServiceInstanceSpec)) *ServiceInstanceSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceInstanceSpecDie) DieStampAt(jp string, fn interface{}) *ServiceInstanceSpecDie {
	return d.DieStamp(func(r *ServiceInstanceSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceInstanceSpecDie) DieWith(fns ...func(d *ServiceInstanceSpecDie)) *ServiceInstanceSpecDie {
	nd := ServiceInstanceSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceInstanceSpecDie) DeepCopy() *ServiceInstanceSpecDie {
	r := *d.r.DeepCopy()
	return &ServiceInstanceSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceInstanceSpecDie) DieSeal() *ServiceInstanceSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceInstanceSpecDie) DieSealFeed(r ServiceInstanceSpec) *ServiceInstanceSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceSpecDie) DieSealFeedPtr(r *ServiceInstanceSpec) *ServiceInstanceSpecDie {
	if r == nil {
		r = &ServiceInstanceSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceInstanceSpecDie) DieSealRelease() ServiceInstanceSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceInstanceSpecDie) DieSealReleasePtr() *ServiceInstanceSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceInstanceSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceInstanceSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// RefDie mutates Ref as a die.
func (d *ServiceInstanceSpecDie) RefDie(fn func(d *ServiceLifecycleReferenceDie)) *ServiceInstanceSpecDie {
	return d.DieStamp(func(r *ServiceInstanceSpec) {
		d := ServiceLifecycleReferenceBlank.DieImmutable(false).DieFeed(r.Ref)
		fn(d)
		r.Ref = d.DieRelease()
	})
}

// RequestDie mutates a single item in Requests matched by the nested field Key, appending a new item if no match is found.
func (d *ServiceInstanceSpecDie) RequestDie(v string, fn func(d *ServiceInstanceRequestDie)) *ServiceInstanceSpecDie {
	return d.DieStamp(func(r *ServiceInstanceSpec) {
		for i := range r.Requests {
			if v == r.Requests[i].Key {
				d := ServiceInstanceRequestBlank.DieImmutable(false).DieFeed(r.Requests[i])
				fn(d)
				r.Requests[i] = d.DieRelease()
				return
			}
		}

		d := ServiceInstanceRequestBlank.DieImmutable(false).DieFeed(ServiceInstanceRequest{Key: v})
		fn(d)
		r.Requests = append(r.Requests, d.DieRelease())
	})
}

func (d *ServiceInstanceSpecDie) Ref(v ServiceLifecycleReference) *ServiceInstanceSpecDie {
	return d.DieStamp(func(r *ServiceInstanceSpec) {
		r.Ref = v
	})
}

func (d *ServiceInstanceSpecDie) Type(v string) *ServiceInstanceSpecDie {
	return d.DieStamp(func(r *ServiceInstanceSpec) {
		r.Type = v
	})
}

func (d *ServiceInstanceSpecDie) Tier(v string) *ServiceInstanceSpecDie {
	return d.DieStamp(func(r *ServiceInstanceSpec) {
		r.Tier = v
	})
}

func (d *ServiceInstanceSpecDie) Requests(v ...ServiceInstanceRequest) *ServiceInstanceSpecDie {
	return d.DieStamp(func(r *ServiceInstanceSpec) {
		r.Requests = v
	})
}

var ServiceInstanceRequestBlank = (&ServiceInstanceRequestDie{}).DieFeed(ServiceInstanceRequest{})

type ServiceInstanceRequestDie struct {
	mutable bool
	r       ServiceInstanceRequest
	seal    ServiceInstanceRequest
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceInstanceRequestDie) DieImmutable(immutable bool) *ServiceInstanceRequestDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceInstanceRequestDie) DieFeed(r ServiceInstanceRequest) *ServiceInstanceRequestDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceInstanceRequestDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceRequestDie) DieFeedPtr(r *ServiceInstanceRequest) *ServiceInstanceRequestDie {
	if r == nil {
		r = &ServiceInstanceRequest{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceInstanceRequestDie) DieFeedDuck(v any) *ServiceInstanceRequestDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceInstanceRequestDie) DieFeedJSON(j []byte) *ServiceInstanceRequestDie {
	r := ServiceInstanceRequest{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceInstanceRequestDie) DieFeedYAML(y []byte) *ServiceInstanceRequestDie {
	r := ServiceInstanceRequest{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceInstanceRequestDie) DieFeedYAMLFile(name string) *ServiceInstanceRequestDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceRequestDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceInstanceRequestDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceInstanceRequestDie) DieRelease() ServiceInstanceRequest {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceInstanceRequestDie) DieReleasePtr() *ServiceInstanceRequest {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceInstanceRequestDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceInstanceRequestDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceInstanceRequestDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceRequestDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceInstanceRequestDie) DieStamp(fn func(r *ServiceInstanceRequest)) *ServiceInstanceRequestDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceInstanceRequestDie) DieStampAt(jp string, fn interface{}) *ServiceInstanceRequestDie {
	return d.DieStamp(func(r *ServiceInstanceRequest) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceInstanceRequestDie) DieWith(fns ...func(d *ServiceInstanceRequestDie)) *ServiceInstanceRequestDie {
	nd := ServiceInstanceRequestBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceInstanceRequestDie) DeepCopy() *ServiceInstanceRequestDie {
	r := *d.r.DeepCopy()
	return &ServiceInstanceRequestDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceInstanceRequestDie) DieSeal() *ServiceInstanceRequestDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceInstanceRequestDie) DieSealFeed(r ServiceInstanceRequest) *ServiceInstanceRequestDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceRequestDie) DieSealFeedPtr(r *ServiceInstanceRequest) *ServiceInstanceRequestDie {
	if r == nil {
		r = &ServiceInstanceRequest{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceInstanceRequestDie) DieSealRelease() ServiceInstanceRequest {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceInstanceRequestDie) DieSealReleasePtr() *ServiceInstanceRequest {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceInstanceRequestDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceInstanceRequestDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *ServiceInstanceRequestDie) Key(v string) *ServiceInstanceRequestDie {
	return d.DieStamp(func(r *ServiceInstanceRequest) {
		r.Key = v
	})
}

func (d *ServiceInstanceRequestDie) Value(v string) *ServiceInstanceRequestDie {
	return d.DieStamp(func(r *ServiceInstanceRequest) {
		r.Value = v
	})
}

var ServiceInstanceStatusBlank = (&ServiceInstanceStatusDie{}).DieFeed(ServiceInstanceStatus{})

type ServiceInstanceStatusDie struct {
	mutable bool
	r       ServiceInstanceStatus
	seal    ServiceInstanceStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceInstanceStatusDie) DieImmutable(immutable bool) *ServiceInstanceStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceInstanceStatusDie) DieFeed(r ServiceInstanceStatus) *ServiceInstanceStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceInstanceStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceStatusDie) DieFeedPtr(r *ServiceInstanceStatus) *ServiceInstanceStatusDie {
	if r == nil {
		r = &ServiceInstanceStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceInstanceStatusDie) DieFeedDuck(v any) *ServiceInstanceStatusDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceInstanceStatusDie) DieFeedJSON(j []byte) *ServiceInstanceStatusDie {
	r := ServiceInstanceStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceInstanceStatusDie) DieFeedYAML(y []byte) *ServiceInstanceStatusDie {
	r := ServiceInstanceStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceInstanceStatusDie) DieFeedYAMLFile(name string) *ServiceInstanceStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceInstanceStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceInstanceStatusDie) DieRelease() ServiceInstanceStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceInstanceStatusDie) DieReleasePtr() *ServiceInstanceStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceInstanceStatusDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceInstanceStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceInstanceStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceInstanceStatusDie) DieStamp(fn func(r *ServiceInstanceStatus)) *ServiceInstanceStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceInstanceStatusDie) DieStampAt(jp string, fn interface{}) *ServiceInstanceStatusDie {
	return d.DieStamp(func(r *ServiceInstanceStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceInstanceStatusDie) DieWith(fns ...func(d *ServiceInstanceStatusDie)) *ServiceInstanceStatusDie {
	nd := ServiceInstanceStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceInstanceStatusDie) DeepCopy() *ServiceInstanceStatusDie {
	r := *d.r.DeepCopy()
	return &ServiceInstanceStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceInstanceStatusDie) DieSeal() *ServiceInstanceStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceInstanceStatusDie) DieSealFeed(r ServiceInstanceStatus) *ServiceInstanceStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceStatusDie) DieSealFeedPtr(r *ServiceInstanceStatus) *ServiceInstanceStatusDie {
	if r == nil {
		r = &ServiceInstanceStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceInstanceStatusDie) DieSealRelease() ServiceInstanceStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceInstanceStatusDie) DieSealReleasePtr() *ServiceInstanceStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceInstanceStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceInstanceStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *ServiceInstanceStatusDie) Status(v apis.Status) *ServiceInstanceStatusDie {
	return d.DieStamp(func(r *ServiceInstanceStatus) {
		r.Status = v
	})
}

func (d *ServiceInstanceStatusDie) ServiceInstanceId(v string) *ServiceInstanceStatusDie {
	return d.DieStamp(func(r *ServiceInstanceStatus) {
		r.ServiceInstanceId = v
	})
}

var ServiceInstanceBlank = (&ServiceInstanceDie{}).DieFeed(ServiceInstance{})

type ServiceInstanceDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       ServiceInstance
	seal    ServiceInstance
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceInstanceDie) DieImmutable(immutable bool) *ServiceInstanceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceInstanceDie) DieFeed(r ServiceInstance) *ServiceInstanceDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceInstanceDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceDie) DieFeedPtr(r *ServiceInstance) *ServiceInstanceDie {
	if r == nil {
		r = &ServiceInstance{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceInstanceDie) DieFeedDuck(v any) *ServiceInstanceDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceInstanceDie) DieFeedJSON(j []byte) *ServiceInstanceDie {
	r := ServiceInstance{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceInstanceDie) DieFeedYAML(y []byte) *ServiceInstanceDie {
	r := ServiceInstance{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceInstanceDie) DieFeedYAMLFile(name string) *ServiceInstanceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceInstanceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceInstanceDie) DieRelease() ServiceInstance {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceInstanceDie) DieReleasePtr() *ServiceInstance {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ServiceInstanceDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceInstanceDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceInstanceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceInstanceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceInstanceDie) DieStamp(fn func(r *ServiceInstance)) *ServiceInstanceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceInstanceDie) DieStampAt(jp string, fn interface{}) *ServiceInstanceDie {
	return d.DieStamp(func(r *ServiceInstance) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceInstanceDie) DieWith(fns ...func(d *ServiceInstanceDie)) *ServiceInstanceDie {
	nd := ServiceInstanceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceInstanceDie) DeepCopy() *ServiceInstanceDie {
	r := *d.r.DeepCopy()
	return &ServiceInstanceDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceInstanceDie) DieSeal() *ServiceInstanceDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceInstanceDie) DieSealFeed(r ServiceInstance) *ServiceInstanceDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceDie) DieSealFeedPtr(r *ServiceInstance) *ServiceInstanceDie {
	if r == nil {
		r = &ServiceInstance{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceInstanceDie) DieSealRelease() ServiceInstance {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceInstanceDie) DieSealReleasePtr() *ServiceInstance {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceInstanceDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceInstanceDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ServiceInstanceDie)(nil)

func (d *ServiceInstanceDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ServiceInstanceDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceInstanceDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceInstanceDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ServiceInstance{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ServiceInstanceDie) APIVersion(v string) *ServiceInstanceDie {
	return d.DieStamp(func(r *ServiceInstance) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceInstanceDie) Kind(v string) *ServiceInstanceDie {
	return d.DieStamp(func(r *ServiceInstance) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ServiceInstanceDie) TypeMetadata(v v1.TypeMeta) *ServiceInstanceDie {
	return d.DieStamp(func(r *ServiceInstance) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ServiceInstanceDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *ServiceInstanceDie {
	return d.DieStamp(func(r *ServiceInstance) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ServiceInstanceDie) Metadata(v v1.ObjectMeta) *ServiceInstanceDie {
	return d.DieStamp(func(r *ServiceInstance) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ServiceInstanceDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceInstanceDie {
	return d.DieStamp(func(r *ServiceInstance) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ServiceInstanceDie) SpecDie(fn func(d *ServiceInstanceSpecDie)) *ServiceInstanceDie {
	return d.DieStamp(func(r *ServiceInstance) {
		d := ServiceInstanceSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ServiceInstanceDie) StatusDie(fn func(d *ServiceInstanceStatusDie)) *ServiceInstanceDie {
	return d.DieStamp(func(r *ServiceInstance) {
		d := ServiceInstanceStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ServiceInstanceDie) Spec(v ServiceInstanceSpec) *ServiceInstanceDie {
	return d.DieStamp(func(r *ServiceInstance) {
		r.Spec = v
	})
}

func (d *ServiceInstanceDie) Status(v ServiceInstanceStatus) *ServiceInstanceDie {
	return d.DieStamp(func(r *ServiceInstance) {
		r.Status = v
	})
}

var ServiceInstanceDuckSpecBlank = (&ServiceInstanceDuckSpecDie{}).DieFeed(ServiceInstanceDuckSpec{})

type ServiceInstanceDuckSpecDie struct {
	mutable bool
	r       ServiceInstanceDuckSpec
	seal    ServiceInstanceDuckSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceInstanceDuckSpecDie) DieImmutable(immutable bool) *ServiceInstanceDuckSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceInstanceDuckSpecDie) DieFeed(r ServiceInstanceDuckSpec) *ServiceInstanceDuckSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceInstanceDuckSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceDuckSpecDie) DieFeedPtr(r *ServiceInstanceDuckSpec) *ServiceInstanceDuckSpecDie {
	if r == nil {
		r = &ServiceInstanceDuckSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceInstanceDuckSpecDie) DieFeedDuck(v any) *ServiceInstanceDuckSpecDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceInstanceDuckSpecDie) DieFeedJSON(j []byte) *ServiceInstanceDuckSpecDie {
	r := ServiceInstanceDuckSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceInstanceDuckSpecDie) DieFeedYAML(y []byte) *ServiceInstanceDuckSpecDie {
	r := ServiceInstanceDuckSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceInstanceDuckSpecDie) DieFeedYAMLFile(name string) *ServiceInstanceDuckSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceDuckSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceInstanceDuckSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceInstanceDuckSpecDie) DieRelease() ServiceInstanceDuckSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceInstanceDuckSpecDie) DieReleasePtr() *ServiceInstanceDuckSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceInstanceDuckSpecDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceInstanceDuckSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceInstanceDuckSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceDuckSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceInstanceDuckSpecDie) DieStamp(fn func(r *ServiceInstanceDuckSpec)) *ServiceInstanceDuckSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceInstanceDuckSpecDie) DieStampAt(jp string, fn interface{}) *ServiceInstanceDuckSpecDie {
	return d.DieStamp(func(r *ServiceInstanceDuckSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceInstanceDuckSpecDie) DieWith(fns ...func(d *ServiceInstanceDuckSpecDie)) *ServiceInstanceDuckSpecDie {
	nd := ServiceInstanceDuckSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceInstanceDuckSpecDie) DeepCopy() *ServiceInstanceDuckSpecDie {
	r := *d.r.DeepCopy()
	return &ServiceInstanceDuckSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceInstanceDuckSpecDie) DieSeal() *ServiceInstanceDuckSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceInstanceDuckSpecDie) DieSealFeed(r ServiceInstanceDuckSpec) *ServiceInstanceDuckSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceDuckSpecDie) DieSealFeedPtr(r *ServiceInstanceDuckSpec) *ServiceInstanceDuckSpecDie {
	if r == nil {
		r = &ServiceInstanceDuckSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceInstanceDuckSpecDie) DieSealRelease() ServiceInstanceDuckSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceInstanceDuckSpecDie) DieSealReleasePtr() *ServiceInstanceDuckSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceInstanceDuckSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceInstanceDuckSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// RequestDie mutates a single item in Requests matched by the nested field Key, appending a new item if no match is found.
func (d *ServiceInstanceDuckSpecDie) RequestDie(v string, fn func(d *ServiceInstanceRequestDie)) *ServiceInstanceDuckSpecDie {
	return d.DieStamp(func(r *ServiceInstanceDuckSpec) {
		for i := range r.Requests {
			if v == r.Requests[i].Key {
				d := ServiceInstanceRequestBlank.DieImmutable(false).DieFeed(r.Requests[i])
				fn(d)
				r.Requests[i] = d.DieRelease()
				return
			}
		}

		d := ServiceInstanceRequestBlank.DieImmutable(false).DieFeed(ServiceInstanceRequest{Key: v})
		fn(d)
		r.Requests = append(r.Requests, d.DieRelease())
	})
}

func (d *ServiceInstanceDuckSpecDie) Type(v string) *ServiceInstanceDuckSpecDie {
	return d.DieStamp(func(r *ServiceInstanceDuckSpec) {
		r.Type = v
	})
}

func (d *ServiceInstanceDuckSpecDie) Tier(v string) *ServiceInstanceDuckSpecDie {
	return d.DieStamp(func(r *ServiceInstanceDuckSpec) {
		r.Tier = v
	})
}

func (d *ServiceInstanceDuckSpecDie) Requests(v ...ServiceInstanceRequest) *ServiceInstanceDuckSpecDie {
	return d.DieStamp(func(r *ServiceInstanceDuckSpec) {
		r.Requests = v
	})
}

var ServiceInstanceDuckStatusBlank = (&ServiceInstanceDuckStatusDie{}).DieFeed(ServiceInstanceDuckStatus{})

type ServiceInstanceDuckStatusDie struct {
	mutable bool
	r       ServiceInstanceDuckStatus
	seal    ServiceInstanceDuckStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceInstanceDuckStatusDie) DieImmutable(immutable bool) *ServiceInstanceDuckStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceInstanceDuckStatusDie) DieFeed(r ServiceInstanceDuckStatus) *ServiceInstanceDuckStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceInstanceDuckStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceDuckStatusDie) DieFeedPtr(r *ServiceInstanceDuckStatus) *ServiceInstanceDuckStatusDie {
	if r == nil {
		r = &ServiceInstanceDuckStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceInstanceDuckStatusDie) DieFeedDuck(v any) *ServiceInstanceDuckStatusDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceInstanceDuckStatusDie) DieFeedJSON(j []byte) *ServiceInstanceDuckStatusDie {
	r := ServiceInstanceDuckStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceInstanceDuckStatusDie) DieFeedYAML(y []byte) *ServiceInstanceDuckStatusDie {
	r := ServiceInstanceDuckStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceInstanceDuckStatusDie) DieFeedYAMLFile(name string) *ServiceInstanceDuckStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceDuckStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceInstanceDuckStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceInstanceDuckStatusDie) DieRelease() ServiceInstanceDuckStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceInstanceDuckStatusDie) DieReleasePtr() *ServiceInstanceDuckStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceInstanceDuckStatusDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceInstanceDuckStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceInstanceDuckStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceDuckStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceInstanceDuckStatusDie) DieStamp(fn func(r *ServiceInstanceDuckStatus)) *ServiceInstanceDuckStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceInstanceDuckStatusDie) DieStampAt(jp string, fn interface{}) *ServiceInstanceDuckStatusDie {
	return d.DieStamp(func(r *ServiceInstanceDuckStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceInstanceDuckStatusDie) DieWith(fns ...func(d *ServiceInstanceDuckStatusDie)) *ServiceInstanceDuckStatusDie {
	nd := ServiceInstanceDuckStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceInstanceDuckStatusDie) DeepCopy() *ServiceInstanceDuckStatusDie {
	r := *d.r.DeepCopy()
	return &ServiceInstanceDuckStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceInstanceDuckStatusDie) DieSeal() *ServiceInstanceDuckStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceInstanceDuckStatusDie) DieSealFeed(r ServiceInstanceDuckStatus) *ServiceInstanceDuckStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceDuckStatusDie) DieSealFeedPtr(r *ServiceInstanceDuckStatus) *ServiceInstanceDuckStatusDie {
	if r == nil {
		r = &ServiceInstanceDuckStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceInstanceDuckStatusDie) DieSealRelease() ServiceInstanceDuckStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceInstanceDuckStatusDie) DieSealReleasePtr() *ServiceInstanceDuckStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceInstanceDuckStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceInstanceDuckStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *ServiceInstanceDuckStatusDie) Status(v apis.Status) *ServiceInstanceDuckStatusDie {
	return d.DieStamp(func(r *ServiceInstanceDuckStatus) {
		r.Status = v
	})
}

func (d *ServiceInstanceDuckStatusDie) ServiceInstanceId(v string) *ServiceInstanceDuckStatusDie {
	return d.DieStamp(func(r *ServiceInstanceDuckStatus) {
		r.ServiceInstanceId = v
	})
}

var ServiceInstanceDuckBlank = (&ServiceInstanceDuckDie{}).DieFeed(ServiceInstanceDuck{})

type ServiceInstanceDuckDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       ServiceInstanceDuck
	seal    ServiceInstanceDuck
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceInstanceDuckDie) DieImmutable(immutable bool) *ServiceInstanceDuckDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceInstanceDuckDie) DieFeed(r ServiceInstanceDuck) *ServiceInstanceDuckDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceInstanceDuckDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceDuckDie) DieFeedPtr(r *ServiceInstanceDuck) *ServiceInstanceDuckDie {
	if r == nil {
		r = &ServiceInstanceDuck{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceInstanceDuckDie) DieFeedDuck(v any) *ServiceInstanceDuckDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceInstanceDuckDie) DieFeedJSON(j []byte) *ServiceInstanceDuckDie {
	r := ServiceInstanceDuck{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceInstanceDuckDie) DieFeedYAML(y []byte) *ServiceInstanceDuckDie {
	r := ServiceInstanceDuck{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceInstanceDuckDie) DieFeedYAMLFile(name string) *ServiceInstanceDuckDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceDuckDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceInstanceDuckDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceInstanceDuckDie) DieRelease() ServiceInstanceDuck {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceInstanceDuckDie) DieReleasePtr() *ServiceInstanceDuck {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ServiceInstanceDuckDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceInstanceDuckDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceInstanceDuckDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceInstanceDuckDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceInstanceDuckDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceInstanceDuckDie) DieStamp(fn func(r *ServiceInstanceDuck)) *ServiceInstanceDuckDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceInstanceDuckDie) DieStampAt(jp string, fn interface{}) *ServiceInstanceDuckDie {
	return d.DieStamp(func(r *ServiceInstanceDuck) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceInstanceDuckDie) DieWith(fns ...func(d *ServiceInstanceDuckDie)) *ServiceInstanceDuckDie {
	nd := ServiceInstanceDuckBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceInstanceDuckDie) DeepCopy() *ServiceInstanceDuckDie {
	r := *d.r.DeepCopy()
	return &ServiceInstanceDuckDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceInstanceDuckDie) DieSeal() *ServiceInstanceDuckDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceInstanceDuckDie) DieSealFeed(r ServiceInstanceDuck) *ServiceInstanceDuckDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceInstanceDuckDie) DieSealFeedPtr(r *ServiceInstanceDuck) *ServiceInstanceDuckDie {
	if r == nil {
		r = &ServiceInstanceDuck{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceInstanceDuckDie) DieSealRelease() ServiceInstanceDuck {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceInstanceDuckDie) DieSealReleasePtr() *ServiceInstanceDuck {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceInstanceDuckDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceInstanceDuckDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ServiceInstanceDuckDie)(nil)

func (d *ServiceInstanceDuckDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ServiceInstanceDuckDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceInstanceDuckDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceInstanceDuckDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ServiceInstanceDuck{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ServiceInstanceDuckDie) APIVersion(v string) *ServiceInstanceDuckDie {
	return d.DieStamp(func(r *ServiceInstanceDuck) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceInstanceDuckDie) Kind(v string) *ServiceInstanceDuckDie {
	return d.DieStamp(func(r *ServiceInstanceDuck) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ServiceInstanceDuckDie) TypeMetadata(v v1.TypeMeta) *ServiceInstanceDuckDie {
	return d.DieStamp(func(r *ServiceInstanceDuck) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ServiceInstanceDuckDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *ServiceInstanceDuckDie {
	return d.DieStamp(func(r *ServiceInstanceDuck) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ServiceInstanceDuckDie) Metadata(v v1.ObjectMeta) *ServiceInstanceDuckDie {
	return d.DieStamp(func(r *ServiceInstanceDuck) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ServiceInstanceDuckDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceInstanceDuckDie {
	return d.DieStamp(func(r *ServiceInstanceDuck) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ServiceInstanceDuckDie) SpecDie(fn func(d *ServiceInstanceDuckSpecDie)) *ServiceInstanceDuckDie {
	return d.DieStamp(func(r *ServiceInstanceDuck) {
		d := ServiceInstanceDuckSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ServiceInstanceDuckDie) StatusDie(fn func(d *ServiceInstanceDuckStatusDie)) *ServiceInstanceDuckDie {
	return d.DieStamp(func(r *ServiceInstanceDuck) {
		d := ServiceInstanceDuckStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ServiceInstanceDuckDie) Spec(v ServiceInstanceDuckSpec) *ServiceInstanceDuckDie {
	return d.DieStamp(func(r *ServiceInstanceDuck) {
		r.Spec = v
	})
}

func (d *ServiceInstanceDuckDie) Status(v ServiceInstanceDuckStatus) *ServiceInstanceDuckDie {
	return d.DieStamp(func(r *ServiceInstanceDuck) {
		r.Status = v
	})
}

var ServiceLifecycleReferenceBlank = (&ServiceLifecycleReferenceDie{}).DieFeed(ServiceLifecycleReference{})

type ServiceLifecycleReferenceDie struct {
	mutable bool
	r       ServiceLifecycleReference
	seal    ServiceLifecycleReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceLifecycleReferenceDie) DieImmutable(immutable bool) *ServiceLifecycleReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceLifecycleReferenceDie) DieFeed(r ServiceLifecycleReference) *ServiceLifecycleReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceLifecycleReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceLifecycleReferenceDie) DieFeedPtr(r *ServiceLifecycleReference) *ServiceLifecycleReferenceDie {
	if r == nil {
		r = &ServiceLifecycleReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceLifecycleReferenceDie) DieFeedDuck(v any) *ServiceLifecycleReferenceDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceLifecycleReferenceDie) DieFeedJSON(j []byte) *ServiceLifecycleReferenceDie {
	r := ServiceLifecycleReference{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceLifecycleReferenceDie) DieFeedYAML(y []byte) *ServiceLifecycleReferenceDie {
	r := ServiceLifecycleReference{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceLifecycleReferenceDie) DieFeedYAMLFile(name string) *ServiceLifecycleReferenceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceLifecycleReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceLifecycleReferenceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceLifecycleReferenceDie) DieRelease() ServiceLifecycleReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceLifecycleReferenceDie) DieReleasePtr() *ServiceLifecycleReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceLifecycleReferenceDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceLifecycleReferenceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceLifecycleReferenceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceLifecycleReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceLifecycleReferenceDie) DieStamp(fn func(r *ServiceLifecycleReference)) *ServiceLifecycleReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceLifecycleReferenceDie) DieStampAt(jp string, fn interface{}) *ServiceLifecycleReferenceDie {
	return d.DieStamp(func(r *ServiceLifecycleReference) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceLifecycleReferenceDie) DieWith(fns ...func(d *ServiceLifecycleReferenceDie)) *ServiceLifecycleReferenceDie {
	nd := ServiceLifecycleReferenceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceLifecycleReferenceDie) DeepCopy() *ServiceLifecycleReferenceDie {
	r := *d.r.DeepCopy()
	return &ServiceLifecycleReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceLifecycleReferenceDie) DieSeal() *ServiceLifecycleReferenceDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceLifecycleReferenceDie) DieSealFeed(r ServiceLifecycleReference) *ServiceLifecycleReferenceDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceLifecycleReferenceDie) DieSealFeedPtr(r *ServiceLifecycleReference) *ServiceLifecycleReferenceDie {
	if r == nil {
		r = &ServiceLifecycleReference{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceLifecycleReferenceDie) DieSealRelease() ServiceLifecycleReference {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceLifecycleReferenceDie) DieSealReleasePtr() *ServiceLifecycleReference {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceLifecycleReferenceDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceLifecycleReferenceDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *ServiceLifecycleReferenceDie) Kind(v string) *ServiceLifecycleReferenceDie {
	return d.DieStamp(func(r *ServiceLifecycleReference) {
		r.Kind = v
	})
}

func (d *ServiceLifecycleReferenceDie) Namespace(v string) *ServiceLifecycleReferenceDie {
	return d.DieStamp(func(r *ServiceLifecycleReference) {
		r.Namespace = v
	})
}

func (d *ServiceLifecycleReferenceDie) Name(v string) *ServiceLifecycleReferenceDie {
	return d.DieStamp(func(r *ServiceLifecycleReference) {
		r.Name = v
	})
}

var ServiceLifecycleSpecBlank = (&ServiceLifecycleSpecDie{}).DieFeed(ServiceLifecycleSpec{})

type ServiceLifecycleSpecDie struct {
	mutable bool
	r       ServiceLifecycleSpec
	seal    ServiceLifecycleSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceLifecycleSpecDie) DieImmutable(immutable bool) *ServiceLifecycleSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceLifecycleSpecDie) DieFeed(r ServiceLifecycleSpec) *ServiceLifecycleSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceLifecycleSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceLifecycleSpecDie) DieFeedPtr(r *ServiceLifecycleSpec) *ServiceLifecycleSpecDie {
	if r == nil {
		r = &ServiceLifecycleSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceLifecycleSpecDie) DieFeedDuck(v any) *ServiceLifecycleSpecDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceLifecycleSpecDie) DieFeedJSON(j []byte) *ServiceLifecycleSpecDie {
	r := ServiceLifecycleSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceLifecycleSpecDie) DieFeedYAML(y []byte) *ServiceLifecycleSpecDie {
	r := ServiceLifecycleSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceLifecycleSpecDie) DieFeedYAMLFile(name string) *ServiceLifecycleSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceLifecycleSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceLifecycleSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceLifecycleSpecDie) DieRelease() ServiceLifecycleSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceLifecycleSpecDie) DieReleasePtr() *ServiceLifecycleSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceLifecycleSpecDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceLifecycleSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceLifecycleSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceLifecycleSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceLifecycleSpecDie) DieStamp(fn func(r *ServiceLifecycleSpec)) *ServiceLifecycleSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceLifecycleSpecDie) DieStampAt(jp string, fn interface{}) *ServiceLifecycleSpecDie {
	return d.DieStamp(func(r *ServiceLifecycleSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceLifecycleSpecDie) DieWith(fns ...func(d *ServiceLifecycleSpecDie)) *ServiceLifecycleSpecDie {
	nd := ServiceLifecycleSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceLifecycleSpecDie) DeepCopy() *ServiceLifecycleSpecDie {
	r := *d.r.DeepCopy()
	return &ServiceLifecycleSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceLifecycleSpecDie) DieSeal() *ServiceLifecycleSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceLifecycleSpecDie) DieSealFeed(r ServiceLifecycleSpec) *ServiceLifecycleSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceLifecycleSpecDie) DieSealFeedPtr(r *ServiceLifecycleSpec) *ServiceLifecycleSpecDie {
	if r == nil {
		r = &ServiceLifecycleSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceLifecycleSpecDie) DieSealRelease() ServiceLifecycleSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceLifecycleSpecDie) DieSealReleasePtr() *ServiceLifecycleSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceLifecycleSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceLifecycleSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericContainerSpecDie mutates GenericContainerSpec as a die.
func (d *ServiceLifecycleSpecDie) GenericContainerSpecDie(fn func(d *containersv1alpha1.GenericContainerSpecDie)) *ServiceLifecycleSpecDie {
	return d.DieStamp(func(r *ServiceLifecycleSpec) {
		d := containersv1alpha1.GenericContainerSpecBlank.DieImmutable(false).DieFeed(r.GenericContainerSpec)
		fn(d)
		r.GenericContainerSpec = d.DieRelease()
	})
}

// ClientRefDie mutates ClientRef as a die.
func (d *ServiceLifecycleSpecDie) ClientRefDie(fn func(d *componentsv1alpha1.ComponentReferenceDie)) *ServiceLifecycleSpecDie {
	return d.DieStamp(func(r *ServiceLifecycleSpec) {
		d := componentsv1alpha1.ComponentReferenceBlank.DieImmutable(false).DieFeed(r.ClientRef)
		fn(d)
		r.ClientRef = d.DieRelease()
	})
}

func (d *ServiceLifecycleSpecDie) GenericContainerSpec(v containersv1alpha1.GenericContainerSpec) *ServiceLifecycleSpecDie {
	return d.DieStamp(func(r *ServiceLifecycleSpec) {
		r.GenericContainerSpec = v
	})
}

func (d *ServiceLifecycleSpecDie) ClientRef(v componentsv1alpha1.ComponentReference) *ServiceLifecycleSpecDie {
	return d.DieStamp(func(r *ServiceLifecycleSpec) {
		r.ClientRef = v
	})
}

var ServiceLifecycleStatusBlank = (&ServiceLifecycleStatusDie{}).DieFeed(ServiceLifecycleStatus{})

type ServiceLifecycleStatusDie struct {
	mutable bool
	r       ServiceLifecycleStatus
	seal    ServiceLifecycleStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceLifecycleStatusDie) DieImmutable(immutable bool) *ServiceLifecycleStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceLifecycleStatusDie) DieFeed(r ServiceLifecycleStatus) *ServiceLifecycleStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceLifecycleStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceLifecycleStatusDie) DieFeedPtr(r *ServiceLifecycleStatus) *ServiceLifecycleStatusDie {
	if r == nil {
		r = &ServiceLifecycleStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceLifecycleStatusDie) DieFeedDuck(v any) *ServiceLifecycleStatusDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceLifecycleStatusDie) DieFeedJSON(j []byte) *ServiceLifecycleStatusDie {
	r := ServiceLifecycleStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceLifecycleStatusDie) DieFeedYAML(y []byte) *ServiceLifecycleStatusDie {
	r := ServiceLifecycleStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceLifecycleStatusDie) DieFeedYAMLFile(name string) *ServiceLifecycleStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceLifecycleStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceLifecycleStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceLifecycleStatusDie) DieRelease() ServiceLifecycleStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceLifecycleStatusDie) DieReleasePtr() *ServiceLifecycleStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceLifecycleStatusDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceLifecycleStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceLifecycleStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceLifecycleStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceLifecycleStatusDie) DieStamp(fn func(r *ServiceLifecycleStatus)) *ServiceLifecycleStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceLifecycleStatusDie) DieStampAt(jp string, fn interface{}) *ServiceLifecycleStatusDie {
	return d.DieStamp(func(r *ServiceLifecycleStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceLifecycleStatusDie) DieWith(fns ...func(d *ServiceLifecycleStatusDie)) *ServiceLifecycleStatusDie {
	nd := ServiceLifecycleStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceLifecycleStatusDie) DeepCopy() *ServiceLifecycleStatusDie {
	r := *d.r.DeepCopy()
	return &ServiceLifecycleStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceLifecycleStatusDie) DieSeal() *ServiceLifecycleStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceLifecycleStatusDie) DieSealFeed(r ServiceLifecycleStatus) *ServiceLifecycleStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceLifecycleStatusDie) DieSealFeedPtr(r *ServiceLifecycleStatus) *ServiceLifecycleStatusDie {
	if r == nil {
		r = &ServiceLifecycleStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceLifecycleStatusDie) DieSealRelease() ServiceLifecycleStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceLifecycleStatusDie) DieSealReleasePtr() *ServiceLifecycleStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceLifecycleStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceLifecycleStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentStatusDie mutates GenericComponentStatus as a die.
func (d *ServiceLifecycleStatusDie) GenericComponentStatusDie(fn func(d *componentsv1alpha1.GenericComponentStatusDie)) *ServiceLifecycleStatusDie {
	return d.DieStamp(func(r *ServiceLifecycleStatus) {
		d := componentsv1alpha1.GenericComponentStatusBlank.DieImmutable(false).DieFeed(r.GenericComponentStatus)
		fn(d)
		r.GenericComponentStatus = d.DieRelease()
	})
}

func (d *ServiceLifecycleStatusDie) Status(v apis.Status) *ServiceLifecycleStatusDie {
	return d.DieStamp(func(r *ServiceLifecycleStatus) {
		r.Status = v
	})
}

func (d *ServiceLifecycleStatusDie) GenericComponentStatus(v componentsv1alpha1.GenericComponentStatus) *ServiceLifecycleStatusDie {
	return d.DieStamp(func(r *ServiceLifecycleStatus) {
		r.GenericComponentStatus = v
	})
}

func (d *ServiceLifecycleStatusDie) URL(v string) *ServiceLifecycleStatusDie {
	return d.DieStamp(func(r *ServiceLifecycleStatus) {
		r.URL = v
	})
}

var ServiceLifecycleBlank = (&ServiceLifecycleDie{}).DieFeed(ServiceLifecycle{})

type ServiceLifecycleDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       ServiceLifecycle
	seal    ServiceLifecycle
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceLifecycleDie) DieImmutable(immutable bool) *ServiceLifecycleDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceLifecycleDie) DieFeed(r ServiceLifecycle) *ServiceLifecycleDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceLifecycleDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceLifecycleDie) DieFeedPtr(r *ServiceLifecycle) *ServiceLifecycleDie {
	if r == nil {
		r = &ServiceLifecycle{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceLifecycleDie) DieFeedDuck(v any) *ServiceLifecycleDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceLifecycleDie) DieFeedJSON(j []byte) *ServiceLifecycleDie {
	r := ServiceLifecycle{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceLifecycleDie) DieFeedYAML(y []byte) *ServiceLifecycleDie {
	r := ServiceLifecycle{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceLifecycleDie) DieFeedYAMLFile(name string) *ServiceLifecycleDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceLifecycleDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceLifecycleDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceLifecycleDie) DieRelease() ServiceLifecycle {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceLifecycleDie) DieReleasePtr() *ServiceLifecycle {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ServiceLifecycleDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceLifecycleDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceLifecycleDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceLifecycleDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceLifecycleDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceLifecycleDie) DieStamp(fn func(r *ServiceLifecycle)) *ServiceLifecycleDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceLifecycleDie) DieStampAt(jp string, fn interface{}) *ServiceLifecycleDie {
	return d.DieStamp(func(r *ServiceLifecycle) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceLifecycleDie) DieWith(fns ...func(d *ServiceLifecycleDie)) *ServiceLifecycleDie {
	nd := ServiceLifecycleBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceLifecycleDie) DeepCopy() *ServiceLifecycleDie {
	r := *d.r.DeepCopy()
	return &ServiceLifecycleDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceLifecycleDie) DieSeal() *ServiceLifecycleDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceLifecycleDie) DieSealFeed(r ServiceLifecycle) *ServiceLifecycleDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceLifecycleDie) DieSealFeedPtr(r *ServiceLifecycle) *ServiceLifecycleDie {
	if r == nil {
		r = &ServiceLifecycle{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceLifecycleDie) DieSealRelease() ServiceLifecycle {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceLifecycleDie) DieSealReleasePtr() *ServiceLifecycle {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceLifecycleDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceLifecycleDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ServiceLifecycleDie)(nil)

func (d *ServiceLifecycleDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ServiceLifecycleDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceLifecycleDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceLifecycleDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ServiceLifecycle{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ServiceLifecycleDie) APIVersion(v string) *ServiceLifecycleDie {
	return d.DieStamp(func(r *ServiceLifecycle) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceLifecycleDie) Kind(v string) *ServiceLifecycleDie {
	return d.DieStamp(func(r *ServiceLifecycle) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ServiceLifecycleDie) TypeMetadata(v v1.TypeMeta) *ServiceLifecycleDie {
	return d.DieStamp(func(r *ServiceLifecycle) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ServiceLifecycleDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *ServiceLifecycleDie {
	return d.DieStamp(func(r *ServiceLifecycle) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ServiceLifecycleDie) Metadata(v v1.ObjectMeta) *ServiceLifecycleDie {
	return d.DieStamp(func(r *ServiceLifecycle) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ServiceLifecycleDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceLifecycleDie {
	return d.DieStamp(func(r *ServiceLifecycle) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ServiceLifecycleDie) SpecDie(fn func(d *ServiceLifecycleSpecDie)) *ServiceLifecycleDie {
	return d.DieStamp(func(r *ServiceLifecycle) {
		d := ServiceLifecycleSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ServiceLifecycleDie) StatusDie(fn func(d *ServiceLifecycleStatusDie)) *ServiceLifecycleDie {
	return d.DieStamp(func(r *ServiceLifecycle) {
		d := ServiceLifecycleStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ServiceLifecycleDie) Spec(v ServiceLifecycleSpec) *ServiceLifecycleDie {
	return d.DieStamp(func(r *ServiceLifecycle) {
		r.Spec = v
	})
}

func (d *ServiceLifecycleDie) Status(v ServiceLifecycleStatus) *ServiceLifecycleDie {
	return d.DieStamp(func(r *ServiceLifecycle) {
		r.Status = v
	})
}

var ClusterServiceLifecycleBlank = (&ClusterServiceLifecycleDie{}).DieFeed(ClusterServiceLifecycle{})

type ClusterServiceLifecycleDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       ClusterServiceLifecycle
	seal    ClusterServiceLifecycle
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ClusterServiceLifecycleDie) DieImmutable(immutable bool) *ClusterServiceLifecycleDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ClusterServiceLifecycleDie) DieFeed(r ClusterServiceLifecycle) *ClusterServiceLifecycleDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ClusterServiceLifecycleDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ClusterServiceLifecycleDie) DieFeedPtr(r *ClusterServiceLifecycle) *ClusterServiceLifecycleDie {
	if r == nil {
		r = &ClusterServiceLifecycle{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ClusterServiceLifecycleDie) DieFeedDuck(v any) *ClusterServiceLifecycleDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ClusterServiceLifecycleDie) DieFeedJSON(j []byte) *ClusterServiceLifecycleDie {
	r := ClusterServiceLifecycle{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ClusterServiceLifecycleDie) DieFeedYAML(y []byte) *ClusterServiceLifecycleDie {
	r := ClusterServiceLifecycle{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ClusterServiceLifecycleDie) DieFeedYAMLFile(name string) *ClusterServiceLifecycleDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterServiceLifecycleDie) DieFeedRawExtension(raw runtime.RawExtension) *ClusterServiceLifecycleDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ClusterServiceLifecycleDie) DieRelease() ClusterServiceLifecycle {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ClusterServiceLifecycleDie) DieReleasePtr() *ClusterServiceLifecycle {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ClusterServiceLifecycleDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ClusterServiceLifecycleDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ClusterServiceLifecycleDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ClusterServiceLifecycleDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterServiceLifecycleDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ClusterServiceLifecycleDie) DieStamp(fn func(r *ClusterServiceLifecycle)) *ClusterServiceLifecycleDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ClusterServiceLifecycleDie) DieStampAt(jp string, fn interface{}) *ClusterServiceLifecycleDie {
	return d.DieStamp(func(r *ClusterServiceLifecycle) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ClusterServiceLifecycleDie) DieWith(fns ...func(d *ClusterServiceLifecycleDie)) *ClusterServiceLifecycleDie {
	nd := ClusterServiceLifecycleBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ClusterServiceLifecycleDie) DeepCopy() *ClusterServiceLifecycleDie {
	r := *d.r.DeepCopy()
	return &ClusterServiceLifecycleDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ClusterServiceLifecycleDie) DieSeal() *ClusterServiceLifecycleDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ClusterServiceLifecycleDie) DieSealFeed(r ClusterServiceLifecycle) *ClusterServiceLifecycleDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ClusterServiceLifecycleDie) DieSealFeedPtr(r *ClusterServiceLifecycle) *ClusterServiceLifecycleDie {
	if r == nil {
		r = &ClusterServiceLifecycle{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ClusterServiceLifecycleDie) DieSealRelease() ClusterServiceLifecycle {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ClusterServiceLifecycleDie) DieSealReleasePtr() *ClusterServiceLifecycle {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ClusterServiceLifecycleDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ClusterServiceLifecycleDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ClusterServiceLifecycleDie)(nil)

func (d *ClusterServiceLifecycleDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ClusterServiceLifecycleDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ClusterServiceLifecycleDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ClusterServiceLifecycleDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ClusterServiceLifecycle{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ClusterServiceLifecycleDie) APIVersion(v string) *ClusterServiceLifecycleDie {
	return d.DieStamp(func(r *ClusterServiceLifecycle) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ClusterServiceLifecycleDie) Kind(v string) *ClusterServiceLifecycleDie {
	return d.DieStamp(func(r *ClusterServiceLifecycle) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ClusterServiceLifecycleDie) TypeMetadata(v v1.TypeMeta) *ClusterServiceLifecycleDie {
	return d.DieStamp(func(r *ClusterServiceLifecycle) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ClusterServiceLifecycleDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *ClusterServiceLifecycleDie {
	return d.DieStamp(func(r *ClusterServiceLifecycle) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ClusterServiceLifecycleDie) Metadata(v v1.ObjectMeta) *ClusterServiceLifecycleDie {
	return d.DieStamp(func(r *ClusterServiceLifecycle) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ClusterServiceLifecycleDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ClusterServiceLifecycleDie {
	return d.DieStamp(func(r *ClusterServiceLifecycle) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *ClusterServiceLifecycleDie) Spec(v ServiceLifecycleSpec) *ClusterServiceLifecycleDie {
	return d.DieStamp(func(r *ClusterServiceLifecycle) {
		r.Spec = v
	})
}

func (d *ClusterServiceLifecycleDie) Status(v ServiceLifecycleStatus) *ClusterServiceLifecycleDie {
	return d.DieStamp(func(r *ClusterServiceLifecycle) {
		r.Status = v
	})
}

var ServiceResourceDefinitionSpecBlank = (&ServiceResourceDefinitionSpecDie{}).DieFeed(ServiceResourceDefinitionSpec{})

type ServiceResourceDefinitionSpecDie struct {
	mutable bool
	r       ServiceResourceDefinitionSpec
	seal    ServiceResourceDefinitionSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceResourceDefinitionSpecDie) DieImmutable(immutable bool) *ServiceResourceDefinitionSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceResourceDefinitionSpecDie) DieFeed(r ServiceResourceDefinitionSpec) *ServiceResourceDefinitionSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceResourceDefinitionSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceResourceDefinitionSpecDie) DieFeedPtr(r *ServiceResourceDefinitionSpec) *ServiceResourceDefinitionSpecDie {
	if r == nil {
		r = &ServiceResourceDefinitionSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceResourceDefinitionSpecDie) DieFeedDuck(v any) *ServiceResourceDefinitionSpecDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceResourceDefinitionSpecDie) DieFeedJSON(j []byte) *ServiceResourceDefinitionSpecDie {
	r := ServiceResourceDefinitionSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceResourceDefinitionSpecDie) DieFeedYAML(y []byte) *ServiceResourceDefinitionSpecDie {
	r := ServiceResourceDefinitionSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceResourceDefinitionSpecDie) DieFeedYAMLFile(name string) *ServiceResourceDefinitionSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceResourceDefinitionSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceResourceDefinitionSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceResourceDefinitionSpecDie) DieRelease() ServiceResourceDefinitionSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceResourceDefinitionSpecDie) DieReleasePtr() *ServiceResourceDefinitionSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceResourceDefinitionSpecDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceResourceDefinitionSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceResourceDefinitionSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceResourceDefinitionSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceResourceDefinitionSpecDie) DieStamp(fn func(r *ServiceResourceDefinitionSpec)) *ServiceResourceDefinitionSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceResourceDefinitionSpecDie) DieStampAt(jp string, fn interface{}) *ServiceResourceDefinitionSpecDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceResourceDefinitionSpecDie) DieWith(fns ...func(d *ServiceResourceDefinitionSpecDie)) *ServiceResourceDefinitionSpecDie {
	nd := ServiceResourceDefinitionSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceResourceDefinitionSpecDie) DeepCopy() *ServiceResourceDefinitionSpecDie {
	r := *d.r.DeepCopy()
	return &ServiceResourceDefinitionSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceResourceDefinitionSpecDie) DieSeal() *ServiceResourceDefinitionSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceResourceDefinitionSpecDie) DieSealFeed(r ServiceResourceDefinitionSpec) *ServiceResourceDefinitionSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceResourceDefinitionSpecDie) DieSealFeedPtr(r *ServiceResourceDefinitionSpec) *ServiceResourceDefinitionSpecDie {
	if r == nil {
		r = &ServiceResourceDefinitionSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceResourceDefinitionSpecDie) DieSealRelease() ServiceResourceDefinitionSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceResourceDefinitionSpecDie) DieSealReleasePtr() *ServiceResourceDefinitionSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceResourceDefinitionSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceResourceDefinitionSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// InstanceNamesDie mutates InstanceNames as a die.
func (d *ServiceResourceDefinitionSpecDie) InstanceNamesDie(fn func(d *ServiceResourceDefinitionNamesDie)) *ServiceResourceDefinitionSpecDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionSpec) {
		d := ServiceResourceDefinitionNamesBlank.DieImmutable(false).DieFeed(r.InstanceNames)
		fn(d)
		r.InstanceNames = d.DieRelease()
	})
}

// ClientNamesDie mutates ClientNames as a die.
func (d *ServiceResourceDefinitionSpecDie) ClientNamesDie(fn func(d *ServiceResourceDefinitionNamesDie)) *ServiceResourceDefinitionSpecDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionSpec) {
		d := ServiceResourceDefinitionNamesBlank.DieImmutable(false).DieFeed(r.ClientNames)
		fn(d)
		r.ClientNames = d.DieRelease()
	})
}

// LifecycleDie mutates Lifecycle as a die.
func (d *ServiceResourceDefinitionSpecDie) LifecycleDie(fn func(d *ServiceLifecycleSpecDie)) *ServiceResourceDefinitionSpecDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionSpec) {
		d := ServiceLifecycleSpecBlank.DieImmutable(false).DieFeed(r.Lifecycle)
		fn(d)
		r.Lifecycle = d.DieRelease()
	})
}

func (d *ServiceResourceDefinitionSpecDie) Group(v string) *ServiceResourceDefinitionSpecDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionSpec) {
		r.Group = v
	})
}

func (d *ServiceResourceDefinitionSpecDie) InstanceNames(v ServiceResourceDefinitionNames) *ServiceResourceDefinitionSpecDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionSpec) {
		r.InstanceNames = v
	})
}

func (d *ServiceResourceDefinitionSpecDie) ClientNames(v ServiceResourceDefinitionNames) *ServiceResourceDefinitionSpecDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionSpec) {
		r.ClientNames = v
	})
}

func (d *ServiceResourceDefinitionSpecDie) Lifecycle(v ServiceLifecycleSpec) *ServiceResourceDefinitionSpecDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionSpec) {
		r.Lifecycle = v
	})
}

var ServiceResourceDefinitionNamesBlank = (&ServiceResourceDefinitionNamesDie{}).DieFeed(ServiceResourceDefinitionNames{})

type ServiceResourceDefinitionNamesDie struct {
	mutable bool
	r       ServiceResourceDefinitionNames
	seal    ServiceResourceDefinitionNames
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceResourceDefinitionNamesDie) DieImmutable(immutable bool) *ServiceResourceDefinitionNamesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceResourceDefinitionNamesDie) DieFeed(r ServiceResourceDefinitionNames) *ServiceResourceDefinitionNamesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceResourceDefinitionNamesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceResourceDefinitionNamesDie) DieFeedPtr(r *ServiceResourceDefinitionNames) *ServiceResourceDefinitionNamesDie {
	if r == nil {
		r = &ServiceResourceDefinitionNames{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceResourceDefinitionNamesDie) DieFeedDuck(v any) *ServiceResourceDefinitionNamesDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceResourceDefinitionNamesDie) DieFeedJSON(j []byte) *ServiceResourceDefinitionNamesDie {
	r := ServiceResourceDefinitionNames{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceResourceDefinitionNamesDie) DieFeedYAML(y []byte) *ServiceResourceDefinitionNamesDie {
	r := ServiceResourceDefinitionNames{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceResourceDefinitionNamesDie) DieFeedYAMLFile(name string) *ServiceResourceDefinitionNamesDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceResourceDefinitionNamesDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceResourceDefinitionNamesDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceResourceDefinitionNamesDie) DieRelease() ServiceResourceDefinitionNames {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceResourceDefinitionNamesDie) DieReleasePtr() *ServiceResourceDefinitionNames {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceResourceDefinitionNamesDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceResourceDefinitionNamesDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceResourceDefinitionNamesDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceResourceDefinitionNamesDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceResourceDefinitionNamesDie) DieStamp(fn func(r *ServiceResourceDefinitionNames)) *ServiceResourceDefinitionNamesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceResourceDefinitionNamesDie) DieStampAt(jp string, fn interface{}) *ServiceResourceDefinitionNamesDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionNames) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceResourceDefinitionNamesDie) DieWith(fns ...func(d *ServiceResourceDefinitionNamesDie)) *ServiceResourceDefinitionNamesDie {
	nd := ServiceResourceDefinitionNamesBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceResourceDefinitionNamesDie) DeepCopy() *ServiceResourceDefinitionNamesDie {
	r := *d.r.DeepCopy()
	return &ServiceResourceDefinitionNamesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceResourceDefinitionNamesDie) DieSeal() *ServiceResourceDefinitionNamesDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceResourceDefinitionNamesDie) DieSealFeed(r ServiceResourceDefinitionNames) *ServiceResourceDefinitionNamesDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceResourceDefinitionNamesDie) DieSealFeedPtr(r *ServiceResourceDefinitionNames) *ServiceResourceDefinitionNamesDie {
	if r == nil {
		r = &ServiceResourceDefinitionNames{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceResourceDefinitionNamesDie) DieSealRelease() ServiceResourceDefinitionNames {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceResourceDefinitionNamesDie) DieSealReleasePtr() *ServiceResourceDefinitionNames {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceResourceDefinitionNamesDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceResourceDefinitionNamesDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// plural is the plural name of the resource to serve.
//
// The custom resources are served under `/apis/<group>/<version>/.../<plural>`.
//
// Must be all lowercase.
func (d *ServiceResourceDefinitionNamesDie) Plural(v string) *ServiceResourceDefinitionNamesDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionNames) {
		r.Plural = v
	})
}

// shortNames are short names for the resource, exposed in API discovery documents,
//
// and used by clients to support invocations like `kubectl get <shortname>`.
//
// It must be all lowercase.
func (d *ServiceResourceDefinitionNamesDie) ShortNames(v ...string) *ServiceResourceDefinitionNamesDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionNames) {
		r.ShortNames = v
	})
}

// kind is the serialized kind of the resource. It is normally CamelCase and singular.
//
// Custom resource instances will use this value as the `kind` attribute in API calls.
func (d *ServiceResourceDefinitionNamesDie) Kind(v string) *ServiceResourceDefinitionNamesDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionNames) {
		r.Kind = v
	})
}

// categories is a list of grouped resources this custom resource belongs to (e.g. 'all').
//
// # This is published in API discovery documents, and used by clients to support invocations like
//
// `kubectl get all`. `wa8s` and `wa8s-services` are added by default.
func (d *ServiceResourceDefinitionNamesDie) Categories(v ...string) *ServiceResourceDefinitionNamesDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionNames) {
		r.Categories = v
	})
}

var ServiceResourceDefinitionStatusBlank = (&ServiceResourceDefinitionStatusDie{}).DieFeed(ServiceResourceDefinitionStatus{})

type ServiceResourceDefinitionStatusDie struct {
	mutable bool
	r       ServiceResourceDefinitionStatus
	seal    ServiceResourceDefinitionStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceResourceDefinitionStatusDie) DieImmutable(immutable bool) *ServiceResourceDefinitionStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceResourceDefinitionStatusDie) DieFeed(r ServiceResourceDefinitionStatus) *ServiceResourceDefinitionStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceResourceDefinitionStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceResourceDefinitionStatusDie) DieFeedPtr(r *ServiceResourceDefinitionStatus) *ServiceResourceDefinitionStatusDie {
	if r == nil {
		r = &ServiceResourceDefinitionStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceResourceDefinitionStatusDie) DieFeedDuck(v any) *ServiceResourceDefinitionStatusDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceResourceDefinitionStatusDie) DieFeedJSON(j []byte) *ServiceResourceDefinitionStatusDie {
	r := ServiceResourceDefinitionStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceResourceDefinitionStatusDie) DieFeedYAML(y []byte) *ServiceResourceDefinitionStatusDie {
	r := ServiceResourceDefinitionStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceResourceDefinitionStatusDie) DieFeedYAMLFile(name string) *ServiceResourceDefinitionStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceResourceDefinitionStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceResourceDefinitionStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceResourceDefinitionStatusDie) DieRelease() ServiceResourceDefinitionStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceResourceDefinitionStatusDie) DieReleasePtr() *ServiceResourceDefinitionStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceResourceDefinitionStatusDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceResourceDefinitionStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceResourceDefinitionStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceResourceDefinitionStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceResourceDefinitionStatusDie) DieStamp(fn func(r *ServiceResourceDefinitionStatus)) *ServiceResourceDefinitionStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceResourceDefinitionStatusDie) DieStampAt(jp string, fn interface{}) *ServiceResourceDefinitionStatusDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceResourceDefinitionStatusDie) DieWith(fns ...func(d *ServiceResourceDefinitionStatusDie)) *ServiceResourceDefinitionStatusDie {
	nd := ServiceResourceDefinitionStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceResourceDefinitionStatusDie) DeepCopy() *ServiceResourceDefinitionStatusDie {
	r := *d.r.DeepCopy()
	return &ServiceResourceDefinitionStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceResourceDefinitionStatusDie) DieSeal() *ServiceResourceDefinitionStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceResourceDefinitionStatusDie) DieSealFeed(r ServiceResourceDefinitionStatus) *ServiceResourceDefinitionStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceResourceDefinitionStatusDie) DieSealFeedPtr(r *ServiceResourceDefinitionStatus) *ServiceResourceDefinitionStatusDie {
	if r == nil {
		r = &ServiceResourceDefinitionStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceResourceDefinitionStatusDie) DieSealRelease() ServiceResourceDefinitionStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceResourceDefinitionStatusDie) DieSealReleasePtr() *ServiceResourceDefinitionStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceResourceDefinitionStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceResourceDefinitionStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *ServiceResourceDefinitionStatusDie) Status(v apis.Status) *ServiceResourceDefinitionStatusDie {
	return d.DieStamp(func(r *ServiceResourceDefinitionStatus) {
		r.Status = v
	})
}

var ServiceResourceDefinitionBlank = (&ServiceResourceDefinitionDie{}).DieFeed(ServiceResourceDefinition{})

type ServiceResourceDefinitionDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       ServiceResourceDefinition
	seal    ServiceResourceDefinition
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceResourceDefinitionDie) DieImmutable(immutable bool) *ServiceResourceDefinitionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceResourceDefinitionDie) DieFeed(r ServiceResourceDefinition) *ServiceResourceDefinitionDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceResourceDefinitionDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceResourceDefinitionDie) DieFeedPtr(r *ServiceResourceDefinition) *ServiceResourceDefinitionDie {
	if r == nil {
		r = &ServiceResourceDefinition{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceResourceDefinitionDie) DieFeedDuck(v any) *ServiceResourceDefinitionDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceResourceDefinitionDie) DieFeedJSON(j []byte) *ServiceResourceDefinitionDie {
	r := ServiceResourceDefinition{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceResourceDefinitionDie) DieFeedYAML(y []byte) *ServiceResourceDefinitionDie {
	r := ServiceResourceDefinition{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceResourceDefinitionDie) DieFeedYAMLFile(name string) *ServiceResourceDefinitionDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceResourceDefinitionDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceResourceDefinitionDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceResourceDefinitionDie) DieRelease() ServiceResourceDefinition {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceResourceDefinitionDie) DieReleasePtr() *ServiceResourceDefinition {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ServiceResourceDefinitionDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceResourceDefinitionDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceResourceDefinitionDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceResourceDefinitionDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceResourceDefinitionDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceResourceDefinitionDie) DieStamp(fn func(r *ServiceResourceDefinition)) *ServiceResourceDefinitionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceResourceDefinitionDie) DieStampAt(jp string, fn interface{}) *ServiceResourceDefinitionDie {
	return d.DieStamp(func(r *ServiceResourceDefinition) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceResourceDefinitionDie) DieWith(fns ...func(d *ServiceResourceDefinitionDie)) *ServiceResourceDefinitionDie {
	nd := ServiceResourceDefinitionBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceResourceDefinitionDie) DeepCopy() *ServiceResourceDefinitionDie {
	r := *d.r.DeepCopy()
	return &ServiceResourceDefinitionDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceResourceDefinitionDie) DieSeal() *ServiceResourceDefinitionDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceResourceDefinitionDie) DieSealFeed(r ServiceResourceDefinition) *ServiceResourceDefinitionDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceResourceDefinitionDie) DieSealFeedPtr(r *ServiceResourceDefinition) *ServiceResourceDefinitionDie {
	if r == nil {
		r = &ServiceResourceDefinition{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceResourceDefinitionDie) DieSealRelease() ServiceResourceDefinition {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceResourceDefinitionDie) DieSealReleasePtr() *ServiceResourceDefinition {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceResourceDefinitionDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceResourceDefinitionDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ServiceResourceDefinitionDie)(nil)

func (d *ServiceResourceDefinitionDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ServiceResourceDefinitionDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceResourceDefinitionDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceResourceDefinitionDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ServiceResourceDefinition{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ServiceResourceDefinitionDie) APIVersion(v string) *ServiceResourceDefinitionDie {
	return d.DieStamp(func(r *ServiceResourceDefinition) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceResourceDefinitionDie) Kind(v string) *ServiceResourceDefinitionDie {
	return d.DieStamp(func(r *ServiceResourceDefinition) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ServiceResourceDefinitionDie) TypeMetadata(v v1.TypeMeta) *ServiceResourceDefinitionDie {
	return d.DieStamp(func(r *ServiceResourceDefinition) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ServiceResourceDefinitionDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *ServiceResourceDefinitionDie {
	return d.DieStamp(func(r *ServiceResourceDefinition) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ServiceResourceDefinitionDie) Metadata(v v1.ObjectMeta) *ServiceResourceDefinitionDie {
	return d.DieStamp(func(r *ServiceResourceDefinition) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ServiceResourceDefinitionDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceResourceDefinitionDie {
	return d.DieStamp(func(r *ServiceResourceDefinition) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ServiceResourceDefinitionDie) SpecDie(fn func(d *ServiceResourceDefinitionSpecDie)) *ServiceResourceDefinitionDie {
	return d.DieStamp(func(r *ServiceResourceDefinition) {
		d := ServiceResourceDefinitionSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ServiceResourceDefinitionDie) StatusDie(fn func(d *ServiceResourceDefinitionStatusDie)) *ServiceResourceDefinitionDie {
	return d.DieStamp(func(r *ServiceResourceDefinition) {
		d := ServiceResourceDefinitionStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ServiceResourceDefinitionDie) Spec(v ServiceResourceDefinitionSpec) *ServiceResourceDefinitionDie {
	return d.DieStamp(func(r *ServiceResourceDefinition) {
		r.Spec = v
	})
}

func (d *ServiceResourceDefinitionDie) Status(v ServiceResourceDefinitionStatus) *ServiceResourceDefinitionDie {
	return d.DieStamp(func(r *ServiceResourceDefinition) {
		r.Status = v
	})
}
