//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2025 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1alpha1

import (
	testingx "testing"

	testing "reconciler.io/dies/testing"
)

func TestComponentReferenceDie_MissingMethods(t *testingx.T) {
	die := ComponentReferenceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ComponentReferenceDie: %s", diff.List())
	}
}

func TestComponentSpecDie_MissingMethods(t *testingx.T) {
	die := ComponentSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ComponentSpecDie: %s", diff.List())
	}
}

func TestOCIReferenceDie_MissingMethods(t *testingx.T) {
	die := OCIReferenceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for OCIReferenceDie: %s", diff.List())
	}
}

func TestComponentStatusDie_MissingMethods(t *testingx.T) {
	die := ComponentStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ComponentStatusDie: %s", diff.List())
	}
}

func TestComponentDie_MissingMethods(t *testingx.T) {
	die := ComponentBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ComponentDie: %s", diff.List())
	}
}

func TestClusterComponentDie_MissingMethods(t *testingx.T) {
	die := ClusterComponentBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ClusterComponentDie: %s", diff.List())
	}
}

func TestCompositionSpecDie_MissingMethods(t *testingx.T) {
	die := CompositionSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CompositionSpecDie: %s", diff.List())
	}
}

func TestGenericCompositionSpecDie_MissingMethods(t *testingx.T) {
	die := GenericCompositionSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for GenericCompositionSpecDie: %s", diff.List())
	}
}

func TestCompositionPlugDie_MissingMethods(t *testingx.T) {
	die := CompositionPlugBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CompositionPlugDie: %s", diff.List())
	}
}

func TestCompositionDependencyDie_MissingMethods(t *testingx.T) {
	die := CompositionDependencyBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CompositionDependencyDie: %s", diff.List())
	}
}

func TestCompositionStatusDie_MissingMethods(t *testingx.T) {
	die := CompositionStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CompositionStatusDie: %s", diff.List())
	}
}

func TestCompositionDependencyStatusDie_MissingMethods(t *testingx.T) {
	die := CompositionDependencyStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CompositionDependencyStatusDie: %s", diff.List())
	}
}

func TestCompositionDie_MissingMethods(t *testingx.T) {
	die := CompositionBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CompositionDie: %s", diff.List())
	}
}

func TestConfigStoreSpecDie_MissingMethods(t *testingx.T) {
	die := ConfigStoreSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ConfigStoreSpecDie: %s", diff.List())
	}
}

func TestGenericConfigStoreSpecDie_MissingMethods(t *testingx.T) {
	die := GenericConfigStoreSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for GenericConfigStoreSpecDie: %s", diff.List())
	}
}

func TestValueDie_MissingMethods(t *testingx.T) {
	die := ValueBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ValueDie: %s", diff.List())
	}
}

func TestValueFromDie_MissingMethods(t *testingx.T) {
	die := ValueFromBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ValueFromDie: %s", diff.List())
	}
}

func TestValuesFromDie_MissingMethods(t *testingx.T) {
	die := ValuesFromBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ValuesFromDie: %s", diff.List())
	}
}

func TestConfigStoreStatusDie_MissingMethods(t *testingx.T) {
	die := ConfigStoreStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ConfigStoreStatusDie: %s", diff.List())
	}
}

func TestConfigStoreDie_MissingMethods(t *testingx.T) {
	die := ConfigStoreBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ConfigStoreDie: %s", diff.List())
	}
}

func TestGenericComponentSpecDie_MissingMethods(t *testingx.T) {
	die := GenericComponentSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for GenericComponentSpecDie: %s", diff.List())
	}
}

func TestGenericComponentStatusDie_MissingMethods(t *testingx.T) {
	die := GenericComponentStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for GenericComponentStatusDie: %s", diff.List())
	}
}

func TestWITDie_MissingMethods(t *testingx.T) {
	die := WITBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for WITDie: %s", diff.List())
	}
}

func TestComponentSpanDie_MissingMethods(t *testingx.T) {
	die := ComponentSpanBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ComponentSpanDie: %s", diff.List())
	}
}

func TestComponentDuckSpecDie_MissingMethods(t *testingx.T) {
	die := ComponentDuckSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ComponentDuckSpecDie: %s", diff.List())
	}
}

func TestComponentDuckStatusDie_MissingMethods(t *testingx.T) {
	die := ComponentDuckStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ComponentDuckStatusDie: %s", diff.List())
	}
}

func TestComponentDuckDie_MissingMethods(t *testingx.T) {
	die := ComponentDuckBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ComponentDuckDie: %s", diff.List())
	}
}
