//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2025 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1alpha1

import (
	fmtx "fmt"
	osx "os"
	reflectx "reflect"

	cmp "github.com/google/go-cmp/cmp"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	json "k8s.io/apimachinery/pkg/util/json"
	jsonpath "k8s.io/client-go/util/jsonpath"
	v1 "reconciler.io/dies/apis/meta/v1"
	patch "reconciler.io/dies/patch"
	"reconciler.io/runtime/apis"
	registriesv1alpha1 "reconciler.io/wa8s/apis/registries/v1alpha1"
	yaml "sigs.k8s.io/yaml"
)

var ComponentReferenceBlank = (&ComponentReferenceDie{}).DieFeed(ComponentReference{})

type ComponentReferenceDie struct {
	mutable bool
	r       ComponentReference
	seal    ComponentReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ComponentReferenceDie) DieImmutable(immutable bool) *ComponentReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ComponentReferenceDie) DieFeed(r ComponentReference) *ComponentReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ComponentReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ComponentReferenceDie) DieFeedPtr(r *ComponentReference) *ComponentReferenceDie {
	if r == nil {
		r = &ComponentReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ComponentReferenceDie) DieFeedJSON(j []byte) *ComponentReferenceDie {
	r := ComponentReference{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ComponentReferenceDie) DieFeedYAML(y []byte) *ComponentReferenceDie {
	r := ComponentReference{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ComponentReferenceDie) DieFeedYAMLFile(name string) *ComponentReferenceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *ComponentReferenceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ComponentReferenceDie) DieRelease() ComponentReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ComponentReferenceDie) DieReleasePtr() *ComponentReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ComponentReferenceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ComponentReferenceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ComponentReferenceDie) DieStamp(fn func(r *ComponentReference)) *ComponentReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ComponentReferenceDie) DieStampAt(jp string, fn interface{}) *ComponentReferenceDie {
	return d.DieStamp(func(r *ComponentReference) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ComponentReferenceDie) DieWith(fns ...func(d *ComponentReferenceDie)) *ComponentReferenceDie {
	nd := ComponentReferenceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ComponentReferenceDie) DeepCopy() *ComponentReferenceDie {
	r := *d.r.DeepCopy()
	return &ComponentReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ComponentReferenceDie) DieSeal() *ComponentReferenceDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ComponentReferenceDie) DieSealFeed(r ComponentReference) *ComponentReferenceDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ComponentReferenceDie) DieSealFeedPtr(r *ComponentReference) *ComponentReferenceDie {
	if r == nil {
		r = &ComponentReference{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ComponentReferenceDie) DieSealRelease() ComponentReference {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ComponentReferenceDie) DieSealReleasePtr() *ComponentReference {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ComponentReferenceDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ComponentReferenceDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *ComponentReferenceDie) APIVersion(v string) *ComponentReferenceDie {
	return d.DieStamp(func(r *ComponentReference) {
		r.APIVersion = v
	})
}

func (d *ComponentReferenceDie) Kind(v string) *ComponentReferenceDie {
	return d.DieStamp(func(r *ComponentReference) {
		r.Kind = v
	})
}

func (d *ComponentReferenceDie) Namespace(v string) *ComponentReferenceDie {
	return d.DieStamp(func(r *ComponentReference) {
		r.Namespace = v
	})
}

func (d *ComponentReferenceDie) Name(v string) *ComponentReferenceDie {
	return d.DieStamp(func(r *ComponentReference) {
		r.Name = v
	})
}

var ComponentSpecBlank = (&ComponentSpecDie{}).DieFeed(ComponentSpec{})

type ComponentSpecDie struct {
	mutable bool
	r       ComponentSpec
	seal    ComponentSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ComponentSpecDie) DieImmutable(immutable bool) *ComponentSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ComponentSpecDie) DieFeed(r ComponentSpec) *ComponentSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ComponentSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ComponentSpecDie) DieFeedPtr(r *ComponentSpec) *ComponentSpecDie {
	if r == nil {
		r = &ComponentSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ComponentSpecDie) DieFeedJSON(j []byte) *ComponentSpecDie {
	r := ComponentSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ComponentSpecDie) DieFeedYAML(y []byte) *ComponentSpecDie {
	r := ComponentSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ComponentSpecDie) DieFeedYAMLFile(name string) *ComponentSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ComponentSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ComponentSpecDie) DieRelease() ComponentSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ComponentSpecDie) DieReleasePtr() *ComponentSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ComponentSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ComponentSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ComponentSpecDie) DieStamp(fn func(r *ComponentSpec)) *ComponentSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ComponentSpecDie) DieStampAt(jp string, fn interface{}) *ComponentSpecDie {
	return d.DieStamp(func(r *ComponentSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ComponentSpecDie) DieWith(fns ...func(d *ComponentSpecDie)) *ComponentSpecDie {
	nd := ComponentSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ComponentSpecDie) DeepCopy() *ComponentSpecDie {
	r := *d.r.DeepCopy()
	return &ComponentSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ComponentSpecDie) DieSeal() *ComponentSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ComponentSpecDie) DieSealFeed(r ComponentSpec) *ComponentSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ComponentSpecDie) DieSealFeedPtr(r *ComponentSpec) *ComponentSpecDie {
	if r == nil {
		r = &ComponentSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ComponentSpecDie) DieSealRelease() ComponentSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ComponentSpecDie) DieSealReleasePtr() *ComponentSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ComponentSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ComponentSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentSpecDie mutates GenericComponentSpec as a die.
func (d *ComponentSpecDie) GenericComponentSpecDie(fn func(d *GenericComponentSpecDie)) *ComponentSpecDie {
	return d.DieStamp(func(r *ComponentSpec) {
		d := GenericComponentSpecBlank.DieImmutable(false).DieFeed(r.GenericComponentSpec)
		fn(d)
		r.GenericComponentSpec = d.DieRelease()
	})
}

// OCIDie mutates OCI as a die.
//
// OCI image to pull component from
func (d *ComponentSpecDie) OCIDie(fn func(d *OCIReferenceDie)) *ComponentSpecDie {
	return d.DieStamp(func(r *ComponentSpec) {
		d := OCIReferenceBlank.DieImmutable(false).DieFeedPtr(r.OCI)
		fn(d)
		r.OCI = d.DieReleasePtr()
	})
}

// RefDie mutates Ref as a die.
//
// Ref to another component
func (d *ComponentSpecDie) RefDie(fn func(d *ComponentReferenceDie)) *ComponentSpecDie {
	return d.DieStamp(func(r *ComponentSpec) {
		d := ComponentReferenceBlank.DieImmutable(false).DieFeedPtr(r.Ref)
		fn(d)
		r.Ref = d.DieReleasePtr()
	})
}

func (d *ComponentSpecDie) GenericComponentSpec(v GenericComponentSpec) *ComponentSpecDie {
	return d.DieStamp(func(r *ComponentSpec) {
		r.GenericComponentSpec = v
	})
}

// OCI image to pull component from
func (d *ComponentSpecDie) OCI(v *OCIReference) *ComponentSpecDie {
	return d.DieStamp(func(r *ComponentSpec) {
		r.OCI = v
	})
}

// Ref to another component
func (d *ComponentSpecDie) Ref(v *ComponentReference) *ComponentSpecDie {
	return d.DieStamp(func(r *ComponentSpec) {
		r.Ref = v
	})
}

var OCIReferenceBlank = (&OCIReferenceDie{}).DieFeed(OCIReference{})

type OCIReferenceDie struct {
	mutable bool
	r       OCIReference
	seal    OCIReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *OCIReferenceDie) DieImmutable(immutable bool) *OCIReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *OCIReferenceDie) DieFeed(r OCIReference) *OCIReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &OCIReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *OCIReferenceDie) DieFeedPtr(r *OCIReference) *OCIReferenceDie {
	if r == nil {
		r = &OCIReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *OCIReferenceDie) DieFeedJSON(j []byte) *OCIReferenceDie {
	r := OCIReference{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *OCIReferenceDie) DieFeedYAML(y []byte) *OCIReferenceDie {
	r := OCIReference{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *OCIReferenceDie) DieFeedYAMLFile(name string) *OCIReferenceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *OCIReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *OCIReferenceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *OCIReferenceDie) DieRelease() OCIReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *OCIReferenceDie) DieReleasePtr() *OCIReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *OCIReferenceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *OCIReferenceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *OCIReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *OCIReferenceDie) DieStamp(fn func(r *OCIReference)) *OCIReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *OCIReferenceDie) DieStampAt(jp string, fn interface{}) *OCIReferenceDie {
	return d.DieStamp(func(r *OCIReference) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *OCIReferenceDie) DieWith(fns ...func(d *OCIReferenceDie)) *OCIReferenceDie {
	nd := OCIReferenceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *OCIReferenceDie) DeepCopy() *OCIReferenceDie {
	r := *d.r.DeepCopy()
	return &OCIReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *OCIReferenceDie) DieSeal() *OCIReferenceDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *OCIReferenceDie) DieSealFeed(r OCIReference) *OCIReferenceDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *OCIReferenceDie) DieSealFeedPtr(r *OCIReference) *OCIReferenceDie {
	if r == nil {
		r = &OCIReference{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *OCIReferenceDie) DieSealRelease() OCIReference {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *OCIReferenceDie) DieSealReleasePtr() *OCIReference {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *OCIReferenceDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *OCIReferenceDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// ServiceAccountRefDie mutates ServiceAccountRef as a die.
//
// ServiceAccountRef references the service account holding image pull secrets for the image
func (d *OCIReferenceDie) ServiceAccountRefDie(fn func(d *registriesv1alpha1.ServiceAccountReferenceDie)) *OCIReferenceDie {
	return d.DieStamp(func(r *OCIReference) {
		d := registriesv1alpha1.ServiceAccountReferenceBlank.DieImmutable(false).DieFeed(r.ServiceAccountRef)
		fn(d)
		r.ServiceAccountRef = d.DieRelease()
	})
}

// Image in an oci repository holding a wasm component
func (d *OCIReferenceDie) Image(v string) *OCIReferenceDie {
	return d.DieStamp(func(r *OCIReference) {
		r.Image = v
	})
}

// ServiceAccountRef references the service account holding image pull secrets for the image
func (d *OCIReferenceDie) ServiceAccountRef(v registriesv1alpha1.ServiceAccountReference) *OCIReferenceDie {
	return d.DieStamp(func(r *OCIReference) {
		r.ServiceAccountRef = v
	})
}

var ComponentStatusBlank = (&ComponentStatusDie{}).DieFeed(ComponentStatus{})

type ComponentStatusDie struct {
	mutable bool
	r       ComponentStatus
	seal    ComponentStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ComponentStatusDie) DieImmutable(immutable bool) *ComponentStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ComponentStatusDie) DieFeed(r ComponentStatus) *ComponentStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ComponentStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ComponentStatusDie) DieFeedPtr(r *ComponentStatus) *ComponentStatusDie {
	if r == nil {
		r = &ComponentStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ComponentStatusDie) DieFeedJSON(j []byte) *ComponentStatusDie {
	r := ComponentStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ComponentStatusDie) DieFeedYAML(y []byte) *ComponentStatusDie {
	r := ComponentStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ComponentStatusDie) DieFeedYAMLFile(name string) *ComponentStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ComponentStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ComponentStatusDie) DieRelease() ComponentStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ComponentStatusDie) DieReleasePtr() *ComponentStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ComponentStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ComponentStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ComponentStatusDie) DieStamp(fn func(r *ComponentStatus)) *ComponentStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ComponentStatusDie) DieStampAt(jp string, fn interface{}) *ComponentStatusDie {
	return d.DieStamp(func(r *ComponentStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ComponentStatusDie) DieWith(fns ...func(d *ComponentStatusDie)) *ComponentStatusDie {
	nd := ComponentStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ComponentStatusDie) DeepCopy() *ComponentStatusDie {
	r := *d.r.DeepCopy()
	return &ComponentStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ComponentStatusDie) DieSeal() *ComponentStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ComponentStatusDie) DieSealFeed(r ComponentStatus) *ComponentStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ComponentStatusDie) DieSealFeedPtr(r *ComponentStatus) *ComponentStatusDie {
	if r == nil {
		r = &ComponentStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ComponentStatusDie) DieSealRelease() ComponentStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ComponentStatusDie) DieSealReleasePtr() *ComponentStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ComponentStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ComponentStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentStatusDie mutates GenericComponentStatus as a die.
func (d *ComponentStatusDie) GenericComponentStatusDie(fn func(d *GenericComponentStatusDie)) *ComponentStatusDie {
	return d.DieStamp(func(r *ComponentStatus) {
		d := GenericComponentStatusBlank.DieImmutable(false).DieFeed(r.GenericComponentStatus)
		fn(d)
		r.GenericComponentStatus = d.DieRelease()
	})
}

func (d *ComponentStatusDie) Status(v apis.Status) *ComponentStatusDie {
	return d.DieStamp(func(r *ComponentStatus) {
		r.Status = v
	})
}

func (d *ComponentStatusDie) GenericComponentStatus(v GenericComponentStatus) *ComponentStatusDie {
	return d.DieStamp(func(r *ComponentStatus) {
		r.GenericComponentStatus = v
	})
}

var ComponentBlank = (&ComponentDie{}).DieFeed(Component{})

type ComponentDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       Component
	seal    Component
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ComponentDie) DieImmutable(immutable bool) *ComponentDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ComponentDie) DieFeed(r Component) *ComponentDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ComponentDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ComponentDie) DieFeedPtr(r *Component) *ComponentDie {
	if r == nil {
		r = &Component{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ComponentDie) DieFeedJSON(j []byte) *ComponentDie {
	r := Component{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ComponentDie) DieFeedYAML(y []byte) *ComponentDie {
	r := Component{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ComponentDie) DieFeedYAMLFile(name string) *ComponentDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentDie) DieFeedRawExtension(raw runtime.RawExtension) *ComponentDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ComponentDie) DieRelease() Component {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ComponentDie) DieReleasePtr() *Component {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ComponentDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ComponentDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ComponentDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ComponentDie) DieStamp(fn func(r *Component)) *ComponentDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ComponentDie) DieStampAt(jp string, fn interface{}) *ComponentDie {
	return d.DieStamp(func(r *Component) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ComponentDie) DieWith(fns ...func(d *ComponentDie)) *ComponentDie {
	nd := ComponentBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ComponentDie) DeepCopy() *ComponentDie {
	r := *d.r.DeepCopy()
	return &ComponentDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ComponentDie) DieSeal() *ComponentDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ComponentDie) DieSealFeed(r Component) *ComponentDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ComponentDie) DieSealFeedPtr(r *Component) *ComponentDie {
	if r == nil {
		r = &Component{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ComponentDie) DieSealRelease() Component {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ComponentDie) DieSealReleasePtr() *Component {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ComponentDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ComponentDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ComponentDie)(nil)

func (d *ComponentDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ComponentDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ComponentDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ComponentDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &Component{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ComponentDie) APIVersion(v string) *ComponentDie {
	return d.DieStamp(func(r *Component) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ComponentDie) Kind(v string) *ComponentDie {
	return d.DieStamp(func(r *Component) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ComponentDie) TypeMetadata(v metav1.TypeMeta) *ComponentDie {
	return d.DieStamp(func(r *Component) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ComponentDie) TypeMetadataDie(fn func(d *v1.TypeMetaDie)) *ComponentDie {
	return d.DieStamp(func(r *Component) {
		d := v1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ComponentDie) Metadata(v metav1.ObjectMeta) *ComponentDie {
	return d.DieStamp(func(r *Component) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ComponentDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *ComponentDie {
	return d.DieStamp(func(r *Component) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ComponentDie) SpecDie(fn func(d *ComponentSpecDie)) *ComponentDie {
	return d.DieStamp(func(r *Component) {
		d := ComponentSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ComponentDie) StatusDie(fn func(d *ComponentStatusDie)) *ComponentDie {
	return d.DieStamp(func(r *Component) {
		d := ComponentStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ComponentDie) Spec(v ComponentSpec) *ComponentDie {
	return d.DieStamp(func(r *Component) {
		r.Spec = v
	})
}

func (d *ComponentDie) Status(v ComponentStatus) *ComponentDie {
	return d.DieStamp(func(r *Component) {
		r.Status = v
	})
}

var ClusterComponentBlank = (&ClusterComponentDie{}).DieFeed(ClusterComponent{})

type ClusterComponentDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       ClusterComponent
	seal    ClusterComponent
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ClusterComponentDie) DieImmutable(immutable bool) *ClusterComponentDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ClusterComponentDie) DieFeed(r ClusterComponent) *ClusterComponentDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ClusterComponentDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ClusterComponentDie) DieFeedPtr(r *ClusterComponent) *ClusterComponentDie {
	if r == nil {
		r = &ClusterComponent{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ClusterComponentDie) DieFeedJSON(j []byte) *ClusterComponentDie {
	r := ClusterComponent{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ClusterComponentDie) DieFeedYAML(y []byte) *ClusterComponentDie {
	r := ClusterComponent{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ClusterComponentDie) DieFeedYAMLFile(name string) *ClusterComponentDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterComponentDie) DieFeedRawExtension(raw runtime.RawExtension) *ClusterComponentDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ClusterComponentDie) DieRelease() ClusterComponent {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ClusterComponentDie) DieReleasePtr() *ClusterComponent {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ClusterComponentDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ClusterComponentDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ClusterComponentDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterComponentDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ClusterComponentDie) DieStamp(fn func(r *ClusterComponent)) *ClusterComponentDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ClusterComponentDie) DieStampAt(jp string, fn interface{}) *ClusterComponentDie {
	return d.DieStamp(func(r *ClusterComponent) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ClusterComponentDie) DieWith(fns ...func(d *ClusterComponentDie)) *ClusterComponentDie {
	nd := ClusterComponentBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ClusterComponentDie) DeepCopy() *ClusterComponentDie {
	r := *d.r.DeepCopy()
	return &ClusterComponentDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ClusterComponentDie) DieSeal() *ClusterComponentDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ClusterComponentDie) DieSealFeed(r ClusterComponent) *ClusterComponentDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ClusterComponentDie) DieSealFeedPtr(r *ClusterComponent) *ClusterComponentDie {
	if r == nil {
		r = &ClusterComponent{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ClusterComponentDie) DieSealRelease() ClusterComponent {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ClusterComponentDie) DieSealReleasePtr() *ClusterComponent {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ClusterComponentDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ClusterComponentDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ClusterComponentDie)(nil)

func (d *ClusterComponentDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ClusterComponentDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ClusterComponentDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ClusterComponentDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ClusterComponent{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ClusterComponentDie) APIVersion(v string) *ClusterComponentDie {
	return d.DieStamp(func(r *ClusterComponent) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ClusterComponentDie) Kind(v string) *ClusterComponentDie {
	return d.DieStamp(func(r *ClusterComponent) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ClusterComponentDie) TypeMetadata(v metav1.TypeMeta) *ClusterComponentDie {
	return d.DieStamp(func(r *ClusterComponent) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ClusterComponentDie) TypeMetadataDie(fn func(d *v1.TypeMetaDie)) *ClusterComponentDie {
	return d.DieStamp(func(r *ClusterComponent) {
		d := v1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ClusterComponentDie) Metadata(v metav1.ObjectMeta) *ClusterComponentDie {
	return d.DieStamp(func(r *ClusterComponent) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ClusterComponentDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *ClusterComponentDie {
	return d.DieStamp(func(r *ClusterComponent) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *ClusterComponentDie) Spec(v ComponentSpec) *ClusterComponentDie {
	return d.DieStamp(func(r *ClusterComponent) {
		r.Spec = v
	})
}

func (d *ClusterComponentDie) Status(v ComponentStatus) *ClusterComponentDie {
	return d.DieStamp(func(r *ClusterComponent) {
		r.Status = v
	})
}

var CompositionSpecBlank = (&CompositionSpecDie{}).DieFeed(CompositionSpec{})

type CompositionSpecDie struct {
	mutable bool
	r       CompositionSpec
	seal    CompositionSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CompositionSpecDie) DieImmutable(immutable bool) *CompositionSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CompositionSpecDie) DieFeed(r CompositionSpec) *CompositionSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CompositionSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CompositionSpecDie) DieFeedPtr(r *CompositionSpec) *CompositionSpecDie {
	if r == nil {
		r = &CompositionSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CompositionSpecDie) DieFeedJSON(j []byte) *CompositionSpecDie {
	r := CompositionSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CompositionSpecDie) DieFeedYAML(y []byte) *CompositionSpecDie {
	r := CompositionSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CompositionSpecDie) DieFeedYAMLFile(name string) *CompositionSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *CompositionSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CompositionSpecDie) DieRelease() CompositionSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CompositionSpecDie) DieReleasePtr() *CompositionSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CompositionSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CompositionSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CompositionSpecDie) DieStamp(fn func(r *CompositionSpec)) *CompositionSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CompositionSpecDie) DieStampAt(jp string, fn interface{}) *CompositionSpecDie {
	return d.DieStamp(func(r *CompositionSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CompositionSpecDie) DieWith(fns ...func(d *CompositionSpecDie)) *CompositionSpecDie {
	nd := CompositionSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CompositionSpecDie) DeepCopy() *CompositionSpecDie {
	r := *d.r.DeepCopy()
	return &CompositionSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *CompositionSpecDie) DieSeal() *CompositionSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *CompositionSpecDie) DieSealFeed(r CompositionSpec) *CompositionSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *CompositionSpecDie) DieSealFeedPtr(r *CompositionSpec) *CompositionSpecDie {
	if r == nil {
		r = &CompositionSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *CompositionSpecDie) DieSealRelease() CompositionSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *CompositionSpecDie) DieSealReleasePtr() *CompositionSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *CompositionSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *CompositionSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentSpecDie mutates GenericComponentSpec as a die.
func (d *CompositionSpecDie) GenericComponentSpecDie(fn func(d *GenericComponentSpecDie)) *CompositionSpecDie {
	return d.DieStamp(func(r *CompositionSpec) {
		d := GenericComponentSpecBlank.DieImmutable(false).DieFeed(r.GenericComponentSpec)
		fn(d)
		r.GenericComponentSpec = d.DieRelease()
	})
}

// GenericCompositionSpecDie mutates GenericCompositionSpec as a die.
func (d *CompositionSpecDie) GenericCompositionSpecDie(fn func(d *GenericCompositionSpecDie)) *CompositionSpecDie {
	return d.DieStamp(func(r *CompositionSpec) {
		d := GenericCompositionSpecBlank.DieImmutable(false).DieFeed(r.GenericCompositionSpec)
		fn(d)
		r.GenericCompositionSpec = d.DieRelease()
	})
}

func (d *CompositionSpecDie) GenericComponentSpec(v GenericComponentSpec) *CompositionSpecDie {
	return d.DieStamp(func(r *CompositionSpec) {
		r.GenericComponentSpec = v
	})
}

func (d *CompositionSpecDie) GenericCompositionSpec(v GenericCompositionSpec) *CompositionSpecDie {
	return d.DieStamp(func(r *CompositionSpec) {
		r.GenericCompositionSpec = v
	})
}

var GenericCompositionSpecBlank = (&GenericCompositionSpecDie{}).DieFeed(GenericCompositionSpec{})

type GenericCompositionSpecDie struct {
	mutable bool
	r       GenericCompositionSpec
	seal    GenericCompositionSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GenericCompositionSpecDie) DieImmutable(immutable bool) *GenericCompositionSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GenericCompositionSpecDie) DieFeed(r GenericCompositionSpec) *GenericCompositionSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GenericCompositionSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GenericCompositionSpecDie) DieFeedPtr(r *GenericCompositionSpec) *GenericCompositionSpecDie {
	if r == nil {
		r = &GenericCompositionSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *GenericCompositionSpecDie) DieFeedJSON(j []byte) *GenericCompositionSpecDie {
	r := GenericCompositionSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *GenericCompositionSpecDie) DieFeedYAML(y []byte) *GenericCompositionSpecDie {
	r := GenericCompositionSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *GenericCompositionSpecDie) DieFeedYAMLFile(name string) *GenericCompositionSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericCompositionSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *GenericCompositionSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *GenericCompositionSpecDie) DieRelease() GenericCompositionSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GenericCompositionSpecDie) DieReleasePtr() *GenericCompositionSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *GenericCompositionSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *GenericCompositionSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericCompositionSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GenericCompositionSpecDie) DieStamp(fn func(r *GenericCompositionSpec)) *GenericCompositionSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *GenericCompositionSpecDie) DieStampAt(jp string, fn interface{}) *GenericCompositionSpecDie {
	return d.DieStamp(func(r *GenericCompositionSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *GenericCompositionSpecDie) DieWith(fns ...func(d *GenericCompositionSpecDie)) *GenericCompositionSpecDie {
	nd := GenericCompositionSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GenericCompositionSpecDie) DeepCopy() *GenericCompositionSpecDie {
	r := *d.r.DeepCopy()
	return &GenericCompositionSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *GenericCompositionSpecDie) DieSeal() *GenericCompositionSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *GenericCompositionSpecDie) DieSealFeed(r GenericCompositionSpec) *GenericCompositionSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *GenericCompositionSpecDie) DieSealFeedPtr(r *GenericCompositionSpec) *GenericCompositionSpecDie {
	if r == nil {
		r = &GenericCompositionSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *GenericCompositionSpecDie) DieSealRelease() GenericCompositionSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *GenericCompositionSpecDie) DieSealReleasePtr() *GenericCompositionSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *GenericCompositionSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *GenericCompositionSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// PlugDie mutates Plug as a die.
func (d *GenericCompositionSpecDie) PlugDie(fn func(d *CompositionPlugDie)) *GenericCompositionSpecDie {
	return d.DieStamp(func(r *GenericCompositionSpec) {
		d := CompositionPlugBlank.DieImmutable(false).DieFeedPtr(r.Plug)
		fn(d)
		r.Plug = d.DieReleasePtr()
	})
}

// DependencieDie mutates a single item in Dependencies matched by the nested field Component, appending a new item if no match is found.
func (d *GenericCompositionSpecDie) DependencieDie(v string, fn func(d *CompositionDependencyDie)) *GenericCompositionSpecDie {
	return d.DieStamp(func(r *GenericCompositionSpec) {
		for i := range r.Dependencies {
			if v == r.Dependencies[i].Component {
				d := CompositionDependencyBlank.DieImmutable(false).DieFeed(r.Dependencies[i])
				fn(d)
				r.Dependencies[i] = d.DieRelease()
				return
			}
		}

		d := CompositionDependencyBlank.DieImmutable(false).DieFeed(CompositionDependency{Component: v})
		fn(d)
		r.Dependencies = append(r.Dependencies, d.DieRelease())
	})
}

func (d *GenericCompositionSpecDie) WAC(v string) *GenericCompositionSpecDie {
	return d.DieStamp(func(r *GenericCompositionSpec) {
		r.WAC = v
	})
}

func (d *GenericCompositionSpecDie) Plug(v *CompositionPlug) *GenericCompositionSpecDie {
	return d.DieStamp(func(r *GenericCompositionSpec) {
		r.Plug = v
	})
}

func (d *GenericCompositionSpecDie) Dependencies(v ...CompositionDependency) *GenericCompositionSpecDie {
	return d.DieStamp(func(r *GenericCompositionSpec) {
		r.Dependencies = v
	})
}

var CompositionPlugBlank = (&CompositionPlugDie{}).DieFeed(CompositionPlug{})

type CompositionPlugDie struct {
	mutable bool
	r       CompositionPlug
	seal    CompositionPlug
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CompositionPlugDie) DieImmutable(immutable bool) *CompositionPlugDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CompositionPlugDie) DieFeed(r CompositionPlug) *CompositionPlugDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CompositionPlugDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CompositionPlugDie) DieFeedPtr(r *CompositionPlug) *CompositionPlugDie {
	if r == nil {
		r = &CompositionPlug{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CompositionPlugDie) DieFeedJSON(j []byte) *CompositionPlugDie {
	r := CompositionPlug{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CompositionPlugDie) DieFeedYAML(y []byte) *CompositionPlugDie {
	r := CompositionPlug{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CompositionPlugDie) DieFeedYAMLFile(name string) *CompositionPlugDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionPlugDie) DieFeedRawExtension(raw runtime.RawExtension) *CompositionPlugDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CompositionPlugDie) DieRelease() CompositionPlug {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CompositionPlugDie) DieReleasePtr() *CompositionPlug {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CompositionPlugDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CompositionPlugDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionPlugDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CompositionPlugDie) DieStamp(fn func(r *CompositionPlug)) *CompositionPlugDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CompositionPlugDie) DieStampAt(jp string, fn interface{}) *CompositionPlugDie {
	return d.DieStamp(func(r *CompositionPlug) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CompositionPlugDie) DieWith(fns ...func(d *CompositionPlugDie)) *CompositionPlugDie {
	nd := CompositionPlugBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CompositionPlugDie) DeepCopy() *CompositionPlugDie {
	r := *d.r.DeepCopy()
	return &CompositionPlugDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *CompositionPlugDie) DieSeal() *CompositionPlugDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *CompositionPlugDie) DieSealFeed(r CompositionPlug) *CompositionPlugDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *CompositionPlugDie) DieSealFeedPtr(r *CompositionPlug) *CompositionPlugDie {
	if r == nil {
		r = &CompositionPlug{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *CompositionPlugDie) DieSealRelease() CompositionPlug {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *CompositionPlugDie) DieSealReleasePtr() *CompositionPlug {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *CompositionPlugDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *CompositionPlugDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var CompositionDependencyBlank = (&CompositionDependencyDie{}).DieFeed(CompositionDependency{})

type CompositionDependencyDie struct {
	mutable bool
	r       CompositionDependency
	seal    CompositionDependency
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CompositionDependencyDie) DieImmutable(immutable bool) *CompositionDependencyDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CompositionDependencyDie) DieFeed(r CompositionDependency) *CompositionDependencyDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CompositionDependencyDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CompositionDependencyDie) DieFeedPtr(r *CompositionDependency) *CompositionDependencyDie {
	if r == nil {
		r = &CompositionDependency{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CompositionDependencyDie) DieFeedJSON(j []byte) *CompositionDependencyDie {
	r := CompositionDependency{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CompositionDependencyDie) DieFeedYAML(y []byte) *CompositionDependencyDie {
	r := CompositionDependency{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CompositionDependencyDie) DieFeedYAMLFile(name string) *CompositionDependencyDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionDependencyDie) DieFeedRawExtension(raw runtime.RawExtension) *CompositionDependencyDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CompositionDependencyDie) DieRelease() CompositionDependency {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CompositionDependencyDie) DieReleasePtr() *CompositionDependency {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CompositionDependencyDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CompositionDependencyDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionDependencyDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CompositionDependencyDie) DieStamp(fn func(r *CompositionDependency)) *CompositionDependencyDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CompositionDependencyDie) DieStampAt(jp string, fn interface{}) *CompositionDependencyDie {
	return d.DieStamp(func(r *CompositionDependency) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CompositionDependencyDie) DieWith(fns ...func(d *CompositionDependencyDie)) *CompositionDependencyDie {
	nd := CompositionDependencyBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CompositionDependencyDie) DeepCopy() *CompositionDependencyDie {
	r := *d.r.DeepCopy()
	return &CompositionDependencyDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *CompositionDependencyDie) DieSeal() *CompositionDependencyDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *CompositionDependencyDie) DieSealFeed(r CompositionDependency) *CompositionDependencyDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *CompositionDependencyDie) DieSealFeedPtr(r *CompositionDependency) *CompositionDependencyDie {
	if r == nil {
		r = &CompositionDependency{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *CompositionDependencyDie) DieSealRelease() CompositionDependency {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *CompositionDependencyDie) DieSealReleasePtr() *CompositionDependency {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *CompositionDependencyDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *CompositionDependencyDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// RefDie mutates Ref as a die.
func (d *CompositionDependencyDie) RefDie(fn func(d *ComponentReferenceDie)) *CompositionDependencyDie {
	return d.DieStamp(func(r *CompositionDependency) {
		d := ComponentReferenceBlank.DieImmutable(false).DieFeedPtr(r.Ref)
		fn(d)
		r.Ref = d.DieReleasePtr()
	})
}

// ConfigDie mutates Config as a die.
func (d *CompositionDependencyDie) ConfigDie(fn func(d *GenericConfigStoreSpecDie)) *CompositionDependencyDie {
	return d.DieStamp(func(r *CompositionDependency) {
		d := GenericConfigStoreSpecBlank.DieImmutable(false).DieFeedPtr(r.Config)
		fn(d)
		r.Config = d.DieReleasePtr()
	})
}

// OCIDie mutates OCI as a die.
func (d *CompositionDependencyDie) OCIDie(fn func(d *OCIReferenceDie)) *CompositionDependencyDie {
	return d.DieStamp(func(r *CompositionDependency) {
		d := OCIReferenceBlank.DieImmutable(false).DieFeedPtr(r.OCI)
		fn(d)
		r.OCI = d.DieReleasePtr()
	})
}

// CompositionDie mutates Composition as a die.
//
// Composition is schema equivalent to CompositionSpec, but schemaless to breaking out of recursive type nesting.
func (d *CompositionDependencyDie) CompositionDie(fn func(d *GenericCompositionSpecDie)) *CompositionDependencyDie {
	return d.DieStamp(func(r *CompositionDependency) {
		d := GenericCompositionSpecBlank.DieImmutable(false).DieFeedPtr(r.Composition)
		fn(d)
		r.Composition = d.DieReleasePtr()
	})
}

func (d *CompositionDependencyDie) Component(v string) *CompositionDependencyDie {
	return d.DieStamp(func(r *CompositionDependency) {
		r.Component = v
	})
}

func (d *CompositionDependencyDie) Ref(v *ComponentReference) *CompositionDependencyDie {
	return d.DieStamp(func(r *CompositionDependency) {
		r.Ref = v
	})
}

func (d *CompositionDependencyDie) Config(v *GenericConfigStoreSpec) *CompositionDependencyDie {
	return d.DieStamp(func(r *CompositionDependency) {
		r.Config = v
	})
}

func (d *CompositionDependencyDie) OCI(v *OCIReference) *CompositionDependencyDie {
	return d.DieStamp(func(r *CompositionDependency) {
		r.OCI = v
	})
}

// Composition is schema equivalent to CompositionSpec, but schemaless to breaking out of recursive type nesting.
func (d *CompositionDependencyDie) Composition(v *GenericCompositionSpec) *CompositionDependencyDie {
	return d.DieStamp(func(r *CompositionDependency) {
		r.Composition = v
	})
}

var CompositionStatusBlank = (&CompositionStatusDie{}).DieFeed(CompositionStatus{})

type CompositionStatusDie struct {
	mutable bool
	r       CompositionStatus
	seal    CompositionStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CompositionStatusDie) DieImmutable(immutable bool) *CompositionStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CompositionStatusDie) DieFeed(r CompositionStatus) *CompositionStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CompositionStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CompositionStatusDie) DieFeedPtr(r *CompositionStatus) *CompositionStatusDie {
	if r == nil {
		r = &CompositionStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CompositionStatusDie) DieFeedJSON(j []byte) *CompositionStatusDie {
	r := CompositionStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CompositionStatusDie) DieFeedYAML(y []byte) *CompositionStatusDie {
	r := CompositionStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CompositionStatusDie) DieFeedYAMLFile(name string) *CompositionStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *CompositionStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CompositionStatusDie) DieRelease() CompositionStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CompositionStatusDie) DieReleasePtr() *CompositionStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CompositionStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CompositionStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CompositionStatusDie) DieStamp(fn func(r *CompositionStatus)) *CompositionStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CompositionStatusDie) DieStampAt(jp string, fn interface{}) *CompositionStatusDie {
	return d.DieStamp(func(r *CompositionStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CompositionStatusDie) DieWith(fns ...func(d *CompositionStatusDie)) *CompositionStatusDie {
	nd := CompositionStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CompositionStatusDie) DeepCopy() *CompositionStatusDie {
	r := *d.r.DeepCopy()
	return &CompositionStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *CompositionStatusDie) DieSeal() *CompositionStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *CompositionStatusDie) DieSealFeed(r CompositionStatus) *CompositionStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *CompositionStatusDie) DieSealFeedPtr(r *CompositionStatus) *CompositionStatusDie {
	if r == nil {
		r = &CompositionStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *CompositionStatusDie) DieSealRelease() CompositionStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *CompositionStatusDie) DieSealReleasePtr() *CompositionStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *CompositionStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *CompositionStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentStatusDie mutates GenericComponentStatus as a die.
func (d *CompositionStatusDie) GenericComponentStatusDie(fn func(d *GenericComponentStatusDie)) *CompositionStatusDie {
	return d.DieStamp(func(r *CompositionStatus) {
		d := GenericComponentStatusBlank.DieImmutable(false).DieFeed(r.GenericComponentStatus)
		fn(d)
		r.GenericComponentStatus = d.DieRelease()
	})
}

// DependencieDie mutates a single item in Dependencies matched by the nested field Component, appending a new item if no match is found.
func (d *CompositionStatusDie) DependencieDie(v string, fn func(d *CompositionDependencyStatusDie)) *CompositionStatusDie {
	return d.DieStamp(func(r *CompositionStatus) {
		for i := range r.Dependencies {
			if v == r.Dependencies[i].Component {
				d := CompositionDependencyStatusBlank.DieImmutable(false).DieFeed(r.Dependencies[i])
				fn(d)
				r.Dependencies[i] = d.DieRelease()
				return
			}
		}

		d := CompositionDependencyStatusBlank.DieImmutable(false).DieFeed(CompositionDependencyStatus{Component: v})
		fn(d)
		r.Dependencies = append(r.Dependencies, d.DieRelease())
	})
}

func (d *CompositionStatusDie) Status(v apis.Status) *CompositionStatusDie {
	return d.DieStamp(func(r *CompositionStatus) {
		r.Status = v
	})
}

func (d *CompositionStatusDie) GenericComponentStatus(v GenericComponentStatus) *CompositionStatusDie {
	return d.DieStamp(func(r *CompositionStatus) {
		r.GenericComponentStatus = v
	})
}

func (d *CompositionStatusDie) Dependencies(v ...CompositionDependencyStatus) *CompositionStatusDie {
	return d.DieStamp(func(r *CompositionStatus) {
		r.Dependencies = v
	})
}

var CompositionDependencyStatusBlank = (&CompositionDependencyStatusDie{}).DieFeed(CompositionDependencyStatus{})

type CompositionDependencyStatusDie struct {
	mutable bool
	r       CompositionDependencyStatus
	seal    CompositionDependencyStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CompositionDependencyStatusDie) DieImmutable(immutable bool) *CompositionDependencyStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CompositionDependencyStatusDie) DieFeed(r CompositionDependencyStatus) *CompositionDependencyStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CompositionDependencyStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CompositionDependencyStatusDie) DieFeedPtr(r *CompositionDependencyStatus) *CompositionDependencyStatusDie {
	if r == nil {
		r = &CompositionDependencyStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CompositionDependencyStatusDie) DieFeedJSON(j []byte) *CompositionDependencyStatusDie {
	r := CompositionDependencyStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CompositionDependencyStatusDie) DieFeedYAML(y []byte) *CompositionDependencyStatusDie {
	r := CompositionDependencyStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CompositionDependencyStatusDie) DieFeedYAMLFile(name string) *CompositionDependencyStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionDependencyStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *CompositionDependencyStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CompositionDependencyStatusDie) DieRelease() CompositionDependencyStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CompositionDependencyStatusDie) DieReleasePtr() *CompositionDependencyStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CompositionDependencyStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CompositionDependencyStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionDependencyStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CompositionDependencyStatusDie) DieStamp(fn func(r *CompositionDependencyStatus)) *CompositionDependencyStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CompositionDependencyStatusDie) DieStampAt(jp string, fn interface{}) *CompositionDependencyStatusDie {
	return d.DieStamp(func(r *CompositionDependencyStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CompositionDependencyStatusDie) DieWith(fns ...func(d *CompositionDependencyStatusDie)) *CompositionDependencyStatusDie {
	nd := CompositionDependencyStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CompositionDependencyStatusDie) DeepCopy() *CompositionDependencyStatusDie {
	r := *d.r.DeepCopy()
	return &CompositionDependencyStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *CompositionDependencyStatusDie) DieSeal() *CompositionDependencyStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *CompositionDependencyStatusDie) DieSealFeed(r CompositionDependencyStatus) *CompositionDependencyStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *CompositionDependencyStatusDie) DieSealFeedPtr(r *CompositionDependencyStatus) *CompositionDependencyStatusDie {
	if r == nil {
		r = &CompositionDependencyStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *CompositionDependencyStatusDie) DieSealRelease() CompositionDependencyStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *CompositionDependencyStatusDie) DieSealReleasePtr() *CompositionDependencyStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *CompositionDependencyStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *CompositionDependencyStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// WITDie mutates WIT as a die.
func (d *CompositionDependencyStatusDie) WITDie(fn func(d *WITDie)) *CompositionDependencyStatusDie {
	return d.DieStamp(func(r *CompositionDependencyStatus) {
		d := WITBlank.DieImmutable(false).DieFeed(r.WIT)
		fn(d)
		r.WIT = d.DieRelease()
	})
}

func (d *CompositionDependencyStatusDie) Component(v string) *CompositionDependencyStatusDie {
	return d.DieStamp(func(r *CompositionDependencyStatus) {
		r.Component = v
	})
}

func (d *CompositionDependencyStatusDie) Image(v string) *CompositionDependencyStatusDie {
	return d.DieStamp(func(r *CompositionDependencyStatus) {
		r.Image = v
	})
}

func (d *CompositionDependencyStatusDie) WIT(v WIT) *CompositionDependencyStatusDie {
	return d.DieStamp(func(r *CompositionDependencyStatus) {
		r.WIT = v
	})
}

var CompositionBlank = (&CompositionDie{}).DieFeed(Composition{})

type CompositionDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       Composition
	seal    Composition
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CompositionDie) DieImmutable(immutable bool) *CompositionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CompositionDie) DieFeed(r Composition) *CompositionDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &CompositionDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CompositionDie) DieFeedPtr(r *Composition) *CompositionDie {
	if r == nil {
		r = &Composition{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CompositionDie) DieFeedJSON(j []byte) *CompositionDie {
	r := Composition{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CompositionDie) DieFeedYAML(y []byte) *CompositionDie {
	r := Composition{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CompositionDie) DieFeedYAMLFile(name string) *CompositionDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionDie) DieFeedRawExtension(raw runtime.RawExtension) *CompositionDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CompositionDie) DieRelease() Composition {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CompositionDie) DieReleasePtr() *Composition {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *CompositionDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CompositionDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CompositionDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CompositionDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CompositionDie) DieStamp(fn func(r *Composition)) *CompositionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CompositionDie) DieStampAt(jp string, fn interface{}) *CompositionDie {
	return d.DieStamp(func(r *Composition) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CompositionDie) DieWith(fns ...func(d *CompositionDie)) *CompositionDie {
	nd := CompositionBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CompositionDie) DeepCopy() *CompositionDie {
	r := *d.r.DeepCopy()
	return &CompositionDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *CompositionDie) DieSeal() *CompositionDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *CompositionDie) DieSealFeed(r Composition) *CompositionDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *CompositionDie) DieSealFeedPtr(r *Composition) *CompositionDie {
	if r == nil {
		r = &Composition{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *CompositionDie) DieSealRelease() Composition {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *CompositionDie) DieSealReleasePtr() *Composition {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *CompositionDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *CompositionDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*CompositionDie)(nil)

func (d *CompositionDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *CompositionDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *CompositionDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *CompositionDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &Composition{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *CompositionDie) APIVersion(v string) *CompositionDie {
	return d.DieStamp(func(r *Composition) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *CompositionDie) Kind(v string) *CompositionDie {
	return d.DieStamp(func(r *Composition) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *CompositionDie) TypeMetadata(v metav1.TypeMeta) *CompositionDie {
	return d.DieStamp(func(r *Composition) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *CompositionDie) TypeMetadataDie(fn func(d *v1.TypeMetaDie)) *CompositionDie {
	return d.DieStamp(func(r *Composition) {
		d := v1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *CompositionDie) Metadata(v metav1.ObjectMeta) *CompositionDie {
	return d.DieStamp(func(r *Composition) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *CompositionDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *CompositionDie {
	return d.DieStamp(func(r *Composition) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *CompositionDie) SpecDie(fn func(d *CompositionSpecDie)) *CompositionDie {
	return d.DieStamp(func(r *Composition) {
		d := CompositionSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *CompositionDie) StatusDie(fn func(d *CompositionStatusDie)) *CompositionDie {
	return d.DieStamp(func(r *Composition) {
		d := CompositionStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *CompositionDie) Spec(v CompositionSpec) *CompositionDie {
	return d.DieStamp(func(r *Composition) {
		r.Spec = v
	})
}

func (d *CompositionDie) Status(v CompositionStatus) *CompositionDie {
	return d.DieStamp(func(r *Composition) {
		r.Status = v
	})
}

var ConfigStoreSpecBlank = (&ConfigStoreSpecDie{}).DieFeed(ConfigStoreSpec{})

type ConfigStoreSpecDie struct {
	mutable bool
	r       ConfigStoreSpec
	seal    ConfigStoreSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ConfigStoreSpecDie) DieImmutable(immutable bool) *ConfigStoreSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ConfigStoreSpecDie) DieFeed(r ConfigStoreSpec) *ConfigStoreSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ConfigStoreSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ConfigStoreSpecDie) DieFeedPtr(r *ConfigStoreSpec) *ConfigStoreSpecDie {
	if r == nil {
		r = &ConfigStoreSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ConfigStoreSpecDie) DieFeedJSON(j []byte) *ConfigStoreSpecDie {
	r := ConfigStoreSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ConfigStoreSpecDie) DieFeedYAML(y []byte) *ConfigStoreSpecDie {
	r := ConfigStoreSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ConfigStoreSpecDie) DieFeedYAMLFile(name string) *ConfigStoreSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ConfigStoreSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ConfigStoreSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ConfigStoreSpecDie) DieRelease() ConfigStoreSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ConfigStoreSpecDie) DieReleasePtr() *ConfigStoreSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ConfigStoreSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ConfigStoreSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ConfigStoreSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ConfigStoreSpecDie) DieStamp(fn func(r *ConfigStoreSpec)) *ConfigStoreSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ConfigStoreSpecDie) DieStampAt(jp string, fn interface{}) *ConfigStoreSpecDie {
	return d.DieStamp(func(r *ConfigStoreSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ConfigStoreSpecDie) DieWith(fns ...func(d *ConfigStoreSpecDie)) *ConfigStoreSpecDie {
	nd := ConfigStoreSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ConfigStoreSpecDie) DeepCopy() *ConfigStoreSpecDie {
	r := *d.r.DeepCopy()
	return &ConfigStoreSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ConfigStoreSpecDie) DieSeal() *ConfigStoreSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ConfigStoreSpecDie) DieSealFeed(r ConfigStoreSpec) *ConfigStoreSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ConfigStoreSpecDie) DieSealFeedPtr(r *ConfigStoreSpec) *ConfigStoreSpecDie {
	if r == nil {
		r = &ConfigStoreSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ConfigStoreSpecDie) DieSealRelease() ConfigStoreSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ConfigStoreSpecDie) DieSealReleasePtr() *ConfigStoreSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ConfigStoreSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ConfigStoreSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentSpecDie mutates GenericComponentSpec as a die.
func (d *ConfigStoreSpecDie) GenericComponentSpecDie(fn func(d *GenericComponentSpecDie)) *ConfigStoreSpecDie {
	return d.DieStamp(func(r *ConfigStoreSpec) {
		d := GenericComponentSpecBlank.DieImmutable(false).DieFeed(r.GenericComponentSpec)
		fn(d)
		r.GenericComponentSpec = d.DieRelease()
	})
}

// GenericConfigStoreSpecDie mutates GenericConfigStoreSpec as a die.
func (d *ConfigStoreSpecDie) GenericConfigStoreSpecDie(fn func(d *GenericConfigStoreSpecDie)) *ConfigStoreSpecDie {
	return d.DieStamp(func(r *ConfigStoreSpec) {
		d := GenericConfigStoreSpecBlank.DieImmutable(false).DieFeed(r.GenericConfigStoreSpec)
		fn(d)
		r.GenericConfigStoreSpec = d.DieRelease()
	})
}

func (d *ConfigStoreSpecDie) GenericComponentSpec(v GenericComponentSpec) *ConfigStoreSpecDie {
	return d.DieStamp(func(r *ConfigStoreSpec) {
		r.GenericComponentSpec = v
	})
}

func (d *ConfigStoreSpecDie) GenericConfigStoreSpec(v GenericConfigStoreSpec) *ConfigStoreSpecDie {
	return d.DieStamp(func(r *ConfigStoreSpec) {
		r.GenericConfigStoreSpec = v
	})
}

var GenericConfigStoreSpecBlank = (&GenericConfigStoreSpecDie{}).DieFeed(GenericConfigStoreSpec{})

type GenericConfigStoreSpecDie struct {
	mutable bool
	r       GenericConfigStoreSpec
	seal    GenericConfigStoreSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GenericConfigStoreSpecDie) DieImmutable(immutable bool) *GenericConfigStoreSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GenericConfigStoreSpecDie) DieFeed(r GenericConfigStoreSpec) *GenericConfigStoreSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GenericConfigStoreSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GenericConfigStoreSpecDie) DieFeedPtr(r *GenericConfigStoreSpec) *GenericConfigStoreSpecDie {
	if r == nil {
		r = &GenericConfigStoreSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *GenericConfigStoreSpecDie) DieFeedJSON(j []byte) *GenericConfigStoreSpecDie {
	r := GenericConfigStoreSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *GenericConfigStoreSpecDie) DieFeedYAML(y []byte) *GenericConfigStoreSpecDie {
	r := GenericConfigStoreSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *GenericConfigStoreSpecDie) DieFeedYAMLFile(name string) *GenericConfigStoreSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericConfigStoreSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *GenericConfigStoreSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *GenericConfigStoreSpecDie) DieRelease() GenericConfigStoreSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GenericConfigStoreSpecDie) DieReleasePtr() *GenericConfigStoreSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *GenericConfigStoreSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *GenericConfigStoreSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericConfigStoreSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GenericConfigStoreSpecDie) DieStamp(fn func(r *GenericConfigStoreSpec)) *GenericConfigStoreSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *GenericConfigStoreSpecDie) DieStampAt(jp string, fn interface{}) *GenericConfigStoreSpecDie {
	return d.DieStamp(func(r *GenericConfigStoreSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *GenericConfigStoreSpecDie) DieWith(fns ...func(d *GenericConfigStoreSpecDie)) *GenericConfigStoreSpecDie {
	nd := GenericConfigStoreSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GenericConfigStoreSpecDie) DeepCopy() *GenericConfigStoreSpecDie {
	r := *d.r.DeepCopy()
	return &GenericConfigStoreSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *GenericConfigStoreSpecDie) DieSeal() *GenericConfigStoreSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *GenericConfigStoreSpecDie) DieSealFeed(r GenericConfigStoreSpec) *GenericConfigStoreSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *GenericConfigStoreSpecDie) DieSealFeedPtr(r *GenericConfigStoreSpec) *GenericConfigStoreSpecDie {
	if r == nil {
		r = &GenericConfigStoreSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *GenericConfigStoreSpecDie) DieSealRelease() GenericConfigStoreSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *GenericConfigStoreSpecDie) DieSealReleasePtr() *GenericConfigStoreSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *GenericConfigStoreSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *GenericConfigStoreSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// ValueDie mutates a single item in Values matched by the nested field Name, appending a new item if no match is found.
func (d *GenericConfigStoreSpecDie) ValueDie(v string, fn func(d *ValueDie)) *GenericConfigStoreSpecDie {
	return d.DieStamp(func(r *GenericConfigStoreSpec) {
		for i := range r.Values {
			if v == r.Values[i].Name {
				d := ValueBlank.DieImmutable(false).DieFeed(r.Values[i])
				fn(d)
				r.Values[i] = d.DieRelease()
				return
			}
		}

		d := ValueBlank.DieImmutable(false).DieFeed(Value{Name: v})
		fn(d)
		r.Values = append(r.Values, d.DieRelease())
	})
}

// ValuesFromDie mutates a single item in ValuesFrom matched by the nested field Name, appending a new item if no match is found.
func (d *GenericConfigStoreSpecDie) ValuesFromDie(v string, fn func(d *ValuesFromDie)) *GenericConfigStoreSpecDie {
	return d.DieStamp(func(r *GenericConfigStoreSpec) {
		for i := range r.ValuesFrom {
			if v == r.ValuesFrom[i].Name {
				d := ValuesFromBlank.DieImmutable(false).DieFeed(r.ValuesFrom[i])
				fn(d)
				r.ValuesFrom[i] = d.DieRelease()
				return
			}
		}

		d := ValuesFromBlank.DieImmutable(false).DieFeed(ValuesFrom{Name: v})
		fn(d)
		r.ValuesFrom = append(r.ValuesFrom, d.DieRelease())
	})
}

func (d *GenericConfigStoreSpecDie) Values(v ...Value) *GenericConfigStoreSpecDie {
	return d.DieStamp(func(r *GenericConfigStoreSpec) {
		r.Values = v
	})
}

func (d *GenericConfigStoreSpecDie) ValuesFrom(v ...ValuesFrom) *GenericConfigStoreSpecDie {
	return d.DieStamp(func(r *GenericConfigStoreSpec) {
		r.ValuesFrom = v
	})
}

var ValueBlank = (&ValueDie{}).DieFeed(Value{})

type ValueDie struct {
	mutable bool
	r       Value
	seal    Value
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ValueDie) DieImmutable(immutable bool) *ValueDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ValueDie) DieFeed(r Value) *ValueDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ValueDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ValueDie) DieFeedPtr(r *Value) *ValueDie {
	if r == nil {
		r = &Value{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ValueDie) DieFeedJSON(j []byte) *ValueDie {
	r := Value{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ValueDie) DieFeedYAML(y []byte) *ValueDie {
	r := Value{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ValueDie) DieFeedYAMLFile(name string) *ValueDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ValueDie) DieFeedRawExtension(raw runtime.RawExtension) *ValueDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ValueDie) DieRelease() Value {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ValueDie) DieReleasePtr() *Value {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ValueDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ValueDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ValueDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ValueDie) DieStamp(fn func(r *Value)) *ValueDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ValueDie) DieStampAt(jp string, fn interface{}) *ValueDie {
	return d.DieStamp(func(r *Value) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ValueDie) DieWith(fns ...func(d *ValueDie)) *ValueDie {
	nd := ValueBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ValueDie) DeepCopy() *ValueDie {
	r := *d.r.DeepCopy()
	return &ValueDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ValueDie) DieSeal() *ValueDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ValueDie) DieSealFeed(r Value) *ValueDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ValueDie) DieSealFeedPtr(r *Value) *ValueDie {
	if r == nil {
		r = &Value{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ValueDie) DieSealRelease() Value {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ValueDie) DieSealReleasePtr() *Value {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ValueDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ValueDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// ValueFromDie mutates ValueFrom as a die.
func (d *ValueDie) ValueFromDie(fn func(d *ValueFromDie)) *ValueDie {
	return d.DieStamp(func(r *Value) {
		d := ValueFromBlank.DieImmutable(false).DieFeedPtr(r.ValueFrom)
		fn(d)
		r.ValueFrom = d.DieReleasePtr()
	})
}

func (d *ValueDie) Name(v string) *ValueDie {
	return d.DieStamp(func(r *Value) {
		r.Name = v
	})
}

func (d *ValueDie) Value(v string) *ValueDie {
	return d.DieStamp(func(r *Value) {
		r.Value = v
	})
}

func (d *ValueDie) ValueFrom(v *ValueFrom) *ValueDie {
	return d.DieStamp(func(r *Value) {
		r.ValueFrom = v
	})
}

var ValueFromBlank = (&ValueFromDie{}).DieFeed(ValueFrom{})

type ValueFromDie struct {
	mutable bool
	r       ValueFrom
	seal    ValueFrom
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ValueFromDie) DieImmutable(immutable bool) *ValueFromDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ValueFromDie) DieFeed(r ValueFrom) *ValueFromDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ValueFromDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ValueFromDie) DieFeedPtr(r *ValueFrom) *ValueFromDie {
	if r == nil {
		r = &ValueFrom{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ValueFromDie) DieFeedJSON(j []byte) *ValueFromDie {
	r := ValueFrom{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ValueFromDie) DieFeedYAML(y []byte) *ValueFromDie {
	r := ValueFrom{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ValueFromDie) DieFeedYAMLFile(name string) *ValueFromDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ValueFromDie) DieFeedRawExtension(raw runtime.RawExtension) *ValueFromDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ValueFromDie) DieRelease() ValueFrom {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ValueFromDie) DieReleasePtr() *ValueFrom {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ValueFromDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ValueFromDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ValueFromDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ValueFromDie) DieStamp(fn func(r *ValueFrom)) *ValueFromDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ValueFromDie) DieStampAt(jp string, fn interface{}) *ValueFromDie {
	return d.DieStamp(func(r *ValueFrom) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ValueFromDie) DieWith(fns ...func(d *ValueFromDie)) *ValueFromDie {
	nd := ValueFromBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ValueFromDie) DeepCopy() *ValueFromDie {
	r := *d.r.DeepCopy()
	return &ValueFromDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ValueFromDie) DieSeal() *ValueFromDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ValueFromDie) DieSealFeed(r ValueFrom) *ValueFromDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ValueFromDie) DieSealFeedPtr(r *ValueFrom) *ValueFromDie {
	if r == nil {
		r = &ValueFrom{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ValueFromDie) DieSealRelease() ValueFrom {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ValueFromDie) DieSealReleasePtr() *ValueFrom {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ValueFromDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ValueFromDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *ValueFromDie) Name(v string) *ValueFromDie {
	return d.DieStamp(func(r *ValueFrom) {
		r.Name = v
	})
}

func (d *ValueFromDie) Key(v string) *ValueFromDie {
	return d.DieStamp(func(r *ValueFrom) {
		r.Key = v
	})
}

var ValuesFromBlank = (&ValuesFromDie{}).DieFeed(ValuesFrom{})

type ValuesFromDie struct {
	mutable bool
	r       ValuesFrom
	seal    ValuesFrom
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ValuesFromDie) DieImmutable(immutable bool) *ValuesFromDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ValuesFromDie) DieFeed(r ValuesFrom) *ValuesFromDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ValuesFromDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ValuesFromDie) DieFeedPtr(r *ValuesFrom) *ValuesFromDie {
	if r == nil {
		r = &ValuesFrom{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ValuesFromDie) DieFeedJSON(j []byte) *ValuesFromDie {
	r := ValuesFrom{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ValuesFromDie) DieFeedYAML(y []byte) *ValuesFromDie {
	r := ValuesFrom{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ValuesFromDie) DieFeedYAMLFile(name string) *ValuesFromDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ValuesFromDie) DieFeedRawExtension(raw runtime.RawExtension) *ValuesFromDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ValuesFromDie) DieRelease() ValuesFrom {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ValuesFromDie) DieReleasePtr() *ValuesFrom {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ValuesFromDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ValuesFromDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ValuesFromDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ValuesFromDie) DieStamp(fn func(r *ValuesFrom)) *ValuesFromDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ValuesFromDie) DieStampAt(jp string, fn interface{}) *ValuesFromDie {
	return d.DieStamp(func(r *ValuesFrom) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ValuesFromDie) DieWith(fns ...func(d *ValuesFromDie)) *ValuesFromDie {
	nd := ValuesFromBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ValuesFromDie) DeepCopy() *ValuesFromDie {
	r := *d.r.DeepCopy()
	return &ValuesFromDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ValuesFromDie) DieSeal() *ValuesFromDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ValuesFromDie) DieSealFeed(r ValuesFrom) *ValuesFromDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ValuesFromDie) DieSealFeedPtr(r *ValuesFrom) *ValuesFromDie {
	if r == nil {
		r = &ValuesFrom{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ValuesFromDie) DieSealRelease() ValuesFrom {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ValuesFromDie) DieSealReleasePtr() *ValuesFrom {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ValuesFromDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ValuesFromDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *ValuesFromDie) Name(v string) *ValuesFromDie {
	return d.DieStamp(func(r *ValuesFrom) {
		r.Name = v
	})
}

func (d *ValuesFromDie) Prefix(v string) *ValuesFromDie {
	return d.DieStamp(func(r *ValuesFrom) {
		r.Prefix = v
	})
}

var ConfigStoreStatusBlank = (&ConfigStoreStatusDie{}).DieFeed(ConfigStoreStatus{})

type ConfigStoreStatusDie struct {
	mutable bool
	r       ConfigStoreStatus
	seal    ConfigStoreStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ConfigStoreStatusDie) DieImmutable(immutable bool) *ConfigStoreStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ConfigStoreStatusDie) DieFeed(r ConfigStoreStatus) *ConfigStoreStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ConfigStoreStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ConfigStoreStatusDie) DieFeedPtr(r *ConfigStoreStatus) *ConfigStoreStatusDie {
	if r == nil {
		r = &ConfigStoreStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ConfigStoreStatusDie) DieFeedJSON(j []byte) *ConfigStoreStatusDie {
	r := ConfigStoreStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ConfigStoreStatusDie) DieFeedYAML(y []byte) *ConfigStoreStatusDie {
	r := ConfigStoreStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ConfigStoreStatusDie) DieFeedYAMLFile(name string) *ConfigStoreStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ConfigStoreStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ConfigStoreStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ConfigStoreStatusDie) DieRelease() ConfigStoreStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ConfigStoreStatusDie) DieReleasePtr() *ConfigStoreStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ConfigStoreStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ConfigStoreStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ConfigStoreStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ConfigStoreStatusDie) DieStamp(fn func(r *ConfigStoreStatus)) *ConfigStoreStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ConfigStoreStatusDie) DieStampAt(jp string, fn interface{}) *ConfigStoreStatusDie {
	return d.DieStamp(func(r *ConfigStoreStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ConfigStoreStatusDie) DieWith(fns ...func(d *ConfigStoreStatusDie)) *ConfigStoreStatusDie {
	nd := ConfigStoreStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ConfigStoreStatusDie) DeepCopy() *ConfigStoreStatusDie {
	r := *d.r.DeepCopy()
	return &ConfigStoreStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ConfigStoreStatusDie) DieSeal() *ConfigStoreStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ConfigStoreStatusDie) DieSealFeed(r ConfigStoreStatus) *ConfigStoreStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ConfigStoreStatusDie) DieSealFeedPtr(r *ConfigStoreStatus) *ConfigStoreStatusDie {
	if r == nil {
		r = &ConfigStoreStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ConfigStoreStatusDie) DieSealRelease() ConfigStoreStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ConfigStoreStatusDie) DieSealReleasePtr() *ConfigStoreStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ConfigStoreStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ConfigStoreStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentStatusDie mutates GenericComponentStatus as a die.
func (d *ConfigStoreStatusDie) GenericComponentStatusDie(fn func(d *GenericComponentStatusDie)) *ConfigStoreStatusDie {
	return d.DieStamp(func(r *ConfigStoreStatus) {
		d := GenericComponentStatusBlank.DieImmutable(false).DieFeed(r.GenericComponentStatus)
		fn(d)
		r.GenericComponentStatus = d.DieRelease()
	})
}

func (d *ConfigStoreStatusDie) Status(v apis.Status) *ConfigStoreStatusDie {
	return d.DieStamp(func(r *ConfigStoreStatus) {
		r.Status = v
	})
}

func (d *ConfigStoreStatusDie) GenericComponentStatus(v GenericComponentStatus) *ConfigStoreStatusDie {
	return d.DieStamp(func(r *ConfigStoreStatus) {
		r.GenericComponentStatus = v
	})
}

var ConfigStoreBlank = (&ConfigStoreDie{}).DieFeed(ConfigStore{})

type ConfigStoreDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       ConfigStore
	seal    ConfigStore
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ConfigStoreDie) DieImmutable(immutable bool) *ConfigStoreDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ConfigStoreDie) DieFeed(r ConfigStore) *ConfigStoreDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ConfigStoreDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ConfigStoreDie) DieFeedPtr(r *ConfigStore) *ConfigStoreDie {
	if r == nil {
		r = &ConfigStore{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ConfigStoreDie) DieFeedJSON(j []byte) *ConfigStoreDie {
	r := ConfigStore{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ConfigStoreDie) DieFeedYAML(y []byte) *ConfigStoreDie {
	r := ConfigStore{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ConfigStoreDie) DieFeedYAMLFile(name string) *ConfigStoreDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ConfigStoreDie) DieFeedRawExtension(raw runtime.RawExtension) *ConfigStoreDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ConfigStoreDie) DieRelease() ConfigStore {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ConfigStoreDie) DieReleasePtr() *ConfigStore {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ConfigStoreDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ConfigStoreDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ConfigStoreDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ConfigStoreDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ConfigStoreDie) DieStamp(fn func(r *ConfigStore)) *ConfigStoreDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ConfigStoreDie) DieStampAt(jp string, fn interface{}) *ConfigStoreDie {
	return d.DieStamp(func(r *ConfigStore) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ConfigStoreDie) DieWith(fns ...func(d *ConfigStoreDie)) *ConfigStoreDie {
	nd := ConfigStoreBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ConfigStoreDie) DeepCopy() *ConfigStoreDie {
	r := *d.r.DeepCopy()
	return &ConfigStoreDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ConfigStoreDie) DieSeal() *ConfigStoreDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ConfigStoreDie) DieSealFeed(r ConfigStore) *ConfigStoreDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ConfigStoreDie) DieSealFeedPtr(r *ConfigStore) *ConfigStoreDie {
	if r == nil {
		r = &ConfigStore{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ConfigStoreDie) DieSealRelease() ConfigStore {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ConfigStoreDie) DieSealReleasePtr() *ConfigStore {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ConfigStoreDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ConfigStoreDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ConfigStoreDie)(nil)

func (d *ConfigStoreDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ConfigStoreDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ConfigStoreDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ConfigStoreDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ConfigStore{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ConfigStoreDie) APIVersion(v string) *ConfigStoreDie {
	return d.DieStamp(func(r *ConfigStore) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ConfigStoreDie) Kind(v string) *ConfigStoreDie {
	return d.DieStamp(func(r *ConfigStore) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ConfigStoreDie) TypeMetadata(v metav1.TypeMeta) *ConfigStoreDie {
	return d.DieStamp(func(r *ConfigStore) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ConfigStoreDie) TypeMetadataDie(fn func(d *v1.TypeMetaDie)) *ConfigStoreDie {
	return d.DieStamp(func(r *ConfigStore) {
		d := v1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ConfigStoreDie) Metadata(v metav1.ObjectMeta) *ConfigStoreDie {
	return d.DieStamp(func(r *ConfigStore) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ConfigStoreDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *ConfigStoreDie {
	return d.DieStamp(func(r *ConfigStore) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ConfigStoreDie) SpecDie(fn func(d *ConfigStoreSpecDie)) *ConfigStoreDie {
	return d.DieStamp(func(r *ConfigStore) {
		d := ConfigStoreSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ConfigStoreDie) StatusDie(fn func(d *ConfigStoreStatusDie)) *ConfigStoreDie {
	return d.DieStamp(func(r *ConfigStore) {
		d := ConfigStoreStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ConfigStoreDie) Spec(v ConfigStoreSpec) *ConfigStoreDie {
	return d.DieStamp(func(r *ConfigStore) {
		r.Spec = v
	})
}

func (d *ConfigStoreDie) Status(v ConfigStoreStatus) *ConfigStoreDie {
	return d.DieStamp(func(r *ConfigStore) {
		r.Status = v
	})
}

var GenericComponentSpecBlank = (&GenericComponentSpecDie{}).DieFeed(GenericComponentSpec{})

type GenericComponentSpecDie struct {
	mutable bool
	r       GenericComponentSpec
	seal    GenericComponentSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GenericComponentSpecDie) DieImmutable(immutable bool) *GenericComponentSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GenericComponentSpecDie) DieFeed(r GenericComponentSpec) *GenericComponentSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GenericComponentSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GenericComponentSpecDie) DieFeedPtr(r *GenericComponentSpec) *GenericComponentSpecDie {
	if r == nil {
		r = &GenericComponentSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *GenericComponentSpecDie) DieFeedJSON(j []byte) *GenericComponentSpecDie {
	r := GenericComponentSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *GenericComponentSpecDie) DieFeedYAML(y []byte) *GenericComponentSpecDie {
	r := GenericComponentSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *GenericComponentSpecDie) DieFeedYAMLFile(name string) *GenericComponentSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericComponentSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *GenericComponentSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *GenericComponentSpecDie) DieRelease() GenericComponentSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GenericComponentSpecDie) DieReleasePtr() *GenericComponentSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *GenericComponentSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *GenericComponentSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericComponentSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GenericComponentSpecDie) DieStamp(fn func(r *GenericComponentSpec)) *GenericComponentSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *GenericComponentSpecDie) DieStampAt(jp string, fn interface{}) *GenericComponentSpecDie {
	return d.DieStamp(func(r *GenericComponentSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *GenericComponentSpecDie) DieWith(fns ...func(d *GenericComponentSpecDie)) *GenericComponentSpecDie {
	nd := GenericComponentSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GenericComponentSpecDie) DeepCopy() *GenericComponentSpecDie {
	r := *d.r.DeepCopy()
	return &GenericComponentSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *GenericComponentSpecDie) DieSeal() *GenericComponentSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *GenericComponentSpecDie) DieSealFeed(r GenericComponentSpec) *GenericComponentSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *GenericComponentSpecDie) DieSealFeedPtr(r *GenericComponentSpec) *GenericComponentSpecDie {
	if r == nil {
		r = &GenericComponentSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *GenericComponentSpecDie) DieSealRelease() GenericComponentSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *GenericComponentSpecDie) DieSealReleasePtr() *GenericComponentSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *GenericComponentSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *GenericComponentSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// RepositoryRefDie mutates RepositoryRef as a die.
func (d *GenericComponentSpecDie) RepositoryRefDie(fn func(d *registriesv1alpha1.RepositoryReferenceDie)) *GenericComponentSpecDie {
	return d.DieStamp(func(r *GenericComponentSpec) {
		d := registriesv1alpha1.RepositoryReferenceBlank.DieImmutable(false).DieFeed(r.RepositoryRef)
		fn(d)
		r.RepositoryRef = d.DieRelease()
	})
}

func (d *GenericComponentSpecDie) RepositoryRef(v registriesv1alpha1.RepositoryReference) *GenericComponentSpecDie {
	return d.DieStamp(func(r *GenericComponentSpec) {
		r.RepositoryRef = v
	})
}

var GenericComponentStatusBlank = (&GenericComponentStatusDie{}).DieFeed(GenericComponentStatus{})

type GenericComponentStatusDie struct {
	mutable bool
	r       GenericComponentStatus
	seal    GenericComponentStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GenericComponentStatusDie) DieImmutable(immutable bool) *GenericComponentStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GenericComponentStatusDie) DieFeed(r GenericComponentStatus) *GenericComponentStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GenericComponentStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GenericComponentStatusDie) DieFeedPtr(r *GenericComponentStatus) *GenericComponentStatusDie {
	if r == nil {
		r = &GenericComponentStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *GenericComponentStatusDie) DieFeedJSON(j []byte) *GenericComponentStatusDie {
	r := GenericComponentStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *GenericComponentStatusDie) DieFeedYAML(y []byte) *GenericComponentStatusDie {
	r := GenericComponentStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *GenericComponentStatusDie) DieFeedYAMLFile(name string) *GenericComponentStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericComponentStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *GenericComponentStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *GenericComponentStatusDie) DieRelease() GenericComponentStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GenericComponentStatusDie) DieReleasePtr() *GenericComponentStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *GenericComponentStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *GenericComponentStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *GenericComponentStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GenericComponentStatusDie) DieStamp(fn func(r *GenericComponentStatus)) *GenericComponentStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *GenericComponentStatusDie) DieStampAt(jp string, fn interface{}) *GenericComponentStatusDie {
	return d.DieStamp(func(r *GenericComponentStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *GenericComponentStatusDie) DieWith(fns ...func(d *GenericComponentStatusDie)) *GenericComponentStatusDie {
	nd := GenericComponentStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GenericComponentStatusDie) DeepCopy() *GenericComponentStatusDie {
	r := *d.r.DeepCopy()
	return &GenericComponentStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *GenericComponentStatusDie) DieSeal() *GenericComponentStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *GenericComponentStatusDie) DieSealFeed(r GenericComponentStatus) *GenericComponentStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *GenericComponentStatusDie) DieSealFeedPtr(r *GenericComponentStatus) *GenericComponentStatusDie {
	if r == nil {
		r = &GenericComponentStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *GenericComponentStatusDie) DieSealRelease() GenericComponentStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *GenericComponentStatusDie) DieSealReleasePtr() *GenericComponentStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *GenericComponentStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *GenericComponentStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// WITDie mutates WIT as a die.
func (d *GenericComponentStatusDie) WITDie(fn func(d *WITDie)) *GenericComponentStatusDie {
	return d.DieStamp(func(r *GenericComponentStatus) {
		d := WITBlank.DieImmutable(false).DieFeedPtr(r.WIT)
		fn(d)
		r.WIT = d.DieReleasePtr()
	})
}

// TraceDie replaces Trace by collecting the released value from each die passed.
func (d *GenericComponentStatusDie) TraceDie(v ...*ComponentSpanDie) *GenericComponentStatusDie {
	return d.DieStamp(func(r *GenericComponentStatus) {
		r.Trace = make([]ComponentSpan, len(v))
		for i := range v {
			r.Trace[i] = v[i].DieRelease()
		}
	})
}

// Image resolved from an oci repository holding the wasm component
func (d *GenericComponentStatusDie) Image(v string) *GenericComponentStatusDie {
	return d.DieStamp(func(r *GenericComponentStatus) {
		r.Image = v
	})
}

func (d *GenericComponentStatusDie) WIT(v *WIT) *GenericComponentStatusDie {
	return d.DieStamp(func(r *GenericComponentStatus) {
		r.WIT = v
	})
}

func (d *GenericComponentStatusDie) Trace(v ...ComponentSpan) *GenericComponentStatusDie {
	return d.DieStamp(func(r *GenericComponentStatus) {
		r.Trace = v
	})
}

var WITBlank = (&WITDie{}).DieFeed(WIT{})

type WITDie struct {
	mutable bool
	r       WIT
	seal    WIT
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *WITDie) DieImmutable(immutable bool) *WITDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *WITDie) DieFeed(r WIT) *WITDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &WITDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *WITDie) DieFeedPtr(r *WIT) *WITDie {
	if r == nil {
		r = &WIT{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *WITDie) DieFeedJSON(j []byte) *WITDie {
	r := WIT{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *WITDie) DieFeedYAML(y []byte) *WITDie {
	r := WIT{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *WITDie) DieFeedYAMLFile(name string) *WITDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WITDie) DieFeedRawExtension(raw runtime.RawExtension) *WITDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *WITDie) DieRelease() WIT {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *WITDie) DieReleasePtr() *WIT {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *WITDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *WITDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WITDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *WITDie) DieStamp(fn func(r *WIT)) *WITDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *WITDie) DieStampAt(jp string, fn interface{}) *WITDie {
	return d.DieStamp(func(r *WIT) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *WITDie) DieWith(fns ...func(d *WITDie)) *WITDie {
	nd := WITBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *WITDie) DeepCopy() *WITDie {
	r := *d.r.DeepCopy()
	return &WITDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *WITDie) DieSeal() *WITDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *WITDie) DieSealFeed(r WIT) *WITDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *WITDie) DieSealFeedPtr(r *WIT) *WITDie {
	if r == nil {
		r = &WIT{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *WITDie) DieSealRelease() WIT {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *WITDie) DieSealReleasePtr() *WIT {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *WITDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *WITDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

func (d *WITDie) Imports(v ...string) *WITDie {
	return d.DieStamp(func(r *WIT) {
		r.Imports = v
	})
}

func (d *WITDie) Exports(v ...string) *WITDie {
	return d.DieStamp(func(r *WIT) {
		r.Exports = v
	})
}

var ComponentSpanBlank = (&ComponentSpanDie{}).DieFeed(ComponentSpan{})

type ComponentSpanDie struct {
	mutable bool
	r       ComponentSpan
	seal    ComponentSpan
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ComponentSpanDie) DieImmutable(immutable bool) *ComponentSpanDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ComponentSpanDie) DieFeed(r ComponentSpan) *ComponentSpanDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ComponentSpanDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ComponentSpanDie) DieFeedPtr(r *ComponentSpan) *ComponentSpanDie {
	if r == nil {
		r = &ComponentSpan{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ComponentSpanDie) DieFeedJSON(j []byte) *ComponentSpanDie {
	r := ComponentSpan{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ComponentSpanDie) DieFeedYAML(y []byte) *ComponentSpanDie {
	r := ComponentSpan{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ComponentSpanDie) DieFeedYAMLFile(name string) *ComponentSpanDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentSpanDie) DieFeedRawExtension(raw runtime.RawExtension) *ComponentSpanDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ComponentSpanDie) DieRelease() ComponentSpan {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ComponentSpanDie) DieReleasePtr() *ComponentSpan {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ComponentSpanDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ComponentSpanDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentSpanDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ComponentSpanDie) DieStamp(fn func(r *ComponentSpan)) *ComponentSpanDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ComponentSpanDie) DieStampAt(jp string, fn interface{}) *ComponentSpanDie {
	return d.DieStamp(func(r *ComponentSpan) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ComponentSpanDie) DieWith(fns ...func(d *ComponentSpanDie)) *ComponentSpanDie {
	nd := ComponentSpanBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ComponentSpanDie) DeepCopy() *ComponentSpanDie {
	r := *d.r.DeepCopy()
	return &ComponentSpanDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ComponentSpanDie) DieSeal() *ComponentSpanDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ComponentSpanDie) DieSealFeed(r ComponentSpan) *ComponentSpanDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ComponentSpanDie) DieSealFeedPtr(r *ComponentSpan) *ComponentSpanDie {
	if r == nil {
		r = &ComponentSpan{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ComponentSpanDie) DieSealRelease() ComponentSpan {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ComponentSpanDie) DieSealReleasePtr() *ComponentSpan {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ComponentSpanDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ComponentSpanDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// TraceDie replaces Trace by collecting the released value from each die passed.
func (d *ComponentSpanDie) TraceDie(v ...*ComponentSpanDie) *ComponentSpanDie {
	return d.DieStamp(func(r *ComponentSpan) {
		r.Trace = make([]ComponentSpan, len(v))
		for i := range v {
			r.Trace[i] = v[i].DieRelease()
		}
	})
}

func (d *ComponentSpanDie) Digest(v string) *ComponentSpanDie {
	return d.DieStamp(func(r *ComponentSpan) {
		r.Digest = v
	})
}

func (d *ComponentSpanDie) UID(v types.UID) *ComponentSpanDie {
	return d.DieStamp(func(r *ComponentSpan) {
		r.UID = v
	})
}

func (d *ComponentSpanDie) Group(v string) *ComponentSpanDie {
	return d.DieStamp(func(r *ComponentSpan) {
		r.Group = v
	})
}

func (d *ComponentSpanDie) Kind(v string) *ComponentSpanDie {
	return d.DieStamp(func(r *ComponentSpan) {
		r.Kind = v
	})
}

func (d *ComponentSpanDie) Namespace(v string) *ComponentSpanDie {
	return d.DieStamp(func(r *ComponentSpan) {
		r.Namespace = v
	})
}

func (d *ComponentSpanDie) Name(v string) *ComponentSpanDie {
	return d.DieStamp(func(r *ComponentSpan) {
		r.Name = v
	})
}

func (d *ComponentSpanDie) Trace(v ...ComponentSpan) *ComponentSpanDie {
	return d.DieStamp(func(r *ComponentSpan) {
		r.Trace = v
	})
}

func (d *ComponentSpanDie) CycleOmitted(v bool) *ComponentSpanDie {
	return d.DieStamp(func(r *ComponentSpan) {
		r.CycleOmitted = v
	})
}

var ComponentDuckSpecBlank = (&ComponentDuckSpecDie{}).DieFeed(ComponentDuckSpec{})

type ComponentDuckSpecDie struct {
	mutable bool
	r       ComponentDuckSpec
	seal    ComponentDuckSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ComponentDuckSpecDie) DieImmutable(immutable bool) *ComponentDuckSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ComponentDuckSpecDie) DieFeed(r ComponentDuckSpec) *ComponentDuckSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ComponentDuckSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ComponentDuckSpecDie) DieFeedPtr(r *ComponentDuckSpec) *ComponentDuckSpecDie {
	if r == nil {
		r = &ComponentDuckSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ComponentDuckSpecDie) DieFeedJSON(j []byte) *ComponentDuckSpecDie {
	r := ComponentDuckSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ComponentDuckSpecDie) DieFeedYAML(y []byte) *ComponentDuckSpecDie {
	r := ComponentDuckSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ComponentDuckSpecDie) DieFeedYAMLFile(name string) *ComponentDuckSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentDuckSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ComponentDuckSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ComponentDuckSpecDie) DieRelease() ComponentDuckSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ComponentDuckSpecDie) DieReleasePtr() *ComponentDuckSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ComponentDuckSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ComponentDuckSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentDuckSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ComponentDuckSpecDie) DieStamp(fn func(r *ComponentDuckSpec)) *ComponentDuckSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ComponentDuckSpecDie) DieStampAt(jp string, fn interface{}) *ComponentDuckSpecDie {
	return d.DieStamp(func(r *ComponentDuckSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ComponentDuckSpecDie) DieWith(fns ...func(d *ComponentDuckSpecDie)) *ComponentDuckSpecDie {
	nd := ComponentDuckSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ComponentDuckSpecDie) DeepCopy() *ComponentDuckSpecDie {
	r := *d.r.DeepCopy()
	return &ComponentDuckSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ComponentDuckSpecDie) DieSeal() *ComponentDuckSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ComponentDuckSpecDie) DieSealFeed(r ComponentDuckSpec) *ComponentDuckSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ComponentDuckSpecDie) DieSealFeedPtr(r *ComponentDuckSpec) *ComponentDuckSpecDie {
	if r == nil {
		r = &ComponentDuckSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ComponentDuckSpecDie) DieSealRelease() ComponentDuckSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ComponentDuckSpecDie) DieSealReleasePtr() *ComponentDuckSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ComponentDuckSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ComponentDuckSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentSpecDie mutates GenericComponentSpec as a die.
func (d *ComponentDuckSpecDie) GenericComponentSpecDie(fn func(d *GenericComponentSpecDie)) *ComponentDuckSpecDie {
	return d.DieStamp(func(r *ComponentDuckSpec) {
		d := GenericComponentSpecBlank.DieImmutable(false).DieFeed(r.GenericComponentSpec)
		fn(d)
		r.GenericComponentSpec = d.DieRelease()
	})
}

func (d *ComponentDuckSpecDie) GenericComponentSpec(v GenericComponentSpec) *ComponentDuckSpecDie {
	return d.DieStamp(func(r *ComponentDuckSpec) {
		r.GenericComponentSpec = v
	})
}

var ComponentDuckStatusBlank = (&ComponentDuckStatusDie{}).DieFeed(ComponentDuckStatus{})

type ComponentDuckStatusDie struct {
	mutable bool
	r       ComponentDuckStatus
	seal    ComponentDuckStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ComponentDuckStatusDie) DieImmutable(immutable bool) *ComponentDuckStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ComponentDuckStatusDie) DieFeed(r ComponentDuckStatus) *ComponentDuckStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ComponentDuckStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ComponentDuckStatusDie) DieFeedPtr(r *ComponentDuckStatus) *ComponentDuckStatusDie {
	if r == nil {
		r = &ComponentDuckStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ComponentDuckStatusDie) DieFeedJSON(j []byte) *ComponentDuckStatusDie {
	r := ComponentDuckStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ComponentDuckStatusDie) DieFeedYAML(y []byte) *ComponentDuckStatusDie {
	r := ComponentDuckStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ComponentDuckStatusDie) DieFeedYAMLFile(name string) *ComponentDuckStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentDuckStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ComponentDuckStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ComponentDuckStatusDie) DieRelease() ComponentDuckStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ComponentDuckStatusDie) DieReleasePtr() *ComponentDuckStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ComponentDuckStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ComponentDuckStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentDuckStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ComponentDuckStatusDie) DieStamp(fn func(r *ComponentDuckStatus)) *ComponentDuckStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ComponentDuckStatusDie) DieStampAt(jp string, fn interface{}) *ComponentDuckStatusDie {
	return d.DieStamp(func(r *ComponentDuckStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ComponentDuckStatusDie) DieWith(fns ...func(d *ComponentDuckStatusDie)) *ComponentDuckStatusDie {
	nd := ComponentDuckStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ComponentDuckStatusDie) DeepCopy() *ComponentDuckStatusDie {
	r := *d.r.DeepCopy()
	return &ComponentDuckStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ComponentDuckStatusDie) DieSeal() *ComponentDuckStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ComponentDuckStatusDie) DieSealFeed(r ComponentDuckStatus) *ComponentDuckStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ComponentDuckStatusDie) DieSealFeedPtr(r *ComponentDuckStatus) *ComponentDuckStatusDie {
	if r == nil {
		r = &ComponentDuckStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ComponentDuckStatusDie) DieSealRelease() ComponentDuckStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ComponentDuckStatusDie) DieSealReleasePtr() *ComponentDuckStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ComponentDuckStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ComponentDuckStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// GenericComponentStatusDie mutates GenericComponentStatus as a die.
func (d *ComponentDuckStatusDie) GenericComponentStatusDie(fn func(d *GenericComponentStatusDie)) *ComponentDuckStatusDie {
	return d.DieStamp(func(r *ComponentDuckStatus) {
		d := GenericComponentStatusBlank.DieImmutable(false).DieFeed(r.GenericComponentStatus)
		fn(d)
		r.GenericComponentStatus = d.DieRelease()
	})
}

func (d *ComponentDuckStatusDie) Status(v apis.Status) *ComponentDuckStatusDie {
	return d.DieStamp(func(r *ComponentDuckStatus) {
		r.Status = v
	})
}

func (d *ComponentDuckStatusDie) GenericComponentStatus(v GenericComponentStatus) *ComponentDuckStatusDie {
	return d.DieStamp(func(r *ComponentDuckStatus) {
		r.GenericComponentStatus = v
	})
}

var ComponentDuckBlank = (&ComponentDuckDie{}).DieFeed(ComponentDuck{})

type ComponentDuckDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       ComponentDuck
	seal    ComponentDuck
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ComponentDuckDie) DieImmutable(immutable bool) *ComponentDuckDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ComponentDuckDie) DieFeed(r ComponentDuck) *ComponentDuckDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ComponentDuckDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ComponentDuckDie) DieFeedPtr(r *ComponentDuck) *ComponentDuckDie {
	if r == nil {
		r = &ComponentDuck{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ComponentDuckDie) DieFeedJSON(j []byte) *ComponentDuckDie {
	r := ComponentDuck{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ComponentDuckDie) DieFeedYAML(y []byte) *ComponentDuckDie {
	r := ComponentDuck{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ComponentDuckDie) DieFeedYAMLFile(name string) *ComponentDuckDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentDuckDie) DieFeedRawExtension(raw runtime.RawExtension) *ComponentDuckDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ComponentDuckDie) DieRelease() ComponentDuck {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ComponentDuckDie) DieReleasePtr() *ComponentDuck {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ComponentDuckDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ComponentDuckDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ComponentDuckDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ComponentDuckDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ComponentDuckDie) DieStamp(fn func(r *ComponentDuck)) *ComponentDuckDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ComponentDuckDie) DieStampAt(jp string, fn interface{}) *ComponentDuckDie {
	return d.DieStamp(func(r *ComponentDuck) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ComponentDuckDie) DieWith(fns ...func(d *ComponentDuckDie)) *ComponentDuckDie {
	nd := ComponentDuckBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ComponentDuckDie) DeepCopy() *ComponentDuckDie {
	r := *d.r.DeepCopy()
	return &ComponentDuckDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ComponentDuckDie) DieSeal() *ComponentDuckDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ComponentDuckDie) DieSealFeed(r ComponentDuck) *ComponentDuckDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ComponentDuckDie) DieSealFeedPtr(r *ComponentDuck) *ComponentDuckDie {
	if r == nil {
		r = &ComponentDuck{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ComponentDuckDie) DieSealRelease() ComponentDuck {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ComponentDuckDie) DieSealReleasePtr() *ComponentDuck {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ComponentDuckDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ComponentDuckDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ComponentDuckDie)(nil)

func (d *ComponentDuckDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ComponentDuckDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ComponentDuckDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ComponentDuckDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &ComponentDuck{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ComponentDuckDie) APIVersion(v string) *ComponentDuckDie {
	return d.DieStamp(func(r *ComponentDuck) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ComponentDuckDie) Kind(v string) *ComponentDuckDie {
	return d.DieStamp(func(r *ComponentDuck) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ComponentDuckDie) TypeMetadata(v metav1.TypeMeta) *ComponentDuckDie {
	return d.DieStamp(func(r *ComponentDuck) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ComponentDuckDie) TypeMetadataDie(fn func(d *v1.TypeMetaDie)) *ComponentDuckDie {
	return d.DieStamp(func(r *ComponentDuck) {
		d := v1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ComponentDuckDie) Metadata(v metav1.ObjectMeta) *ComponentDuckDie {
	return d.DieStamp(func(r *ComponentDuck) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ComponentDuckDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *ComponentDuckDie {
	return d.DieStamp(func(r *ComponentDuck) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ComponentDuckDie) SpecDie(fn func(d *ComponentDuckSpecDie)) *ComponentDuckDie {
	return d.DieStamp(func(r *ComponentDuck) {
		d := ComponentDuckSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ComponentDuckDie) StatusDie(fn func(d *ComponentDuckStatusDie)) *ComponentDuckDie {
	return d.DieStamp(func(r *ComponentDuck) {
		d := ComponentDuckStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ComponentDuckDie) Spec(v ComponentDuckSpec) *ComponentDuckDie {
	return d.DieStamp(func(r *ComponentDuck) {
		r.Spec = v
	})
}

func (d *ComponentDuckDie) Status(v ComponentDuckStatus) *ComponentDuckDie {
	return d.DieStamp(func(r *ComponentDuck) {
		r.Status = v
	})
}
